# 1 "src/ports/cuda/processing.cu"
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"
# 1
#pragma GCC diagnostic push
# 1
#pragma GCC diagnostic ignored "-Wunused-variable"
# 1
#pragma GCC diagnostic ignored "-Wunused-function"
# 1
static char __nv_inited_managed_rt = 0; static void **__nv_fatbinhandle_for_managed_rt; static void __nv_save_fatbinhandle_for_managed_rt(void **in){__nv_fatbinhandle_for_managed_rt = in;} static char __nv_init_managed_rt_with_module(void **); static inline void __nv_init_managed_rt(void) { __nv_inited_managed_rt = (__nv_inited_managed_rt ? __nv_inited_managed_rt                 : __nv_init_managed_rt_with_module(__nv_fatbinhandle_for_managed_rt));}
# 1
#pragma GCC diagnostic pop
# 1
#pragma GCC diagnostic ignored "-Wunused-variable"

# 1
#define __nv_is_extended_device_lambda_closure_type(X) false
#define __nv_is_extended_host_device_lambda_closure_type(X) false
#if defined(__nv_is_extended_device_lambda_closure_type) && defined(__nv_is_extended_host_device_lambda_closure_type)
#endif

# 1
# 61 "/usr/local/cuda/include/cuda_runtime.h"
#pragma GCC diagnostic push
# 64
#pragma GCC diagnostic ignored "-Wunused-function"
# 68 "/usr/local/cuda/include/device_types.h"
#if 0
# 68
enum cudaRoundMode { 
# 70
cudaRoundNearest, 
# 71
cudaRoundZero, 
# 72
cudaRoundPosInf, 
# 73
cudaRoundMinInf
# 74
}; 
#endif
# 100 "/usr/local/cuda/include/vector_types.h"
#if 0
# 100
struct char1 { 
# 102
signed char x; 
# 103
}; 
#endif
# 105 "/usr/local/cuda/include/vector_types.h"
#if 0
# 105
struct uchar1 { 
# 107
unsigned char x; 
# 108
}; 
#endif
# 111 "/usr/local/cuda/include/vector_types.h"
#if 0
# 111
struct __attribute((aligned(2))) char2 { 
# 113
signed char x, y; 
# 114
}; 
#endif
# 116 "/usr/local/cuda/include/vector_types.h"
#if 0
# 116
struct __attribute((aligned(2))) uchar2 { 
# 118
unsigned char x, y; 
# 119
}; 
#endif
# 121 "/usr/local/cuda/include/vector_types.h"
#if 0
# 121
struct char3 { 
# 123
signed char x, y, z; 
# 124
}; 
#endif
# 126 "/usr/local/cuda/include/vector_types.h"
#if 0
# 126
struct uchar3 { 
# 128
unsigned char x, y, z; 
# 129
}; 
#endif
# 131 "/usr/local/cuda/include/vector_types.h"
#if 0
# 131
struct __attribute((aligned(4))) char4 { 
# 133
signed char x, y, z, w; 
# 134
}; 
#endif
# 136 "/usr/local/cuda/include/vector_types.h"
#if 0
# 136
struct __attribute((aligned(4))) uchar4 { 
# 138
unsigned char x, y, z, w; 
# 139
}; 
#endif
# 141 "/usr/local/cuda/include/vector_types.h"
#if 0
# 141
struct short1 { 
# 143
short x; 
# 144
}; 
#endif
# 146 "/usr/local/cuda/include/vector_types.h"
#if 0
# 146
struct ushort1 { 
# 148
unsigned short x; 
# 149
}; 
#endif
# 151 "/usr/local/cuda/include/vector_types.h"
#if 0
# 151
struct __attribute((aligned(4))) short2 { 
# 153
short x, y; 
# 154
}; 
#endif
# 156 "/usr/local/cuda/include/vector_types.h"
#if 0
# 156
struct __attribute((aligned(4))) ushort2 { 
# 158
unsigned short x, y; 
# 159
}; 
#endif
# 161 "/usr/local/cuda/include/vector_types.h"
#if 0
# 161
struct short3 { 
# 163
short x, y, z; 
# 164
}; 
#endif
# 166 "/usr/local/cuda/include/vector_types.h"
#if 0
# 166
struct ushort3 { 
# 168
unsigned short x, y, z; 
# 169
}; 
#endif
# 171 "/usr/local/cuda/include/vector_types.h"
#if 0
# 171
struct __attribute((aligned(8))) short4 { short x; short y; short z; short w; }; 
#endif
# 172 "/usr/local/cuda/include/vector_types.h"
#if 0
# 172
struct __attribute((aligned(8))) ushort4 { unsigned short x; unsigned short y; unsigned short z; unsigned short w; }; 
#endif
# 174 "/usr/local/cuda/include/vector_types.h"
#if 0
# 174
struct int1 { 
# 176
int x; 
# 177
}; 
#endif
# 179 "/usr/local/cuda/include/vector_types.h"
#if 0
# 179
struct uint1 { 
# 181
unsigned x; 
# 182
}; 
#endif
# 184 "/usr/local/cuda/include/vector_types.h"
#if 0
# 184
struct __attribute((aligned(8))) int2 { int x; int y; }; 
#endif
# 185 "/usr/local/cuda/include/vector_types.h"
#if 0
# 185
struct __attribute((aligned(8))) uint2 { unsigned x; unsigned y; }; 
#endif
# 187 "/usr/local/cuda/include/vector_types.h"
#if 0
# 187
struct int3 { 
# 189
int x, y, z; 
# 190
}; 
#endif
# 192 "/usr/local/cuda/include/vector_types.h"
#if 0
# 192
struct uint3 { 
# 194
unsigned x, y, z; 
# 195
}; 
#endif
# 197 "/usr/local/cuda/include/vector_types.h"
#if 0
# 197
struct __attribute((aligned(16))) int4 { 
# 199
int x, y, z, w; 
# 200
}; 
#endif
# 202 "/usr/local/cuda/include/vector_types.h"
#if 0
# 202
struct __attribute((aligned(16))) uint4 { 
# 204
unsigned x, y, z, w; 
# 205
}; 
#endif
# 207 "/usr/local/cuda/include/vector_types.h"
#if 0
# 207
struct long1 { 
# 209
long x; 
# 210
}; 
#endif
# 212 "/usr/local/cuda/include/vector_types.h"
#if 0
# 212
struct ulong1 { 
# 214
unsigned long x; 
# 215
}; 
#endif
# 222 "/usr/local/cuda/include/vector_types.h"
#if 0
# 222
struct __attribute((aligned((2) * sizeof(long)))) long2 { 
# 224
long x, y; 
# 225
}; 
#endif
# 227 "/usr/local/cuda/include/vector_types.h"
#if 0
# 227
struct __attribute((aligned((2) * sizeof(unsigned long)))) ulong2 { 
# 229
unsigned long x, y; 
# 230
}; 
#endif
# 234 "/usr/local/cuda/include/vector_types.h"
#if 0
# 234
struct long3 { 
# 236
long x, y, z; 
# 237
}; 
#endif
# 239 "/usr/local/cuda/include/vector_types.h"
#if 0
# 239
struct ulong3 { 
# 241
unsigned long x, y, z; 
# 242
}; 
#endif
# 244 "/usr/local/cuda/include/vector_types.h"
#if 0
# 244
struct __attribute((aligned(16))) long4 { 
# 246
long x, y, z, w; 
# 247
}; 
#endif
# 249 "/usr/local/cuda/include/vector_types.h"
#if 0
# 249
struct __attribute((aligned(16))) ulong4 { 
# 251
unsigned long x, y, z, w; 
# 252
}; 
#endif
# 254 "/usr/local/cuda/include/vector_types.h"
#if 0
# 254
struct float1 { 
# 256
float x; 
# 257
}; 
#endif
# 276 "/usr/local/cuda/include/vector_types.h"
#if 0
# 276
struct __attribute((aligned(8))) float2 { float x; float y; }; 
#endif
# 281 "/usr/local/cuda/include/vector_types.h"
#if 0
# 281
struct float3 { 
# 283
float x, y, z; 
# 284
}; 
#endif
# 286 "/usr/local/cuda/include/vector_types.h"
#if 0
# 286
struct __attribute((aligned(16))) float4 { 
# 288
float x, y, z, w; 
# 289
}; 
#endif
# 291 "/usr/local/cuda/include/vector_types.h"
#if 0
# 291
struct longlong1 { 
# 293
long long x; 
# 294
}; 
#endif
# 296 "/usr/local/cuda/include/vector_types.h"
#if 0
# 296
struct ulonglong1 { 
# 298
unsigned long long x; 
# 299
}; 
#endif
# 301 "/usr/local/cuda/include/vector_types.h"
#if 0
# 301
struct __attribute((aligned(16))) longlong2 { 
# 303
long long x, y; 
# 304
}; 
#endif
# 306 "/usr/local/cuda/include/vector_types.h"
#if 0
# 306
struct __attribute((aligned(16))) ulonglong2 { 
# 308
unsigned long long x, y; 
# 309
}; 
#endif
# 311 "/usr/local/cuda/include/vector_types.h"
#if 0
# 311
struct longlong3 { 
# 313
long long x, y, z; 
# 314
}; 
#endif
# 316 "/usr/local/cuda/include/vector_types.h"
#if 0
# 316
struct ulonglong3 { 
# 318
unsigned long long x, y, z; 
# 319
}; 
#endif
# 321 "/usr/local/cuda/include/vector_types.h"
#if 0
# 321
struct __attribute((aligned(16))) longlong4 { 
# 323
long long x, y, z, w; 
# 324
}; 
#endif
# 326 "/usr/local/cuda/include/vector_types.h"
#if 0
# 326
struct __attribute((aligned(16))) ulonglong4 { 
# 328
unsigned long long x, y, z, w; 
# 329
}; 
#endif
# 331 "/usr/local/cuda/include/vector_types.h"
#if 0
# 331
struct double1 { 
# 333
double x; 
# 334
}; 
#endif
# 336 "/usr/local/cuda/include/vector_types.h"
#if 0
# 336
struct __attribute((aligned(16))) double2 { 
# 338
double x, y; 
# 339
}; 
#endif
# 341 "/usr/local/cuda/include/vector_types.h"
#if 0
# 341
struct double3 { 
# 343
double x, y, z; 
# 344
}; 
#endif
# 346 "/usr/local/cuda/include/vector_types.h"
#if 0
# 346
struct __attribute((aligned(16))) double4 { 
# 348
double x, y, z, w; 
# 349
}; 
#endif
# 363 "/usr/local/cuda/include/vector_types.h"
#if 0
typedef char1 
# 363
char1; 
#endif
# 364 "/usr/local/cuda/include/vector_types.h"
#if 0
typedef uchar1 
# 364
uchar1; 
#endif
# 365 "/usr/local/cuda/include/vector_types.h"
#if 0
typedef char2 
# 365
char2; 
#endif
# 366 "/usr/local/cuda/include/vector_types.h"
#if 0
typedef uchar2 
# 366
uchar2; 
#endif
# 367 "/usr/local/cuda/include/vector_types.h"
#if 0
typedef char3 
# 367
char3; 
#endif
# 368 "/usr/local/cuda/include/vector_types.h"
#if 0
typedef uchar3 
# 368
uchar3; 
#endif
# 369 "/usr/local/cuda/include/vector_types.h"
#if 0
typedef char4 
# 369
char4; 
#endif
# 370 "/usr/local/cuda/include/vector_types.h"
#if 0
typedef uchar4 
# 370
uchar4; 
#endif
# 371 "/usr/local/cuda/include/vector_types.h"
#if 0
typedef short1 
# 371
short1; 
#endif
# 372 "/usr/local/cuda/include/vector_types.h"
#if 0
typedef ushort1 
# 372
ushort1; 
#endif
# 373 "/usr/local/cuda/include/vector_types.h"
#if 0
typedef short2 
# 373
short2; 
#endif
# 374 "/usr/local/cuda/include/vector_types.h"
#if 0
typedef ushort2 
# 374
ushort2; 
#endif
# 375 "/usr/local/cuda/include/vector_types.h"
#if 0
typedef short3 
# 375
short3; 
#endif
# 376 "/usr/local/cuda/include/vector_types.h"
#if 0
typedef ushort3 
# 376
ushort3; 
#endif
# 377 "/usr/local/cuda/include/vector_types.h"
#if 0
typedef short4 
# 377
short4; 
#endif
# 378 "/usr/local/cuda/include/vector_types.h"
#if 0
typedef ushort4 
# 378
ushort4; 
#endif
# 379 "/usr/local/cuda/include/vector_types.h"
#if 0
typedef int1 
# 379
int1; 
#endif
# 380 "/usr/local/cuda/include/vector_types.h"
#if 0
typedef uint1 
# 380
uint1; 
#endif
# 381 "/usr/local/cuda/include/vector_types.h"
#if 0
typedef int2 
# 381
int2; 
#endif
# 382 "/usr/local/cuda/include/vector_types.h"
#if 0
typedef uint2 
# 382
uint2; 
#endif
# 383 "/usr/local/cuda/include/vector_types.h"
#if 0
typedef int3 
# 383
int3; 
#endif
# 384 "/usr/local/cuda/include/vector_types.h"
#if 0
typedef uint3 
# 384
uint3; 
#endif
# 385 "/usr/local/cuda/include/vector_types.h"
#if 0
typedef int4 
# 385
int4; 
#endif
# 386 "/usr/local/cuda/include/vector_types.h"
#if 0
typedef uint4 
# 386
uint4; 
#endif
# 387 "/usr/local/cuda/include/vector_types.h"
#if 0
typedef long1 
# 387
long1; 
#endif
# 388 "/usr/local/cuda/include/vector_types.h"
#if 0
typedef ulong1 
# 388
ulong1; 
#endif
# 389 "/usr/local/cuda/include/vector_types.h"
#if 0
typedef long2 
# 389
long2; 
#endif
# 390 "/usr/local/cuda/include/vector_types.h"
#if 0
typedef ulong2 
# 390
ulong2; 
#endif
# 391 "/usr/local/cuda/include/vector_types.h"
#if 0
typedef long3 
# 391
long3; 
#endif
# 392 "/usr/local/cuda/include/vector_types.h"
#if 0
typedef ulong3 
# 392
ulong3; 
#endif
# 393 "/usr/local/cuda/include/vector_types.h"
#if 0
typedef long4 
# 393
long4; 
#endif
# 394 "/usr/local/cuda/include/vector_types.h"
#if 0
typedef ulong4 
# 394
ulong4; 
#endif
# 395 "/usr/local/cuda/include/vector_types.h"
#if 0
typedef float1 
# 395
float1; 
#endif
# 396 "/usr/local/cuda/include/vector_types.h"
#if 0
typedef float2 
# 396
float2; 
#endif
# 397 "/usr/local/cuda/include/vector_types.h"
#if 0
typedef float3 
# 397
float3; 
#endif
# 398 "/usr/local/cuda/include/vector_types.h"
#if 0
typedef float4 
# 398
float4; 
#endif
# 399 "/usr/local/cuda/include/vector_types.h"
#if 0
typedef longlong1 
# 399
longlong1; 
#endif
# 400 "/usr/local/cuda/include/vector_types.h"
#if 0
typedef ulonglong1 
# 400
ulonglong1; 
#endif
# 401 "/usr/local/cuda/include/vector_types.h"
#if 0
typedef longlong2 
# 401
longlong2; 
#endif
# 402 "/usr/local/cuda/include/vector_types.h"
#if 0
typedef ulonglong2 
# 402
ulonglong2; 
#endif
# 403 "/usr/local/cuda/include/vector_types.h"
#if 0
typedef longlong3 
# 403
longlong3; 
#endif
# 404 "/usr/local/cuda/include/vector_types.h"
#if 0
typedef ulonglong3 
# 404
ulonglong3; 
#endif
# 405 "/usr/local/cuda/include/vector_types.h"
#if 0
typedef longlong4 
# 405
longlong4; 
#endif
# 406 "/usr/local/cuda/include/vector_types.h"
#if 0
typedef ulonglong4 
# 406
ulonglong4; 
#endif
# 407 "/usr/local/cuda/include/vector_types.h"
#if 0
typedef double1 
# 407
double1; 
#endif
# 408 "/usr/local/cuda/include/vector_types.h"
#if 0
typedef double2 
# 408
double2; 
#endif
# 409 "/usr/local/cuda/include/vector_types.h"
#if 0
typedef double3 
# 409
double3; 
#endif
# 410 "/usr/local/cuda/include/vector_types.h"
#if 0
typedef double4 
# 410
double4; 
#endif
# 418 "/usr/local/cuda/include/vector_types.h"
#if 0
# 418
struct dim3 { 
# 420
unsigned x, y, z; 
# 432
}; 
#endif
# 434 "/usr/local/cuda/include/vector_types.h"
#if 0
typedef dim3 
# 434
dim3; 
#endif
# 143 "/usr/lib/gcc/aarch64-linux-gnu/9/include/stddef.h" 3
typedef long ptrdiff_t; 
# 209 "/usr/lib/gcc/aarch64-linux-gnu/9/include/stddef.h" 3
typedef unsigned long size_t; 
#if !defined(__CUDA_INCLUDE_COMPILER_INTERNAL_HEADERS__)
#define __CUDA_INCLUDE_COMPILER_INTERNAL_HEADERS__
#endif
#include "crt/host_runtime.h"
# 426 "/usr/lib/gcc/aarch64-linux-gnu/9/include/stddef.h" 3
typedef 
# 415 "/usr/lib/gcc/aarch64-linux-gnu/9/include/stddef.h" 3
struct { 
# 416
long long __max_align_ll __attribute((__aligned__(__alignof__(long long)))); 
# 417
long double __max_align_ld __attribute((__aligned__(__alignof__(long double)))); 
# 426 "/usr/lib/gcc/aarch64-linux-gnu/9/include/stddef.h" 3
} max_align_t; 
# 433
typedef __decltype((nullptr)) nullptr_t; 
# 199 "/usr/local/cuda/include/driver_types.h"
#if 0
# 199
enum cudaError { 
# 206
cudaSuccess, 
# 212
cudaErrorInvalidValue, 
# 218
cudaErrorMemoryAllocation, 
# 224
cudaErrorInitializationError, 
# 231
cudaErrorCudartUnloading, 
# 238
cudaErrorProfilerDisabled, 
# 246
cudaErrorProfilerNotInitialized, 
# 253
cudaErrorProfilerAlreadyStarted, 
# 260
cudaErrorProfilerAlreadyStopped, 
# 269 "/usr/local/cuda/include/driver_types.h"
cudaErrorInvalidConfiguration, 
# 275
cudaErrorInvalidPitchValue = 12, 
# 281
cudaErrorInvalidSymbol, 
# 289
cudaErrorInvalidHostPointer = 16, 
# 297
cudaErrorInvalidDevicePointer, 
# 303
cudaErrorInvalidTexture, 
# 309
cudaErrorInvalidTextureBinding, 
# 316
cudaErrorInvalidChannelDescriptor, 
# 322
cudaErrorInvalidMemcpyDirection, 
# 332 "/usr/local/cuda/include/driver_types.h"
cudaErrorAddressOfConstant, 
# 341 "/usr/local/cuda/include/driver_types.h"
cudaErrorTextureFetchFailed, 
# 350 "/usr/local/cuda/include/driver_types.h"
cudaErrorTextureNotBound, 
# 359 "/usr/local/cuda/include/driver_types.h"
cudaErrorSynchronizationError, 
# 365
cudaErrorInvalidFilterSetting, 
# 371
cudaErrorInvalidNormSetting, 
# 379
cudaErrorMixedDeviceExecution, 
# 387
cudaErrorNotYetImplemented = 31, 
# 396 "/usr/local/cuda/include/driver_types.h"
cudaErrorMemoryValueTooLarge, 
# 403
cudaErrorStubLibrary = 34, 
# 410
cudaErrorInsufficientDriver, 
# 417
cudaErrorCallRequiresNewerDriver, 
# 423
cudaErrorInvalidSurface, 
# 429
cudaErrorDuplicateVariableName = 43, 
# 435
cudaErrorDuplicateTextureName, 
# 441
cudaErrorDuplicateSurfaceName, 
# 451 "/usr/local/cuda/include/driver_types.h"
cudaErrorDevicesUnavailable, 
# 464 "/usr/local/cuda/include/driver_types.h"
cudaErrorIncompatibleDriverContext = 49, 
# 470
cudaErrorMissingConfiguration = 52, 
# 479 "/usr/local/cuda/include/driver_types.h"
cudaErrorPriorLaunchFailure, 
# 486
cudaErrorLaunchMaxDepthExceeded = 65, 
# 494
cudaErrorLaunchFileScopedTex, 
# 502
cudaErrorLaunchFileScopedSurf, 
# 517 "/usr/local/cuda/include/driver_types.h"
cudaErrorSyncDepthExceeded, 
# 529 "/usr/local/cuda/include/driver_types.h"
cudaErrorLaunchPendingCountExceeded, 
# 535
cudaErrorInvalidDeviceFunction = 98, 
# 541
cudaErrorNoDevice = 100, 
# 548
cudaErrorInvalidDevice, 
# 553
cudaErrorDeviceNotLicensed, 
# 562 "/usr/local/cuda/include/driver_types.h"
cudaErrorSoftwareValidityNotEstablished, 
# 567
cudaErrorStartupFailure = 127, 
# 572
cudaErrorInvalidKernelImage = 200, 
# 582 "/usr/local/cuda/include/driver_types.h"
cudaErrorDeviceUninitialized, 
# 587
cudaErrorMapBufferObjectFailed = 205, 
# 592
cudaErrorUnmapBufferObjectFailed, 
# 598
cudaErrorArrayIsMapped, 
# 603
cudaErrorAlreadyMapped, 
# 611
cudaErrorNoKernelImageForDevice, 
# 616
cudaErrorAlreadyAcquired, 
# 621
cudaErrorNotMapped, 
# 627
cudaErrorNotMappedAsArray, 
# 633
cudaErrorNotMappedAsPointer, 
# 639
cudaErrorECCUncorrectable, 
# 645
cudaErrorUnsupportedLimit, 
# 651
cudaErrorDeviceAlreadyInUse, 
# 657
cudaErrorPeerAccessUnsupported, 
# 663
cudaErrorInvalidPtx, 
# 668
cudaErrorInvalidGraphicsContext, 
# 674
cudaErrorNvlinkUncorrectable, 
# 681
cudaErrorJitCompilerNotFound, 
# 688
cudaErrorUnsupportedPtxVersion, 
# 695
cudaErrorJitCompilationDisabled, 
# 700
cudaErrorUnsupportedExecAffinity, 
# 705
cudaErrorInvalidSource = 300, 
# 710
cudaErrorFileNotFound, 
# 715
cudaErrorSharedObjectSymbolNotFound, 
# 720
cudaErrorSharedObjectInitFailed, 
# 725
cudaErrorOperatingSystem, 
# 732
cudaErrorInvalidResourceHandle = 400, 
# 738
cudaErrorIllegalState, 
# 745
cudaErrorSymbolNotFound = 500, 
# 753
cudaErrorNotReady = 600, 
# 761
cudaErrorIllegalAddress = 700, 
# 770 "/usr/local/cuda/include/driver_types.h"
cudaErrorLaunchOutOfResources, 
# 781 "/usr/local/cuda/include/driver_types.h"
cudaErrorLaunchTimeout, 
# 787
cudaErrorLaunchIncompatibleTexturing, 
# 794
cudaErrorPeerAccessAlreadyEnabled, 
# 801
cudaErrorPeerAccessNotEnabled, 
# 814 "/usr/local/cuda/include/driver_types.h"
cudaErrorSetOnActiveProcess = 708, 
# 821
cudaErrorContextIsDestroyed, 
# 828
cudaErrorAssert, 
# 835
cudaErrorTooManyPeers, 
# 841
cudaErrorHostMemoryAlreadyRegistered, 
# 847
cudaErrorHostMemoryNotRegistered, 
# 856 "/usr/local/cuda/include/driver_types.h"
cudaErrorHardwareStackError, 
# 864
cudaErrorIllegalInstruction, 
# 873 "/usr/local/cuda/include/driver_types.h"
cudaErrorMisalignedAddress, 
# 884 "/usr/local/cuda/include/driver_types.h"
cudaErrorInvalidAddressSpace, 
# 892
cudaErrorInvalidPc, 
# 903 "/usr/local/cuda/include/driver_types.h"
cudaErrorLaunchFailure, 
# 912 "/usr/local/cuda/include/driver_types.h"
cudaErrorCooperativeLaunchTooLarge, 
# 917
cudaErrorNotPermitted = 800, 
# 923
cudaErrorNotSupported, 
# 932 "/usr/local/cuda/include/driver_types.h"
cudaErrorSystemNotReady, 
# 939
cudaErrorSystemDriverMismatch, 
# 948 "/usr/local/cuda/include/driver_types.h"
cudaErrorCompatNotSupportedOnDevice, 
# 953
cudaErrorMpsConnectionFailed, 
# 958
cudaErrorMpsRpcFailure, 
# 964
cudaErrorMpsServerNotReady, 
# 969
cudaErrorMpsMaxClientsReached, 
# 974
cudaErrorMpsMaxConnectionsReached, 
# 979
cudaErrorStreamCaptureUnsupported = 900, 
# 985
cudaErrorStreamCaptureInvalidated, 
# 991
cudaErrorStreamCaptureMerge, 
# 996
cudaErrorStreamCaptureUnmatched, 
# 1002
cudaErrorStreamCaptureUnjoined, 
# 1009
cudaErrorStreamCaptureIsolation, 
# 1015
cudaErrorStreamCaptureImplicit, 
# 1021
cudaErrorCapturedEvent, 
# 1028
cudaErrorStreamCaptureWrongThread, 
# 1033
cudaErrorTimeout, 
# 1039
cudaErrorGraphExecUpdateFailure, 
# 1049 "/usr/local/cuda/include/driver_types.h"
cudaErrorExternalDevice, 
# 1054
cudaErrorUnknown = 999, 
# 1062
cudaErrorApiFailureBase = 10000
# 1063
}; 
#endif
# 1068 "/usr/local/cuda/include/driver_types.h"
#if 0
# 1068
enum cudaChannelFormatKind { 
# 1070
cudaChannelFormatKindSigned, 
# 1071
cudaChannelFormatKindUnsigned, 
# 1072
cudaChannelFormatKindFloat, 
# 1073
cudaChannelFormatKindNone, 
# 1074
cudaChannelFormatKindNV12
# 1075
}; 
#endif
# 1080 "/usr/local/cuda/include/driver_types.h"
#if 0
# 1080
struct cudaChannelFormatDesc { 
# 1082
int x; 
# 1083
int y; 
# 1084
int z; 
# 1085
int w; 
# 1086
cudaChannelFormatKind f; 
# 1087
}; 
#endif
# 1092 "/usr/local/cuda/include/driver_types.h"
typedef struct cudaArray *cudaArray_t; 
# 1097
typedef const cudaArray *cudaArray_const_t; 
# 1099
struct cudaArray; 
# 1104
typedef struct cudaMipmappedArray *cudaMipmappedArray_t; 
# 1109
typedef const cudaMipmappedArray *cudaMipmappedArray_const_t; 
# 1111
struct cudaMipmappedArray; 
# 1121 "/usr/local/cuda/include/driver_types.h"
#if 0
# 1121
struct cudaArraySparseProperties { 
# 1122
struct { 
# 1123
unsigned width; 
# 1124
unsigned height; 
# 1125
unsigned depth; 
# 1126
} tileExtent; 
# 1127
unsigned miptailFirstLevel; 
# 1128
unsigned long long miptailSize; 
# 1129
unsigned flags; 
# 1130
unsigned reserved[4]; 
# 1131
}; 
#endif
# 1136 "/usr/local/cuda/include/driver_types.h"
#if 0
# 1136
enum cudaMemoryType { 
# 1138
cudaMemoryTypeUnregistered, 
# 1139
cudaMemoryTypeHost, 
# 1140
cudaMemoryTypeDevice, 
# 1141
cudaMemoryTypeManaged
# 1142
}; 
#endif
# 1147 "/usr/local/cuda/include/driver_types.h"
#if 0
# 1147
enum cudaMemcpyKind { 
# 1149
cudaMemcpyHostToHost, 
# 1150
cudaMemcpyHostToDevice, 
# 1151
cudaMemcpyDeviceToHost, 
# 1152
cudaMemcpyDeviceToDevice, 
# 1153
cudaMemcpyDefault
# 1154
}; 
#endif
# 1161 "/usr/local/cuda/include/driver_types.h"
#if 0
# 1161
struct cudaPitchedPtr { 
# 1163
void *ptr; 
# 1164
size_t pitch; 
# 1165
size_t xsize; 
# 1166
size_t ysize; 
# 1167
}; 
#endif
# 1174 "/usr/local/cuda/include/driver_types.h"
#if 0
# 1174
struct cudaExtent { 
# 1176
size_t width; 
# 1177
size_t height; 
# 1178
size_t depth; 
# 1179
}; 
#endif
# 1186 "/usr/local/cuda/include/driver_types.h"
#if 0
# 1186
struct cudaPos { 
# 1188
size_t x; 
# 1189
size_t y; 
# 1190
size_t z; 
# 1191
}; 
#endif
# 1196 "/usr/local/cuda/include/driver_types.h"
#if 0
# 1196
struct cudaMemcpy3DParms { 
# 1198
cudaArray_t srcArray; 
# 1199
cudaPos srcPos; 
# 1200
cudaPitchedPtr srcPtr; 
# 1202
cudaArray_t dstArray; 
# 1203
cudaPos dstPos; 
# 1204
cudaPitchedPtr dstPtr; 
# 1206
cudaExtent extent; 
# 1207
cudaMemcpyKind kind; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
# 1208
}; 
#endif
# 1213 "/usr/local/cuda/include/driver_types.h"
#if 0
# 1213
struct cudaMemcpy3DPeerParms { 
# 1215
cudaArray_t srcArray; 
# 1216
cudaPos srcPos; 
# 1217
cudaPitchedPtr srcPtr; 
# 1218
int srcDevice; 
# 1220
cudaArray_t dstArray; 
# 1221
cudaPos dstPos; 
# 1222
cudaPitchedPtr dstPtr; 
# 1223
int dstDevice; 
# 1225
cudaExtent extent; 
# 1226
}; 
#endif
# 1231 "/usr/local/cuda/include/driver_types.h"
#if 0
# 1231
struct cudaMemsetParams { 
# 1232
void *dst; 
# 1233
size_t pitch; 
# 1234
unsigned value; 
# 1235
unsigned elementSize; 
# 1236
size_t width; 
# 1237
size_t height; 
# 1238
}; 
#endif
# 1243 "/usr/local/cuda/include/driver_types.h"
#if 0
# 1243
enum cudaAccessProperty { 
# 1244
cudaAccessPropertyNormal, 
# 1245
cudaAccessPropertyStreaming, 
# 1246
cudaAccessPropertyPersisting
# 1247
}; 
#endif
# 1260 "/usr/local/cuda/include/driver_types.h"
#if 0
# 1260
struct cudaAccessPolicyWindow { 
# 1261
void *base_ptr; 
# 1262
size_t num_bytes; 
# 1263
float hitRatio; 
# 1264
cudaAccessProperty hitProp; 
# 1265
cudaAccessProperty missProp; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
# 1266
}; 
#endif
# 1278 "/usr/local/cuda/include/driver_types.h"
typedef void (*cudaHostFn_t)(void * userData); 
# 1283
#if 0
# 1283
struct cudaHostNodeParams { 
# 1284
cudaHostFn_t fn; 
# 1285
void *userData; 
# 1286
}; 
#endif
# 1291 "/usr/local/cuda/include/driver_types.h"
#if 0
# 1291
enum cudaStreamCaptureStatus { 
# 1292
cudaStreamCaptureStatusNone, 
# 1293
cudaStreamCaptureStatusActive, 
# 1294
cudaStreamCaptureStatusInvalidated
# 1296
}; 
#endif
# 1302 "/usr/local/cuda/include/driver_types.h"
#if 0
# 1302
enum cudaStreamCaptureMode { 
# 1303
cudaStreamCaptureModeGlobal, 
# 1304
cudaStreamCaptureModeThreadLocal, 
# 1305
cudaStreamCaptureModeRelaxed
# 1306
}; 
#endif
# 1308 "/usr/local/cuda/include/driver_types.h"
#if 0
# 1308
enum cudaSynchronizationPolicy { 
# 1309
cudaSyncPolicyAuto = 1, 
# 1310
cudaSyncPolicySpin, 
# 1311
cudaSyncPolicyYield, 
# 1312
cudaSyncPolicyBlockingSync
# 1313
}; 
#endif
# 1318 "/usr/local/cuda/include/driver_types.h"
#if 0
# 1318
enum cudaStreamAttrID { 
# 1319
cudaStreamAttributeAccessPolicyWindow = 1, 
# 1320
cudaStreamAttributeSynchronizationPolicy = 3
# 1321
}; 
#endif
# 1326 "/usr/local/cuda/include/driver_types.h"
#if 0
# 1326
union cudaStreamAttrValue { 
# 1327
cudaAccessPolicyWindow accessPolicyWindow; 
# 1328
cudaSynchronizationPolicy syncPolicy; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
# 1329
}; 
#endif
# 1334 "/usr/local/cuda/include/driver_types.h"
#if 0
# 1334
enum cudaStreamUpdateCaptureDependenciesFlags { 
# 1335
cudaStreamAddCaptureDependencies, 
# 1336
cudaStreamSetCaptureDependencies
# 1337
}; 
#endif
# 1342 "/usr/local/cuda/include/driver_types.h"
#if 0
# 1342
enum cudaUserObjectFlags { 
# 1343
cudaUserObjectNoDestructorSync = 1
# 1344
}; 
#endif
# 1349 "/usr/local/cuda/include/driver_types.h"
#if 0
# 1349
enum cudaUserObjectRetainFlags { 
# 1350
cudaGraphUserObjectMove = 1
# 1351
}; 
#endif
# 1356 "/usr/local/cuda/include/driver_types.h"
struct cudaGraphicsResource; 
# 1361
#if 0
# 1361
enum cudaGraphicsRegisterFlags { 
# 1363
cudaGraphicsRegisterFlagsNone, 
# 1364
cudaGraphicsRegisterFlagsReadOnly, 
# 1365
cudaGraphicsRegisterFlagsWriteDiscard, 
# 1366
cudaGraphicsRegisterFlagsSurfaceLoadStore = 4, 
# 1367
cudaGraphicsRegisterFlagsTextureGather = 8
# 1368
}; 
#endif
# 1373 "/usr/local/cuda/include/driver_types.h"
#if 0
# 1373
enum cudaGraphicsMapFlags { 
# 1375
cudaGraphicsMapFlagsNone, 
# 1376
cudaGraphicsMapFlagsReadOnly, 
# 1377
cudaGraphicsMapFlagsWriteDiscard
# 1378
}; 
#endif
# 1383 "/usr/local/cuda/include/driver_types.h"
#if 0
# 1383
enum cudaGraphicsCubeFace { 
# 1385
cudaGraphicsCubeFacePositiveX, 
# 1386
cudaGraphicsCubeFaceNegativeX, 
# 1387
cudaGraphicsCubeFacePositiveY, 
# 1388
cudaGraphicsCubeFaceNegativeY, 
# 1389
cudaGraphicsCubeFacePositiveZ, 
# 1390
cudaGraphicsCubeFaceNegativeZ
# 1391
}; 
#endif
# 1396 "/usr/local/cuda/include/driver_types.h"
#if 0
# 1396
enum cudaKernelNodeAttrID { 
# 1397
cudaKernelNodeAttributeAccessPolicyWindow = 1, 
# 1398
cudaKernelNodeAttributeCooperative
# 1399
}; 
#endif
# 1404 "/usr/local/cuda/include/driver_types.h"
#if 0
# 1404
union cudaKernelNodeAttrValue { 
# 1405
cudaAccessPolicyWindow accessPolicyWindow; 
# 1406
int cooperative; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
# 1407
}; 
#endif
# 1412 "/usr/local/cuda/include/driver_types.h"
#if 0
# 1412
enum cudaResourceType { 
# 1414
cudaResourceTypeArray, 
# 1415
cudaResourceTypeMipmappedArray, 
# 1416
cudaResourceTypeLinear, 
# 1417
cudaResourceTypePitch2D
# 1418
}; 
#endif
# 1423 "/usr/local/cuda/include/driver_types.h"
#if 0
# 1423
enum cudaResourceViewFormat { 
# 1425
cudaResViewFormatNone, 
# 1426
cudaResViewFormatUnsignedChar1, 
# 1427
cudaResViewFormatUnsignedChar2, 
# 1428
cudaResViewFormatUnsignedChar4, 
# 1429
cudaResViewFormatSignedChar1, 
# 1430
cudaResViewFormatSignedChar2, 
# 1431
cudaResViewFormatSignedChar4, 
# 1432
cudaResViewFormatUnsignedShort1, 
# 1433
cudaResViewFormatUnsignedShort2, 
# 1434
cudaResViewFormatUnsignedShort4, 
# 1435
cudaResViewFormatSignedShort1, 
# 1436
cudaResViewFormatSignedShort2, 
# 1437
cudaResViewFormatSignedShort4, 
# 1438
cudaResViewFormatUnsignedInt1, 
# 1439
cudaResViewFormatUnsignedInt2, 
# 1440
cudaResViewFormatUnsignedInt4, 
# 1441
cudaResViewFormatSignedInt1, 
# 1442
cudaResViewFormatSignedInt2, 
# 1443
cudaResViewFormatSignedInt4, 
# 1444
cudaResViewFormatHalf1, 
# 1445
cudaResViewFormatHalf2, 
# 1446
cudaResViewFormatHalf4, 
# 1447
cudaResViewFormatFloat1, 
# 1448
cudaResViewFormatFloat2, 
# 1449
cudaResViewFormatFloat4, 
# 1450
cudaResViewFormatUnsignedBlockCompressed1, 
# 1451
cudaResViewFormatUnsignedBlockCompressed2, 
# 1452
cudaResViewFormatUnsignedBlockCompressed3, 
# 1453
cudaResViewFormatUnsignedBlockCompressed4, 
# 1454
cudaResViewFormatSignedBlockCompressed4, 
# 1455
cudaResViewFormatUnsignedBlockCompressed5, 
# 1456
cudaResViewFormatSignedBlockCompressed5, 
# 1457
cudaResViewFormatUnsignedBlockCompressed6H, 
# 1458
cudaResViewFormatSignedBlockCompressed6H, 
# 1459
cudaResViewFormatUnsignedBlockCompressed7
# 1460
}; 
#endif
# 1465 "/usr/local/cuda/include/driver_types.h"
#if 0
# 1465
struct cudaResourceDesc { 
# 1466
cudaResourceType resType; 
# 1468
union { 
# 1469
struct { 
# 1470
cudaArray_t array; 
# 1471
} array; 
# 1472
struct { 
# 1473
cudaMipmappedArray_t mipmap; 
# 1474
} mipmap; 
# 1475
struct { 
# 1476
void *devPtr; 
# 1477
cudaChannelFormatDesc desc; 
# 1478
size_t sizeInBytes; 
# 1479
} linear; 
# 1480
struct { 
# 1481
void *devPtr; 
# 1482
cudaChannelFormatDesc desc; 
# 1483
size_t width; 
# 1484
size_t height; 
# 1485
size_t pitchInBytes; 
# 1486
} pitch2D; 
# 1487
} res; 
# 1488
}; 
#endif
# 1493 "/usr/local/cuda/include/driver_types.h"
#if 0
# 1493
struct cudaResourceViewDesc { 
# 1495
cudaResourceViewFormat format; 
# 1496
size_t width; 
# 1497
size_t height; 
# 1498
size_t depth; 
# 1499
unsigned firstMipmapLevel; 
# 1500
unsigned lastMipmapLevel; 
# 1501
unsigned firstLayer; 
# 1502
unsigned lastLayer; 
# 1503
}; 
#endif
# 1508 "/usr/local/cuda/include/driver_types.h"
#if 0
# 1508
struct cudaPointerAttributes { 
# 1514
cudaMemoryType type; 
# 1525 "/usr/local/cuda/include/driver_types.h"
int device; 
# 1531
void *devicePointer; 
# 1540 "/usr/local/cuda/include/driver_types.h"
void *hostPointer; 
# 1541
}; 
#endif
# 1546 "/usr/local/cuda/include/driver_types.h"
#if 0
# 1546
struct cudaFuncAttributes { 
# 1553
size_t sharedSizeBytes; 
# 1559
size_t constSizeBytes; 
# 1564
size_t localSizeBytes; 
# 1571
int maxThreadsPerBlock; 
# 1576
int numRegs; 
# 1583
int ptxVersion; 
# 1590
int binaryVersion; 
# 1596
int cacheModeCA; 
# 1603
int maxDynamicSharedSizeBytes; 
# 1612 "/usr/local/cuda/include/driver_types.h"
int preferredShmemCarveout; 
# 1613
}; 
#endif
# 1618 "/usr/local/cuda/include/driver_types.h"
#if 0
# 1618
enum cudaFuncAttribute { 
# 1620
cudaFuncAttributeMaxDynamicSharedMemorySize = 8, 
# 1621
cudaFuncAttributePreferredSharedMemoryCarveout, 
# 1622
cudaFuncAttributeMax
# 1623
}; 
#endif
# 1628 "/usr/local/cuda/include/driver_types.h"
#if 0
# 1628
enum cudaFuncCache { 
# 1630
cudaFuncCachePreferNone, 
# 1631
cudaFuncCachePreferShared, 
# 1632
cudaFuncCachePreferL1, 
# 1633
cudaFuncCachePreferEqual
# 1634
}; 
#endif
# 1640 "/usr/local/cuda/include/driver_types.h"
#if 0
# 1640
enum cudaSharedMemConfig { 
# 1642
cudaSharedMemBankSizeDefault, 
# 1643
cudaSharedMemBankSizeFourByte, 
# 1644
cudaSharedMemBankSizeEightByte
# 1645
}; 
#endif
# 1650 "/usr/local/cuda/include/driver_types.h"
#if 0
# 1650
enum cudaSharedCarveout { 
# 1651
cudaSharedmemCarveoutDefault = (-1), 
# 1652
cudaSharedmemCarveoutMaxShared = 100, 
# 1653
cudaSharedmemCarveoutMaxL1 = 0
# 1654
}; 
#endif
# 1659 "/usr/local/cuda/include/driver_types.h"
#if 0
# 1659
enum cudaComputeMode { 
# 1661
cudaComputeModeDefault, 
# 1662
cudaComputeModeExclusive, 
# 1663
cudaComputeModeProhibited, 
# 1664
cudaComputeModeExclusiveProcess
# 1665
}; 
#endif
# 1670 "/usr/local/cuda/include/driver_types.h"
#if 0
# 1670
enum cudaLimit { 
# 1672
cudaLimitStackSize, 
# 1673
cudaLimitPrintfFifoSize, 
# 1674
cudaLimitMallocHeapSize, 
# 1675
cudaLimitDevRuntimeSyncDepth, 
# 1676
cudaLimitDevRuntimePendingLaunchCount, 
# 1677
cudaLimitMaxL2FetchGranularity, 
# 1678
cudaLimitPersistingL2CacheSize
# 1679
}; 
#endif
# 1684 "/usr/local/cuda/include/driver_types.h"
#if 0
# 1684
enum cudaMemoryAdvise { 
# 1686
cudaMemAdviseSetReadMostly = 1, 
# 1687
cudaMemAdviseUnsetReadMostly, 
# 1688
cudaMemAdviseSetPreferredLocation, 
# 1689
cudaMemAdviseUnsetPreferredLocation, 
# 1690
cudaMemAdviseSetAccessedBy, 
# 1691
cudaMemAdviseUnsetAccessedBy
# 1692
}; 
#endif
# 1697 "/usr/local/cuda/include/driver_types.h"
#if 0
# 1697
enum cudaMemRangeAttribute { 
# 1699
cudaMemRangeAttributeReadMostly = 1, 
# 1700
cudaMemRangeAttributePreferredLocation, 
# 1701
cudaMemRangeAttributeAccessedBy, 
# 1702
cudaMemRangeAttributeLastPrefetchLocation
# 1703
}; 
#endif
# 1708 "/usr/local/cuda/include/driver_types.h"
#if 0
# 1708
enum cudaOutputMode { 
# 1710
cudaKeyValuePair, 
# 1711
cudaCSV
# 1712
}; 
#endif
# 1717 "/usr/local/cuda/include/driver_types.h"
#if 0
# 1717
enum cudaFlushGPUDirectRDMAWritesOptions { 
# 1718
cudaFlushGPUDirectRDMAWritesOptionHost = (1 << 0), 
# 1719
cudaFlushGPUDirectRDMAWritesOptionMemOps
# 1720
}; 
#endif
# 1725 "/usr/local/cuda/include/driver_types.h"
#if 0
# 1725
enum cudaGPUDirectRDMAWritesOrdering { 
# 1726
cudaGPUDirectRDMAWritesOrderingNone, 
# 1727
cudaGPUDirectRDMAWritesOrderingOwner = 100, 
# 1728
cudaGPUDirectRDMAWritesOrderingAllDevices = 200
# 1729
}; 
#endif
# 1734 "/usr/local/cuda/include/driver_types.h"
#if 0
# 1734
enum cudaFlushGPUDirectRDMAWritesScope { 
# 1735
cudaFlushGPUDirectRDMAWritesToOwner = 100, 
# 1736
cudaFlushGPUDirectRDMAWritesToAllDevices = 200
# 1737
}; 
#endif
# 1742 "/usr/local/cuda/include/driver_types.h"
#if 0
# 1742
enum cudaFlushGPUDirectRDMAWritesTarget { 
# 1743
cudaFlushGPUDirectRDMAWritesTargetCurrentDevice
# 1744
}; 
#endif
# 1750 "/usr/local/cuda/include/driver_types.h"
#if 0
# 1750
enum cudaDeviceAttr { 
# 1752
cudaDevAttrMaxThreadsPerBlock = 1, 
# 1753
cudaDevAttrMaxBlockDimX, 
# 1754
cudaDevAttrMaxBlockDimY, 
# 1755
cudaDevAttrMaxBlockDimZ, 
# 1756
cudaDevAttrMaxGridDimX, 
# 1757
cudaDevAttrMaxGridDimY, 
# 1758
cudaDevAttrMaxGridDimZ, 
# 1759
cudaDevAttrMaxSharedMemoryPerBlock, 
# 1760
cudaDevAttrTotalConstantMemory, 
# 1761
cudaDevAttrWarpSize, 
# 1762
cudaDevAttrMaxPitch, 
# 1763
cudaDevAttrMaxRegistersPerBlock, 
# 1764
cudaDevAttrClockRate, 
# 1765
cudaDevAttrTextureAlignment, 
# 1766
cudaDevAttrGpuOverlap, 
# 1767
cudaDevAttrMultiProcessorCount, 
# 1768
cudaDevAttrKernelExecTimeout, 
# 1769
cudaDevAttrIntegrated, 
# 1770
cudaDevAttrCanMapHostMemory, 
# 1771
cudaDevAttrComputeMode, 
# 1772
cudaDevAttrMaxTexture1DWidth, 
# 1773
cudaDevAttrMaxTexture2DWidth, 
# 1774
cudaDevAttrMaxTexture2DHeight, 
# 1775
cudaDevAttrMaxTexture3DWidth, 
# 1776
cudaDevAttrMaxTexture3DHeight, 
# 1777
cudaDevAttrMaxTexture3DDepth, 
# 1778
cudaDevAttrMaxTexture2DLayeredWidth, 
# 1779
cudaDevAttrMaxTexture2DLayeredHeight, 
# 1780
cudaDevAttrMaxTexture2DLayeredLayers, 
# 1781
cudaDevAttrSurfaceAlignment, 
# 1782
cudaDevAttrConcurrentKernels, 
# 1783
cudaDevAttrEccEnabled, 
# 1784
cudaDevAttrPciBusId, 
# 1785
cudaDevAttrPciDeviceId, 
# 1786
cudaDevAttrTccDriver, 
# 1787
cudaDevAttrMemoryClockRate, 
# 1788
cudaDevAttrGlobalMemoryBusWidth, 
# 1789
cudaDevAttrL2CacheSize, 
# 1790
cudaDevAttrMaxThreadsPerMultiProcessor, 
# 1791
cudaDevAttrAsyncEngineCount, 
# 1792
cudaDevAttrUnifiedAddressing, 
# 1793
cudaDevAttrMaxTexture1DLayeredWidth, 
# 1794
cudaDevAttrMaxTexture1DLayeredLayers, 
# 1795
cudaDevAttrMaxTexture2DGatherWidth = 45, 
# 1796
cudaDevAttrMaxTexture2DGatherHeight, 
# 1797
cudaDevAttrMaxTexture3DWidthAlt, 
# 1798
cudaDevAttrMaxTexture3DHeightAlt, 
# 1799
cudaDevAttrMaxTexture3DDepthAlt, 
# 1800
cudaDevAttrPciDomainId, 
# 1801
cudaDevAttrTexturePitchAlignment, 
# 1802
cudaDevAttrMaxTextureCubemapWidth, 
# 1803
cudaDevAttrMaxTextureCubemapLayeredWidth, 
# 1804
cudaDevAttrMaxTextureCubemapLayeredLayers, 
# 1805
cudaDevAttrMaxSurface1DWidth, 
# 1806
cudaDevAttrMaxSurface2DWidth, 
# 1807
cudaDevAttrMaxSurface2DHeight, 
# 1808
cudaDevAttrMaxSurface3DWidth, 
# 1809
cudaDevAttrMaxSurface3DHeight, 
# 1810
cudaDevAttrMaxSurface3DDepth, 
# 1811
cudaDevAttrMaxSurface1DLayeredWidth, 
# 1812
cudaDevAttrMaxSurface1DLayeredLayers, 
# 1813
cudaDevAttrMaxSurface2DLayeredWidth, 
# 1814
cudaDevAttrMaxSurface2DLayeredHeight, 
# 1815
cudaDevAttrMaxSurface2DLayeredLayers, 
# 1816
cudaDevAttrMaxSurfaceCubemapWidth, 
# 1817
cudaDevAttrMaxSurfaceCubemapLayeredWidth, 
# 1818
cudaDevAttrMaxSurfaceCubemapLayeredLayers, 
# 1819
cudaDevAttrMaxTexture1DLinearWidth, 
# 1820
cudaDevAttrMaxTexture2DLinearWidth, 
# 1821
cudaDevAttrMaxTexture2DLinearHeight, 
# 1822
cudaDevAttrMaxTexture2DLinearPitch, 
# 1823
cudaDevAttrMaxTexture2DMipmappedWidth, 
# 1824
cudaDevAttrMaxTexture2DMipmappedHeight, 
# 1825
cudaDevAttrComputeCapabilityMajor, 
# 1826
cudaDevAttrComputeCapabilityMinor, 
# 1827
cudaDevAttrMaxTexture1DMipmappedWidth, 
# 1828
cudaDevAttrStreamPrioritiesSupported, 
# 1829
cudaDevAttrGlobalL1CacheSupported, 
# 1830
cudaDevAttrLocalL1CacheSupported, 
# 1831
cudaDevAttrMaxSharedMemoryPerMultiprocessor, 
# 1832
cudaDevAttrMaxRegistersPerMultiprocessor, 
# 1833
cudaDevAttrManagedMemory, 
# 1834
cudaDevAttrIsMultiGpuBoard, 
# 1835
cudaDevAttrMultiGpuBoardGroupID, 
# 1836
cudaDevAttrHostNativeAtomicSupported, 
# 1837
cudaDevAttrSingleToDoublePrecisionPerfRatio, 
# 1838
cudaDevAttrPageableMemoryAccess, 
# 1839
cudaDevAttrConcurrentManagedAccess, 
# 1840
cudaDevAttrComputePreemptionSupported, 
# 1841
cudaDevAttrCanUseHostPointerForRegisteredMem, 
# 1842
cudaDevAttrReserved92, 
# 1843
cudaDevAttrReserved93, 
# 1844
cudaDevAttrReserved94, 
# 1845
cudaDevAttrCooperativeLaunch, 
# 1846
cudaDevAttrCooperativeMultiDeviceLaunch, 
# 1847
cudaDevAttrMaxSharedMemoryPerBlockOptin, 
# 1848
cudaDevAttrCanFlushRemoteWrites, 
# 1849
cudaDevAttrHostRegisterSupported, 
# 1850
cudaDevAttrPageableMemoryAccessUsesHostPageTables, 
# 1851
cudaDevAttrDirectManagedMemAccessFromHost, 
# 1852
cudaDevAttrMaxBlocksPerMultiprocessor = 106, 
# 1853
cudaDevAttrMaxPersistingL2CacheSize = 108, 
# 1854
cudaDevAttrMaxAccessPolicyWindowSize, 
# 1855
cudaDevAttrReservedSharedMemoryPerBlock = 111, 
# 1856
cudaDevAttrSparseCudaArraySupported, 
# 1857
cudaDevAttrHostRegisterReadOnlySupported, 
# 1858
cudaDevAttrMaxTimelineSemaphoreInteropSupported, 
# 1859
cudaDevAttrMemoryPoolsSupported, 
# 1860
cudaDevAttrGPUDirectRDMASupported, 
# 1861
cudaDevAttrGPUDirectRDMAFlushWritesOptions, 
# 1862
cudaDevAttrGPUDirectRDMAWritesOrdering, 
# 1863
cudaDevAttrMemoryPoolSupportedHandleTypes, 
# 1864
cudaDevAttrMax
# 1865
}; 
#endif
# 1870 "/usr/local/cuda/include/driver_types.h"
#if 0
# 1870
enum cudaMemPoolAttr { 
# 1880 "/usr/local/cuda/include/driver_types.h"
cudaMemPoolReuseFollowEventDependencies = 1, 
# 1887
cudaMemPoolReuseAllowOpportunistic, 
# 1895
cudaMemPoolReuseAllowInternalDependencies, 
# 1906 "/usr/local/cuda/include/driver_types.h"
cudaMemPoolAttrReleaseThreshold, 
# 1912
cudaMemPoolAttrReservedMemCurrent, 
# 1919
cudaMemPoolAttrReservedMemHigh, 
# 1925
cudaMemPoolAttrUsedMemCurrent, 
# 1932
cudaMemPoolAttrUsedMemHigh
# 1933
}; 
#endif
# 1938 "/usr/local/cuda/include/driver_types.h"
#if 0
# 1938
enum cudaMemLocationType { 
# 1939
cudaMemLocationTypeInvalid, 
# 1940
cudaMemLocationTypeDevice
# 1941
}; 
#endif
# 1948 "/usr/local/cuda/include/driver_types.h"
#if 0
# 1948
struct cudaMemLocation { 
# 1949
cudaMemLocationType type; 
# 1950
int id; 
# 1951
}; 
#endif
# 1956 "/usr/local/cuda/include/driver_types.h"
#if 0
# 1956
enum cudaMemAccessFlags { 
# 1957
cudaMemAccessFlagsProtNone, 
# 1958
cudaMemAccessFlagsProtRead, 
# 1959
cudaMemAccessFlagsProtReadWrite = 3
# 1960
}; 
#endif
# 1965 "/usr/local/cuda/include/driver_types.h"
#if 0
# 1965
struct cudaMemAccessDesc { 
# 1966
cudaMemLocation location; 
# 1967
cudaMemAccessFlags flags; 
# 1968
}; 
#endif
# 1973 "/usr/local/cuda/include/driver_types.h"
#if 0
# 1973
enum cudaMemAllocationType { 
# 1974
cudaMemAllocationTypeInvalid, 
# 1978
cudaMemAllocationTypePinned, 
# 1979
cudaMemAllocationTypeMax = 2147483647
# 1980
}; 
#endif
# 1985 "/usr/local/cuda/include/driver_types.h"
#if 0
# 1985
enum cudaMemAllocationHandleType { 
# 1986
cudaMemHandleTypeNone, 
# 1987
cudaMemHandleTypePosixFileDescriptor, 
# 1988
cudaMemHandleTypeWin32, 
# 1989
cudaMemHandleTypeWin32Kmt = 4
# 1990
}; 
#endif
# 1995 "/usr/local/cuda/include/driver_types.h"
#if 0
# 1995
struct cudaMemPoolProps { 
# 1996
cudaMemAllocationType allocType; 
# 1997
cudaMemAllocationHandleType handleTypes; 
# 1998
cudaMemLocation location; 
# 2005
void *win32SecurityAttributes; 
# 2006
unsigned char reserved[64]; 
# 2007
}; 
#endif
# 2012 "/usr/local/cuda/include/driver_types.h"
#if 0
# 2012
struct cudaMemPoolPtrExportData { 
# 2013
unsigned char reserved[64]; 
# 2014
}; 
#endif
# 2019 "/usr/local/cuda/include/driver_types.h"
#if 0
# 2019
struct cudaMemAllocNodeParams { 
# 2024
cudaMemPoolProps poolProps; 
# 2025
const cudaMemAccessDesc *accessDescs; 
# 2026
size_t accessDescCount; 
# 2027
size_t bytesize; 
# 2028
void *dptr; 
# 2029
}; 
#endif
# 2034 "/usr/local/cuda/include/driver_types.h"
#if 0
# 2034
enum cudaGraphMemAttributeType { 
# 2039
cudaGraphMemAttrUsedMemCurrent = 1, 
# 2046
cudaGraphMemAttrUsedMemHigh, 
# 2053
cudaGraphMemAttrReservedMemCurrent, 
# 2060
cudaGraphMemAttrReservedMemHigh
# 2061
}; 
#endif
# 2067 "/usr/local/cuda/include/driver_types.h"
#if 0
# 2067
enum cudaDeviceP2PAttr { 
# 2068
cudaDevP2PAttrPerformanceRank = 1, 
# 2069
cudaDevP2PAttrAccessSupported, 
# 2070
cudaDevP2PAttrNativeAtomicSupported, 
# 2071
cudaDevP2PAttrCudaArrayAccessSupported
# 2072
}; 
#endif
# 2079 "/usr/local/cuda/include/driver_types.h"
#if 0
# 2079
struct CUuuid_st { 
# 2080
char bytes[16]; 
# 2081
}; 
#endif
# 2082 "/usr/local/cuda/include/driver_types.h"
#if 0
typedef CUuuid_st 
# 2082
CUuuid; 
#endif
# 2084 "/usr/local/cuda/include/driver_types.h"
#if 0
typedef CUuuid_st 
# 2084
cudaUUID_t; 
#endif
# 2089 "/usr/local/cuda/include/driver_types.h"
#if 0
# 2089
struct cudaDeviceProp { 
# 2091
char name[256]; 
# 2092
cudaUUID_t uuid; 
# 2093
char luid[8]; 
# 2094
unsigned luidDeviceNodeMask; 
# 2095
size_t totalGlobalMem; 
# 2096
size_t sharedMemPerBlock; 
# 2097
int regsPerBlock; 
# 2098
int warpSize; 
# 2099
size_t memPitch; 
# 2100
int maxThreadsPerBlock; 
# 2101
int maxThreadsDim[3]; 
# 2102
int maxGridSize[3]; 
# 2103
int clockRate; 
# 2104
size_t totalConstMem; 
# 2105
int major; 
# 2106
int minor; 
# 2107
size_t textureAlignment; 
# 2108
size_t texturePitchAlignment; 
# 2109
int deviceOverlap; 
# 2110
int multiProcessorCount; 
# 2111
int kernelExecTimeoutEnabled; 
# 2112
int integrated; 
# 2113
int canMapHostMemory; 
# 2114
int computeMode; 
# 2115
int maxTexture1D; 
# 2116
int maxTexture1DMipmap; 
# 2117
int maxTexture1DLinear; 
# 2118
int maxTexture2D[2]; 
# 2119
int maxTexture2DMipmap[2]; 
# 2120
int maxTexture2DLinear[3]; 
# 2121
int maxTexture2DGather[2]; 
# 2122
int maxTexture3D[3]; 
# 2123
int maxTexture3DAlt[3]; 
# 2124
int maxTextureCubemap; 
# 2125
int maxTexture1DLayered[2]; 
# 2126
int maxTexture2DLayered[3]; 
# 2127
int maxTextureCubemapLayered[2]; 
# 2128
int maxSurface1D; 
# 2129
int maxSurface2D[2]; 
# 2130
int maxSurface3D[3]; 
# 2131
int maxSurface1DLayered[2]; 
# 2132
int maxSurface2DLayered[3]; 
# 2133
int maxSurfaceCubemap; 
# 2134
int maxSurfaceCubemapLayered[2]; 
# 2135
size_t surfaceAlignment; 
# 2136
int concurrentKernels; 
# 2137
int ECCEnabled; 
# 2138
int pciBusID; 
# 2139
int pciDeviceID; 
# 2140
int pciDomainID; 
# 2141
int tccDriver; 
# 2142
int asyncEngineCount; 
# 2143
int unifiedAddressing; 
# 2144
int memoryClockRate; 
# 2145
int memoryBusWidth; 
# 2146
int l2CacheSize; 
# 2147
int persistingL2CacheMaxSize; 
# 2148
int maxThreadsPerMultiProcessor; 
# 2149
int streamPrioritiesSupported; 
# 2150
int globalL1CacheSupported; 
# 2151
int localL1CacheSupported; 
# 2152
size_t sharedMemPerMultiprocessor; 
# 2153
int regsPerMultiprocessor; 
# 2154
int managedMemory; 
# 2155
int isMultiGpuBoard; 
# 2156
int multiGpuBoardGroupID; 
# 2157
int hostNativeAtomicSupported; 
# 2158
int singleToDoublePrecisionPerfRatio; 
# 2159
int pageableMemoryAccess; 
# 2160
int concurrentManagedAccess; 
# 2161
int computePreemptionSupported; 
# 2162
int canUseHostPointerForRegisteredMem; 
# 2163
int cooperativeLaunch; 
# 2164
int cooperativeMultiDeviceLaunch; 
# 2165
size_t sharedMemPerBlockOptin; 
# 2166
int pageableMemoryAccessUsesHostPageTables; 
# 2167
int directManagedMemAccessFromHost; 
# 2168
int maxBlocksPerMultiProcessor; 
# 2169
int accessPolicyMaxWindowSize; 
# 2170
size_t reservedSharedMemPerBlock; 
# 2171
}; 
#endif
# 2267 "/usr/local/cuda/include/driver_types.h"
#if 0
typedef 
# 2264
struct cudaIpcEventHandle_st { 
# 2266
char reserved[64]; 
# 2267
} cudaIpcEventHandle_t; 
#endif
# 2275 "/usr/local/cuda/include/driver_types.h"
#if 0
typedef 
# 2272
struct cudaIpcMemHandle_st { 
# 2274
char reserved[64]; 
# 2275
} cudaIpcMemHandle_t; 
#endif
# 2280 "/usr/local/cuda/include/driver_types.h"
#if 0
# 2280
enum cudaExternalMemoryHandleType { 
# 2284
cudaExternalMemoryHandleTypeOpaqueFd = 1, 
# 2288
cudaExternalMemoryHandleTypeOpaqueWin32, 
# 2292
cudaExternalMemoryHandleTypeOpaqueWin32Kmt, 
# 2296
cudaExternalMemoryHandleTypeD3D12Heap, 
# 2300
cudaExternalMemoryHandleTypeD3D12Resource, 
# 2304
cudaExternalMemoryHandleTypeD3D11Resource, 
# 2308
cudaExternalMemoryHandleTypeD3D11ResourceKmt, 
# 2312
cudaExternalMemoryHandleTypeNvSciBuf
# 2313
}; 
#endif
# 2355 "/usr/local/cuda/include/driver_types.h"
#if 0
# 2355
struct cudaExternalMemoryHandleDesc { 
# 2359
cudaExternalMemoryHandleType type; 
# 2360
union { 
# 2366
int fd; 
# 2382 "/usr/local/cuda/include/driver_types.h"
struct { 
# 2386
void *handle; 
# 2391
const void *name; 
# 2392
} win32; 
# 2397
const void *nvSciBufObject; 
# 2398
} handle; 
# 2402
unsigned long long size; 
# 2406
unsigned flags; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
# 2407
}; 
#endif
# 2412 "/usr/local/cuda/include/driver_types.h"
#if 0
# 2412
struct cudaExternalMemoryBufferDesc { 
# 2416
unsigned long long offset; 
# 2420
unsigned long long size; 
# 2424
unsigned flags; 
# 2425
}; 
#endif
# 2430 "/usr/local/cuda/include/driver_types.h"
#if 0
# 2430
struct cudaExternalMemoryMipmappedArrayDesc { 
# 2435
unsigned long long offset; 
# 2439
cudaChannelFormatDesc formatDesc; 
# 2443
cudaExtent extent; 
# 2448
unsigned flags; 
# 2452
unsigned numLevels; 
# 2453
}; 
#endif
# 2458 "/usr/local/cuda/include/driver_types.h"
#if 0
# 2458
enum cudaExternalSemaphoreHandleType { 
# 2462
cudaExternalSemaphoreHandleTypeOpaqueFd = 1, 
# 2466
cudaExternalSemaphoreHandleTypeOpaqueWin32, 
# 2470
cudaExternalSemaphoreHandleTypeOpaqueWin32Kmt, 
# 2474
cudaExternalSemaphoreHandleTypeD3D12Fence, 
# 2478
cudaExternalSemaphoreHandleTypeD3D11Fence, 
# 2482
cudaExternalSemaphoreHandleTypeNvSciSync, 
# 2486
cudaExternalSemaphoreHandleTypeKeyedMutex, 
# 2490
cudaExternalSemaphoreHandleTypeKeyedMutexKmt, 
# 2494
cudaExternalSemaphoreHandleTypeTimelineSemaphoreFd, 
# 2498
cudaExternalSemaphoreHandleTypeTimelineSemaphoreWin32
# 2499
}; 
#endif
# 2504 "/usr/local/cuda/include/driver_types.h"
#if 0
# 2504
struct cudaExternalSemaphoreHandleDesc { 
# 2508
cudaExternalSemaphoreHandleType type; 
# 2509
union { 
# 2516
int fd; 
# 2532 "/usr/local/cuda/include/driver_types.h"
struct { 
# 2536
void *handle; 
# 2541
const void *name; 
# 2542
} win32; 
# 2546
const void *nvSciSyncObj; 
# 2547
} handle; 
# 2551
unsigned flags; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
# 2552
}; 
#endif
# 2653 "/usr/local/cuda/include/driver_types.h"
#if 0
# 2653
struct cudaExternalSemaphoreSignalParams { 
# 2654
struct { 
# 2658
struct { 
# 2662
unsigned long long value; 
# 2663
} fence; 
# 2664
union { 
# 2669
void *fence; 
# 2670
unsigned long long reserved; 
# 2671
} nvSciSync; 
# 2675
struct { 
# 2679
unsigned long long key; 
# 2680
} keyedMutex; 
# 2681
unsigned reserved[12]; 
# 2682
} params; 
# 2693 "/usr/local/cuda/include/driver_types.h"
unsigned flags; 
# 2694
unsigned reserved[16]; 
# 2695
}; 
#endif
# 2700 "/usr/local/cuda/include/driver_types.h"
#if 0
# 2700
struct cudaExternalSemaphoreWaitParams { 
# 2701
struct { 
# 2705
struct { 
# 2709
unsigned long long value; 
# 2710
} fence; 
# 2711
union { 
# 2716
void *fence; 
# 2717
unsigned long long reserved; 
# 2718
} nvSciSync; 
# 2722
struct { 
# 2726
unsigned long long key; 
# 2730
unsigned timeoutMs; 
# 2731
} keyedMutex; 
# 2732
unsigned reserved[10]; 
# 2733
} params; 
# 2744 "/usr/local/cuda/include/driver_types.h"
unsigned flags; 
# 2745
unsigned reserved[16]; 
# 2746
}; 
#endif
# 2758 "/usr/local/cuda/include/driver_types.h"
#if 0
typedef cudaError 
# 2758
cudaError_t; 
#endif
# 2763 "/usr/local/cuda/include/driver_types.h"
#if 0
typedef struct CUstream_st *
# 2763
cudaStream_t; 
#endif
# 2768 "/usr/local/cuda/include/driver_types.h"
#if 0
typedef struct CUevent_st *
# 2768
cudaEvent_t; 
#endif
# 2773 "/usr/local/cuda/include/driver_types.h"
#if 0
typedef cudaGraphicsResource *
# 2773
cudaGraphicsResource_t; 
#endif
# 2778 "/usr/local/cuda/include/driver_types.h"
#if 0
typedef cudaOutputMode 
# 2778
cudaOutputMode_t; 
#endif
# 2783 "/usr/local/cuda/include/driver_types.h"
#if 0
typedef struct CUexternalMemory_st *
# 2783
cudaExternalMemory_t; 
#endif
# 2788 "/usr/local/cuda/include/driver_types.h"
#if 0
typedef struct CUexternalSemaphore_st *
# 2788
cudaExternalSemaphore_t; 
#endif
# 2793 "/usr/local/cuda/include/driver_types.h"
#if 0
typedef struct CUgraph_st *
# 2793
cudaGraph_t; 
#endif
# 2798 "/usr/local/cuda/include/driver_types.h"
#if 0
typedef struct CUgraphNode_st *
# 2798
cudaGraphNode_t; 
#endif
# 2803 "/usr/local/cuda/include/driver_types.h"
#if 0
typedef struct CUuserObject_st *
# 2803
cudaUserObject_t; 
#endif
# 2808 "/usr/local/cuda/include/driver_types.h"
#if 0
typedef struct CUfunc_st *
# 2808
cudaFunction_t; 
#endif
# 2813 "/usr/local/cuda/include/driver_types.h"
#if 0
typedef struct CUmemPoolHandle_st *
# 2813
cudaMemPool_t; 
#endif
# 2818 "/usr/local/cuda/include/driver_types.h"
#if 0
# 2818
enum cudaCGScope { 
# 2819
cudaCGScopeInvalid, 
# 2820
cudaCGScopeGrid, 
# 2821
cudaCGScopeMultiGrid
# 2822
}; 
#endif
# 2827 "/usr/local/cuda/include/driver_types.h"
#if 0
# 2827
struct cudaLaunchParams { 
# 2829
void *func; 
# 2830
dim3 gridDim; 
# 2831
dim3 blockDim; 
# 2832
void **args; 
# 2833
size_t sharedMem; 
# 2834
cudaStream_t stream; 
# 2835
}; 
#endif
# 2840 "/usr/local/cuda/include/driver_types.h"
#if 0
# 2840
struct cudaKernelNodeParams { 
# 2841
void *func; 
# 2842
dim3 gridDim; 
# 2843
dim3 blockDim; 
# 2844
unsigned sharedMemBytes; 
# 2845
void **kernelParams; 
# 2846
void **extra; 
# 2847
}; 
#endif
# 2852 "/usr/local/cuda/include/driver_types.h"
#if 0
# 2852
struct cudaExternalSemaphoreSignalNodeParams { 
# 2853
cudaExternalSemaphore_t *extSemArray; 
# 2854
const cudaExternalSemaphoreSignalParams *paramsArray; 
# 2855
unsigned numExtSems; 
# 2856
}; 
#endif
# 2861 "/usr/local/cuda/include/driver_types.h"
#if 0
# 2861
struct cudaExternalSemaphoreWaitNodeParams { 
# 2862
cudaExternalSemaphore_t *extSemArray; 
# 2863
const cudaExternalSemaphoreWaitParams *paramsArray; 
# 2864
unsigned numExtSems; 
# 2865
}; 
#endif
# 2870 "/usr/local/cuda/include/driver_types.h"
#if 0
# 2870
enum cudaGraphNodeType { 
# 2871
cudaGraphNodeTypeKernel, 
# 2872
cudaGraphNodeTypeMemcpy, 
# 2873
cudaGraphNodeTypeMemset, 
# 2874
cudaGraphNodeTypeHost, 
# 2875
cudaGraphNodeTypeGraph, 
# 2876
cudaGraphNodeTypeEmpty, 
# 2877
cudaGraphNodeTypeWaitEvent, 
# 2878
cudaGraphNodeTypeEventRecord, 
# 2879
cudaGraphNodeTypeExtSemaphoreSignal, 
# 2880
cudaGraphNodeTypeExtSemaphoreWait, 
# 2881
cudaGraphNodeTypeMemAlloc, 
# 2882
cudaGraphNodeTypeMemFree, 
# 2883
cudaGraphNodeTypeCount
# 2884
}; 
#endif
# 2889 "/usr/local/cuda/include/driver_types.h"
typedef struct CUgraphExec_st *cudaGraphExec_t; 
# 2894
#if 0
# 2894
enum cudaGraphExecUpdateResult { 
# 2895
cudaGraphExecUpdateSuccess, 
# 2896
cudaGraphExecUpdateError, 
# 2897
cudaGraphExecUpdateErrorTopologyChanged, 
# 2898
cudaGraphExecUpdateErrorNodeTypeChanged, 
# 2899
cudaGraphExecUpdateErrorFunctionChanged, 
# 2900
cudaGraphExecUpdateErrorParametersChanged, 
# 2901
cudaGraphExecUpdateErrorNotSupported, 
# 2902
cudaGraphExecUpdateErrorUnsupportedFunctionChange
# 2903
}; 
#endif
# 2909 "/usr/local/cuda/include/driver_types.h"
#if 0
# 2909
enum cudaGetDriverEntryPointFlags { 
# 2910
cudaEnableDefault, 
# 2911
cudaEnableLegacyStream, 
# 2912
cudaEnablePerThreadDefaultStream
# 2913
}; 
#endif
# 2918 "/usr/local/cuda/include/driver_types.h"
#if 0
# 2918
enum cudaGraphDebugDotFlags { 
# 2919
cudaGraphDebugDotFlagsVerbose = (1 << 0), 
# 2920
cudaGraphDebugDotFlagsKernelNodeParams = (1 << 2), 
# 2921
cudaGraphDebugDotFlagsMemcpyNodeParams = (1 << 3), 
# 2922
cudaGraphDebugDotFlagsMemsetNodeParams = (1 << 4), 
# 2923
cudaGraphDebugDotFlagsHostNodeParams = (1 << 5), 
# 2924
cudaGraphDebugDotFlagsEventNodeParams = (1 << 6), 
# 2925
cudaGraphDebugDotFlagsExtSemasSignalNodeParams = (1 << 7), 
# 2926
cudaGraphDebugDotFlagsExtSemasWaitNodeParams = (1 << 8), 
# 2927
cudaGraphDebugDotFlagsKernelNodeAttributes = (1 << 9), 
# 2928
cudaGraphDebugDotFlagsHandles = (1 << 10)
# 2929
}; 
#endif
# 2934 "/usr/local/cuda/include/driver_types.h"
#if 0
# 2934
enum cudaGraphInstantiateFlags { 
# 2935
cudaGraphInstantiateFlagAutoFreeOnLaunch = 1
# 2936
}; 
#endif
# 84 "/usr/local/cuda/include/surface_types.h"
#if 0
# 84
enum cudaSurfaceBoundaryMode { 
# 86
cudaBoundaryModeZero, 
# 87
cudaBoundaryModeClamp, 
# 88
cudaBoundaryModeTrap
# 89
}; 
#endif
# 94 "/usr/local/cuda/include/surface_types.h"
#if 0
# 94
enum cudaSurfaceFormatMode { 
# 96
cudaFormatModeForced, 
# 97
cudaFormatModeAuto
# 98
}; 
#endif
# 103 "/usr/local/cuda/include/surface_types.h"
#if 0
# 103
struct surfaceReference { 
# 108
cudaChannelFormatDesc channelDesc; 
# 109
}; 
#endif
# 114 "/usr/local/cuda/include/surface_types.h"
#if 0
typedef unsigned long long 
# 114
cudaSurfaceObject_t; 
#endif
# 84 "/usr/local/cuda/include/texture_types.h"
#if 0
# 84
enum cudaTextureAddressMode { 
# 86
cudaAddressModeWrap, 
# 87
cudaAddressModeClamp, 
# 88
cudaAddressModeMirror, 
# 89
cudaAddressModeBorder
# 90
}; 
#endif
# 95 "/usr/local/cuda/include/texture_types.h"
#if 0
# 95
enum cudaTextureFilterMode { 
# 97
cudaFilterModePoint, 
# 98
cudaFilterModeLinear
# 99
}; 
#endif
# 104 "/usr/local/cuda/include/texture_types.h"
#if 0
# 104
enum cudaTextureReadMode { 
# 106
cudaReadModeElementType, 
# 107
cudaReadModeNormalizedFloat
# 108
}; 
#endif
# 113 "/usr/local/cuda/include/texture_types.h"
#if 0
# 113
struct textureReference { 
# 118
int normalized; 
# 122
cudaTextureFilterMode filterMode; 
# 126
cudaTextureAddressMode addressMode[3]; 
# 130
cudaChannelFormatDesc channelDesc; 
# 134
int sRGB; 
# 138
unsigned maxAnisotropy; 
# 142
cudaTextureFilterMode mipmapFilterMode; 
# 146
float mipmapLevelBias; 
# 150
float minMipmapLevelClamp; 
# 154
float maxMipmapLevelClamp; 
# 158
int disableTrilinearOptimization; 
# 159
int __cudaReserved[14]; 
# 160
}; 
#endif
# 165 "/usr/local/cuda/include/texture_types.h"
#if 0
# 165
struct cudaTextureDesc { 
# 170
cudaTextureAddressMode addressMode[3]; 
# 174
cudaTextureFilterMode filterMode; 
# 178
cudaTextureReadMode readMode; 
# 182
int sRGB; 
# 186
float borderColor[4]; 
# 190
int normalizedCoords; 
# 194
unsigned maxAnisotropy; 
# 198
cudaTextureFilterMode mipmapFilterMode; 
# 202
float mipmapLevelBias; 
# 206
float minMipmapLevelClamp; 
# 210
float maxMipmapLevelClamp; 
# 214
int disableTrilinearOptimization; 
# 215
}; 
#endif
# 220 "/usr/local/cuda/include/texture_types.h"
#if 0
typedef unsigned long long 
# 220
cudaTextureObject_t; 
#endif
# 84 "/usr/local/cuda/include/library_types.h"
typedef 
# 54
enum cudaDataType_t { 
# 56
CUDA_R_16F = 2, 
# 57
CUDA_C_16F = 6, 
# 58
CUDA_R_16BF = 14, 
# 59
CUDA_C_16BF, 
# 60
CUDA_R_32F = 0, 
# 61
CUDA_C_32F = 4, 
# 62
CUDA_R_64F = 1, 
# 63
CUDA_C_64F = 5, 
# 64
CUDA_R_4I = 16, 
# 65
CUDA_C_4I, 
# 66
CUDA_R_4U, 
# 67
CUDA_C_4U, 
# 68
CUDA_R_8I = 3, 
# 69
CUDA_C_8I = 7, 
# 70
CUDA_R_8U, 
# 71
CUDA_C_8U, 
# 72
CUDA_R_16I = 20, 
# 73
CUDA_C_16I, 
# 74
CUDA_R_16U, 
# 75
CUDA_C_16U, 
# 76
CUDA_R_32I = 10, 
# 77
CUDA_C_32I, 
# 78
CUDA_R_32U, 
# 79
CUDA_C_32U, 
# 80
CUDA_R_64I = 24, 
# 81
CUDA_C_64I, 
# 82
CUDA_R_64U, 
# 83
CUDA_C_64U
# 84
} cudaDataType; 
# 92
typedef 
# 87
enum libraryPropertyType_t { 
# 89
MAJOR_VERSION, 
# 90
MINOR_VERSION, 
# 91
PATCH_LEVEL
# 92
} libraryPropertyType; 
# 115 "/usr/local/cuda/include/cuda_device_runtime_api.h"
extern "C" {
# 117
extern cudaError_t cudaDeviceGetAttribute(int * value, cudaDeviceAttr attr, int device); 
# 118
extern cudaError_t cudaDeviceGetLimit(size_t * pValue, cudaLimit limit); 
# 119
extern cudaError_t cudaDeviceGetCacheConfig(cudaFuncCache * pCacheConfig); 
# 120
extern cudaError_t cudaDeviceGetSharedMemConfig(cudaSharedMemConfig * pConfig); 
# 121
extern cudaError_t cudaDeviceSynchronize(); 
# 122
extern cudaError_t cudaGetLastError(); 
# 123
extern cudaError_t cudaPeekAtLastError(); 
# 124
extern const char *cudaGetErrorString(cudaError_t error); 
# 125
extern const char *cudaGetErrorName(cudaError_t error); 
# 126
extern cudaError_t cudaGetDeviceCount(int * count); 
# 127
extern cudaError_t cudaGetDevice(int * device); 
# 128
extern cudaError_t cudaStreamCreateWithFlags(cudaStream_t * pStream, unsigned flags); 
# 129
extern cudaError_t cudaStreamDestroy(cudaStream_t stream); 
# 130
extern cudaError_t cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned flags); 
# 131
__attribute__((unused)) extern cudaError_t cudaStreamWaitEvent_ptsz(cudaStream_t stream, cudaEvent_t event, unsigned flags); 
# 132
extern cudaError_t cudaEventCreateWithFlags(cudaEvent_t * event, unsigned flags); 
# 133
extern cudaError_t cudaEventRecord(cudaEvent_t event, cudaStream_t stream); 
# 134
__attribute__((unused)) extern cudaError_t cudaEventRecord_ptsz(cudaEvent_t event, cudaStream_t stream); 
# 135
extern cudaError_t cudaEventRecordWithFlags(cudaEvent_t event, cudaStream_t stream, unsigned flags); 
# 136
__attribute__((unused)) extern cudaError_t cudaEventRecordWithFlags_ptsz(cudaEvent_t event, cudaStream_t stream, unsigned flags); 
# 137
extern cudaError_t cudaEventDestroy(cudaEvent_t event); 
# 138
extern cudaError_t cudaFuncGetAttributes(cudaFuncAttributes * attr, const void * func); 
# 139
extern cudaError_t cudaFree(void * devPtr); 
# 140
extern cudaError_t cudaMalloc(void ** devPtr, size_t size); 
# 141
extern cudaError_t cudaMemcpyAsync(void * dst, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream); 
# 142
__attribute__((unused)) extern cudaError_t cudaMemcpyAsync_ptsz(void * dst, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream); 
# 143
extern cudaError_t cudaMemcpy2DAsync(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream); 
# 144
__attribute__((unused)) extern cudaError_t cudaMemcpy2DAsync_ptsz(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream); 
# 145
extern cudaError_t cudaMemcpy3DAsync(const cudaMemcpy3DParms * p, cudaStream_t stream); 
# 146
__attribute__((unused)) extern cudaError_t cudaMemcpy3DAsync_ptsz(const cudaMemcpy3DParms * p, cudaStream_t stream); 
# 147
extern cudaError_t cudaMemsetAsync(void * devPtr, int value, size_t count, cudaStream_t stream); 
# 148
__attribute__((unused)) extern cudaError_t cudaMemsetAsync_ptsz(void * devPtr, int value, size_t count, cudaStream_t stream); 
# 149
extern cudaError_t cudaMemset2DAsync(void * devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream); 
# 150
__attribute__((unused)) extern cudaError_t cudaMemset2DAsync_ptsz(void * devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream); 
# 151
extern cudaError_t cudaMemset3DAsync(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream); 
# 152
__attribute__((unused)) extern cudaError_t cudaMemset3DAsync_ptsz(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream); 
# 153
extern cudaError_t cudaRuntimeGetVersion(int * runtimeVersion); 
# 174 "/usr/local/cuda/include/cuda_device_runtime_api.h"
__attribute__((unused)) extern void *cudaGetParameterBuffer(size_t alignment, size_t size); 
# 202 "/usr/local/cuda/include/cuda_device_runtime_api.h"
__attribute__((unused)) extern void *cudaGetParameterBufferV2(void * func, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize); 
# 203
__attribute__((unused)) extern cudaError_t cudaLaunchDevice_ptsz(void * func, void * parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize, cudaStream_t stream); 
# 204
__attribute__((unused)) extern cudaError_t cudaLaunchDeviceV2_ptsz(void * parameterBuffer, cudaStream_t stream); 
# 222 "/usr/local/cuda/include/cuda_device_runtime_api.h"
__attribute__((unused)) extern cudaError_t cudaLaunchDevice(void * func, void * parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize, cudaStream_t stream); 
# 223
__attribute__((unused)) extern cudaError_t cudaLaunchDeviceV2(void * parameterBuffer, cudaStream_t stream); 
# 226
extern cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int * numBlocks, const void * func, int blockSize, size_t dynamicSmemSize); 
# 227
extern cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int * numBlocks, const void * func, int blockSize, size_t dynamicSmemSize, unsigned flags); 
# 229
__attribute__((unused)) extern unsigned long long cudaCGGetIntrinsicHandle(cudaCGScope scope); 
# 230
__attribute__((unused)) extern cudaError_t cudaCGSynchronize(unsigned long long handle, unsigned flags); 
# 231
__attribute__((unused)) extern cudaError_t cudaCGSynchronizeGrid(unsigned long long handle, unsigned flags); 
# 232
__attribute__((unused)) extern cudaError_t cudaCGGetSize(unsigned * numThreads, unsigned * numGrids, unsigned long long handle); 
# 233
__attribute__((unused)) extern cudaError_t cudaCGGetRank(unsigned * threadRank, unsigned * gridRank, unsigned long long handle); 
# 234
}
# 236
template< class T> static inline cudaError_t cudaMalloc(T ** devPtr, size_t size); 
# 237
template< class T> static inline cudaError_t cudaFuncGetAttributes(cudaFuncAttributes * attr, T * entry); 
# 238
template< class T> static inline cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int * numBlocks, T func, int blockSize, size_t dynamicSmemSize); 
# 239
template< class T> static inline cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int * numBlocks, T func, int blockSize, size_t dynamicSmemSize, unsigned flags); 
# 266 "/usr/local/cuda/include/cuda_runtime_api.h"
extern "C" {
# 301 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceReset(); 
# 322 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceSynchronize(); 
# 409 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceSetLimit(cudaLimit limit, size_t value); 
# 444 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetLimit(size_t * pValue, cudaLimit limit); 
# 467 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetTexture1DLinearMaxWidth(size_t * maxWidthInElements, const cudaChannelFormatDesc * fmtDesc, int device); 
# 501 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetCacheConfig(cudaFuncCache * pCacheConfig); 
# 538 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetStreamPriorityRange(int * leastPriority, int * greatestPriority); 
# 582 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceSetCacheConfig(cudaFuncCache cacheConfig); 
# 613 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetSharedMemConfig(cudaSharedMemConfig * pConfig); 
# 657 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceSetSharedMemConfig(cudaSharedMemConfig config); 
# 684 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetByPCIBusId(int * device, const char * pciBusId); 
# 714 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetPCIBusId(char * pciBusId, int len, int device); 
# 762 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaIpcGetEventHandle(cudaIpcEventHandle_t * handle, cudaEvent_t event); 
# 803 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaIpcOpenEventHandle(cudaEvent_t * event, cudaIpcEventHandle_t handle); 
# 846 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaIpcGetMemHandle(cudaIpcMemHandle_t * handle, void * devPtr); 
# 910 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaIpcOpenMemHandle(void ** devPtr, cudaIpcMemHandle_t handle, unsigned flags); 
# 946 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaIpcCloseMemHandle(void * devPtr); 
# 978 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceFlushGPUDirectRDMAWrites(cudaFlushGPUDirectRDMAWritesTarget target, cudaFlushGPUDirectRDMAWritesScope scope); 
# 1022 "/usr/local/cuda/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaThreadExit(); 
# 1048 "/usr/local/cuda/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaThreadSynchronize(); 
# 1097 "/usr/local/cuda/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaThreadSetLimit(cudaLimit limit, size_t value); 
# 1130 "/usr/local/cuda/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaThreadGetLimit(size_t * pValue, cudaLimit limit); 
# 1166 "/usr/local/cuda/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaThreadGetCacheConfig(cudaFuncCache * pCacheConfig); 
# 1213 "/usr/local/cuda/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaThreadSetCacheConfig(cudaFuncCache cacheConfig); 
# 1276 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGetLastError(); 
# 1324 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaPeekAtLastError(); 
# 1340 "/usr/local/cuda/include/cuda_runtime_api.h"
extern const char *cudaGetErrorName(cudaError_t error); 
# 1356 "/usr/local/cuda/include/cuda_runtime_api.h"
extern const char *cudaGetErrorString(cudaError_t error); 
# 1384 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGetDeviceCount(int * count); 
# 1662 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGetDeviceProperties(cudaDeviceProp * prop, int device); 
# 1857 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetAttribute(int * value, cudaDeviceAttr attr, int device); 
# 1875 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetDefaultMemPool(cudaMemPool_t * memPool, int device); 
# 1899 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceSetMemPool(int device, cudaMemPool_t memPool); 
# 1919 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetMemPool(cudaMemPool_t * memPool, int device); 
# 1967 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetNvSciSyncAttributes(void * nvSciSyncAttrList, int device, int flags); 
# 2007 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetP2PAttribute(int * value, cudaDeviceP2PAttr attr, int srcDevice, int dstDevice); 
# 2028 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaChooseDevice(int * device, const cudaDeviceProp * prop); 
# 2065 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaSetDevice(int device); 
# 2086 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGetDevice(int * device); 
# 2117 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaSetValidDevices(int * device_arr, int len); 
# 2182 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaSetDeviceFlags(unsigned flags); 
# 2226 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGetDeviceFlags(unsigned * flags); 
# 2266 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamCreate(cudaStream_t * pStream); 
# 2298 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamCreateWithFlags(cudaStream_t * pStream, unsigned flags); 
# 2344 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamCreateWithPriority(cudaStream_t * pStream, unsigned flags, int priority); 
# 2371 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamGetPriority(cudaStream_t hStream, int * priority); 
# 2396 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamGetFlags(cudaStream_t hStream, unsigned * flags); 
# 2411 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaCtxResetPersistingL2Cache(); 
# 2431 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamCopyAttributes(cudaStream_t dst, cudaStream_t src); 
# 2452 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamGetAttribute(cudaStream_t hStream, cudaStreamAttrID attr, cudaStreamAttrValue * value_out); 
# 2476 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamSetAttribute(cudaStream_t hStream, cudaStreamAttrID attr, const cudaStreamAttrValue * value); 
# 2510 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamDestroy(cudaStream_t stream); 
# 2541 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned flags = 0); 
# 2549
typedef void (*cudaStreamCallback_t)(cudaStream_t stream, cudaError_t status, void * userData); 
# 2616 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamAddCallback(cudaStream_t stream, cudaStreamCallback_t callback, void * userData, unsigned flags); 
# 2640 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamSynchronize(cudaStream_t stream); 
# 2665 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamQuery(cudaStream_t stream); 
# 2749 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamAttachMemAsync(cudaStream_t stream, void * devPtr, size_t length = 0, unsigned flags = 4); 
# 2788 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamBeginCapture(cudaStream_t stream, cudaStreamCaptureMode mode); 
# 2839 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaThreadExchangeStreamCaptureMode(cudaStreamCaptureMode * mode); 
# 2867 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamEndCapture(cudaStream_t stream, cudaGraph_t * pGraph); 
# 2905 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamIsCapturing(cudaStream_t stream, cudaStreamCaptureStatus * pCaptureStatus); 
# 2937 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamGetCaptureInfo(cudaStream_t stream, cudaStreamCaptureStatus * pCaptureStatus, unsigned long long * pId); 
# 2992 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamGetCaptureInfo_v2(cudaStream_t stream, cudaStreamCaptureStatus * captureStatus_out, unsigned long long * id_out = 0, cudaGraph_t * graph_out = 0, const cudaGraphNode_t ** dependencies_out = 0, size_t * numDependencies_out = 0); 
# 3025 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamUpdateCaptureDependencies(cudaStream_t stream, cudaGraphNode_t * dependencies, size_t numDependencies, unsigned flags = 0); 
# 3062 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaEventCreate(cudaEvent_t * event); 
# 3099 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaEventCreateWithFlags(cudaEvent_t * event, unsigned flags); 
# 3139 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaEventRecord(cudaEvent_t event, cudaStream_t stream = 0); 
# 3186 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaEventRecordWithFlags(cudaEvent_t event, cudaStream_t stream = 0, unsigned flags = 0); 
# 3218 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaEventQuery(cudaEvent_t event); 
# 3248 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaEventSynchronize(cudaEvent_t event); 
# 3277 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaEventDestroy(cudaEvent_t event); 
# 3320 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaEventElapsedTime(float * ms, cudaEvent_t start, cudaEvent_t end); 
# 3500 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaImportExternalMemory(cudaExternalMemory_t * extMem_out, const cudaExternalMemoryHandleDesc * memHandleDesc); 
# 3555 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaExternalMemoryGetMappedBuffer(void ** devPtr, cudaExternalMemory_t extMem, const cudaExternalMemoryBufferDesc * bufferDesc); 
# 3615 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaExternalMemoryGetMappedMipmappedArray(cudaMipmappedArray_t * mipmap, cudaExternalMemory_t extMem, const cudaExternalMemoryMipmappedArrayDesc * mipmapDesc); 
# 3639 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDestroyExternalMemory(cudaExternalMemory_t extMem); 
# 3792 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaImportExternalSemaphore(cudaExternalSemaphore_t * extSem_out, const cudaExternalSemaphoreHandleDesc * semHandleDesc); 
# 3859 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaSignalExternalSemaphoresAsync_v2(const cudaExternalSemaphore_t * extSemArray, const cudaExternalSemaphoreSignalParams * paramsArray, unsigned numExtSems, cudaStream_t stream = 0); 
# 3935 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaWaitExternalSemaphoresAsync_v2(const cudaExternalSemaphore_t * extSemArray, const cudaExternalSemaphoreWaitParams * paramsArray, unsigned numExtSems, cudaStream_t stream = 0); 
# 3958 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDestroyExternalSemaphore(cudaExternalSemaphore_t extSem); 
# 4025 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaLaunchKernel(const void * func, dim3 gridDim, dim3 blockDim, void ** args, size_t sharedMem, cudaStream_t stream); 
# 4082 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaLaunchCooperativeKernel(const void * func, dim3 gridDim, dim3 blockDim, void ** args, size_t sharedMem, cudaStream_t stream); 
# 4183 "/usr/local/cuda/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaLaunchCooperativeKernelMultiDevice(cudaLaunchParams * launchParamsList, unsigned numDevices, unsigned flags = 0); 
# 4230 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaFuncSetCacheConfig(const void * func, cudaFuncCache cacheConfig); 
# 4285 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaFuncSetSharedMemConfig(const void * func, cudaSharedMemConfig config); 
# 4318 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaFuncGetAttributes(cudaFuncAttributes * attr, const void * func); 
# 4355 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaFuncSetAttribute(const void * func, cudaFuncAttribute attr, int value); 
# 4381 "/usr/local/cuda/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaSetDoubleForDevice(double * d); 
# 4405 "/usr/local/cuda/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaSetDoubleForHost(double * d); 
# 4473 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaLaunchHostFunc(cudaStream_t stream, cudaHostFn_t fn, void * userData); 
# 4530 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int * numBlocks, const void * func, int blockSize, size_t dynamicSMemSize); 
# 4559 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaOccupancyAvailableDynamicSMemPerBlock(size_t * dynamicSmemSize, const void * func, int numBlocks, int blockSize); 
# 4604 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int * numBlocks, const void * func, int blockSize, size_t dynamicSMemSize, unsigned flags); 
# 4725 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMallocManaged(void ** devPtr, size_t size, unsigned flags = 1); 
# 4758 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMalloc(void ** devPtr, size_t size); 
# 4791 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMallocHost(void ** ptr, size_t size); 
# 4834 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMallocPitch(void ** devPtr, size_t * pitch, size_t width, size_t height); 
# 4883 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMallocArray(cudaArray_t * array, const cudaChannelFormatDesc * desc, size_t width, size_t height = 0, unsigned flags = 0); 
# 4912 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaFree(void * devPtr); 
# 4935 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaFreeHost(void * ptr); 
# 4958 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaFreeArray(cudaArray_t array); 
# 4981 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaFreeMipmappedArray(cudaMipmappedArray_t mipmappedArray); 
# 5047 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaHostAlloc(void ** pHost, size_t size, unsigned flags); 
# 5140 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaHostRegister(void * ptr, size_t size, unsigned flags); 
# 5163 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaHostUnregister(void * ptr); 
# 5208 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaHostGetDevicePointer(void ** pDevice, void * pHost, unsigned flags); 
# 5230 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaHostGetFlags(unsigned * pFlags, void * pHost); 
# 5269 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMalloc3D(cudaPitchedPtr * pitchedDevPtr, cudaExtent extent); 
# 5411 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMalloc3DArray(cudaArray_t * array, const cudaChannelFormatDesc * desc, cudaExtent extent, unsigned flags = 0); 
# 5553 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMallocMipmappedArray(cudaMipmappedArray_t * mipmappedArray, const cudaChannelFormatDesc * desc, cudaExtent extent, unsigned numLevels, unsigned flags = 0); 
# 5586 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGetMipmappedArrayLevel(cudaArray_t * levelArray, cudaMipmappedArray_const_t mipmappedArray, unsigned level); 
# 5691 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy3D(const cudaMemcpy3DParms * p); 
# 5722 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy3DPeer(const cudaMemcpy3DPeerParms * p); 
# 5840 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy3DAsync(const cudaMemcpy3DParms * p, cudaStream_t stream = 0); 
# 5866 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy3DPeerAsync(const cudaMemcpy3DPeerParms * p, cudaStream_t stream = 0); 
# 5900 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemGetInfo(size_t * free, size_t * total); 
# 5926 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaArrayGetInfo(cudaChannelFormatDesc * desc, cudaExtent * extent, unsigned * flags, cudaArray_t array); 
# 5955 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaArrayGetPlane(cudaArray_t * pPlaneArray, cudaArray_t hArray, unsigned planeIdx); 
# 5983 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaArrayGetSparseProperties(cudaArraySparseProperties * sparseProperties, cudaArray_t array); 
# 6013 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMipmappedArrayGetSparseProperties(cudaArraySparseProperties * sparseProperties, cudaMipmappedArray_t mipmap); 
# 6058 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy(void * dst, const void * src, size_t count, cudaMemcpyKind kind); 
# 6093 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyPeer(void * dst, int dstDevice, const void * src, int srcDevice, size_t count); 
# 6142 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy2D(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind); 
# 6192 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy2DToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind); 
# 6242 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy2DFromArray(void * dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind); 
# 6289 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy2DArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t width, size_t height, cudaMemcpyKind kind = cudaMemcpyDeviceToDevice); 
# 6332 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyToSymbol(const void * symbol, const void * src, size_t count, size_t offset = 0, cudaMemcpyKind kind = cudaMemcpyHostToDevice); 
# 6375 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyFromSymbol(void * dst, const void * symbol, size_t count, size_t offset = 0, cudaMemcpyKind kind = cudaMemcpyDeviceToHost); 
# 6432 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyAsync(void * dst, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 6467 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyPeerAsync(void * dst, int dstDevice, const void * src, int srcDevice, size_t count, cudaStream_t stream = 0); 
# 6530 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy2DAsync(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 6588 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy2DToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 6645 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy2DFromArrayAsync(void * dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 6696 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyToSymbolAsync(const void * symbol, const void * src, size_t count, size_t offset, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 6747 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyFromSymbolAsync(void * dst, const void * symbol, size_t count, size_t offset, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 6776 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemset(void * devPtr, int value, size_t count); 
# 6810 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemset2D(void * devPtr, size_t pitch, int value, size_t width, size_t height); 
# 6856 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemset3D(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent); 
# 6892 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemsetAsync(void * devPtr, int value, size_t count, cudaStream_t stream = 0); 
# 6933 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemset2DAsync(void * devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream = 0); 
# 6986 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemset3DAsync(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream = 0); 
# 7014 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGetSymbolAddress(void ** devPtr, const void * symbol); 
# 7041 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGetSymbolSize(size_t * size, const void * symbol); 
# 7111 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPrefetchAsync(const void * devPtr, size_t count, int dstDevice, cudaStream_t stream = 0); 
# 7227 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemAdvise(const void * devPtr, size_t count, cudaMemoryAdvise advice, int device); 
# 7286 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemRangeGetAttribute(void * data, size_t dataSize, cudaMemRangeAttribute attribute, const void * devPtr, size_t count); 
# 7325 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemRangeGetAttributes(void ** data, size_t * dataSizes, cudaMemRangeAttribute * attributes, size_t numAttributes, const void * devPtr, size_t count); 
# 7385 "/usr/local/cuda/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaMemcpyToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t count, cudaMemcpyKind kind); 
# 7427 "/usr/local/cuda/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaMemcpyFromArray(void * dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, cudaMemcpyKind kind); 
# 7470 "/usr/local/cuda/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaMemcpyArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t count, cudaMemcpyKind kind = cudaMemcpyDeviceToDevice); 
# 7521 "/usr/local/cuda/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaMemcpyToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 7571 "/usr/local/cuda/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaMemcpyFromArrayAsync(void * dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 7640 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMallocAsync(void ** devPtr, size_t size, cudaStream_t hStream); 
# 7666 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaFreeAsync(void * devPtr, cudaStream_t hStream); 
# 7691 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPoolTrimTo(cudaMemPool_t memPool, size_t minBytesToKeep); 
# 7729 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPoolSetAttribute(cudaMemPool_t memPool, cudaMemPoolAttr attr, void * value); 
# 7767 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPoolGetAttribute(cudaMemPool_t memPool, cudaMemPoolAttr attr, void * value); 
# 7782 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPoolSetAccess(cudaMemPool_t memPool, const cudaMemAccessDesc * descList, size_t count); 
# 7795 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPoolGetAccess(cudaMemAccessFlags * flags, cudaMemPool_t memPool, cudaMemLocation * location); 
# 7815 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPoolCreate(cudaMemPool_t * memPool, const cudaMemPoolProps * poolProps); 
# 7837 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPoolDestroy(cudaMemPool_t memPool); 
# 7873 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMallocFromPoolAsync(void ** ptr, size_t size, cudaMemPool_t memPool, cudaStream_t stream); 
# 7898 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPoolExportToShareableHandle(void * shareableHandle, cudaMemPool_t memPool, cudaMemAllocationHandleType handleType, unsigned flags); 
# 7925 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPoolImportFromShareableHandle(cudaMemPool_t * memPool, void * shareableHandle, cudaMemAllocationHandleType handleType, unsigned flags); 
# 7948 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPoolExportPointer(cudaMemPoolPtrExportData * exportData, void * ptr); 
# 7977 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPoolImportPointer(void ** ptr, cudaMemPool_t memPool, cudaMemPoolPtrExportData * exportData); 
# 8129 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaPointerGetAttributes(cudaPointerAttributes * attributes, const void * ptr); 
# 8170 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceCanAccessPeer(int * canAccessPeer, int device, int peerDevice); 
# 8212 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceEnablePeerAccess(int peerDevice, unsigned flags); 
# 8234 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceDisablePeerAccess(int peerDevice); 
# 8298 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphicsUnregisterResource(cudaGraphicsResource_t resource); 
# 8333 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphicsResourceSetMapFlags(cudaGraphicsResource_t resource, unsigned flags); 
# 8372 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphicsMapResources(int count, cudaGraphicsResource_t * resources, cudaStream_t stream = 0); 
# 8407 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphicsUnmapResources(int count, cudaGraphicsResource_t * resources, cudaStream_t stream = 0); 
# 8439 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphicsResourceGetMappedPointer(void ** devPtr, size_t * size, cudaGraphicsResource_t resource); 
# 8477 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphicsSubResourceGetMappedArray(cudaArray_t * array, cudaGraphicsResource_t resource, unsigned arrayIndex, unsigned mipLevel); 
# 8506 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphicsResourceGetMappedMipmappedArray(cudaMipmappedArray_t * mipmappedArray, cudaGraphicsResource_t resource); 
# 8577 "/usr/local/cuda/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaBindTexture(size_t * offset, const textureReference * texref, const void * devPtr, const cudaChannelFormatDesc * desc, size_t size = ((2147483647) * 2U) + 1U); 
# 8636 "/usr/local/cuda/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaBindTexture2D(size_t * offset, const textureReference * texref, const void * devPtr, const cudaChannelFormatDesc * desc, size_t width, size_t height, size_t pitch); 
# 8674 "/usr/local/cuda/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaBindTextureToArray(const textureReference * texref, cudaArray_const_t array, const cudaChannelFormatDesc * desc); 
# 8714 "/usr/local/cuda/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaBindTextureToMipmappedArray(const textureReference * texref, cudaMipmappedArray_const_t mipmappedArray, const cudaChannelFormatDesc * desc); 
# 8740 "/usr/local/cuda/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaUnbindTexture(const textureReference * texref); 
# 8769 "/usr/local/cuda/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaGetTextureAlignmentOffset(size_t * offset, const textureReference * texref); 
# 8799 "/usr/local/cuda/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaGetTextureReference(const textureReference ** texref, const void * symbol); 
# 8844 "/usr/local/cuda/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaBindSurfaceToArray(const surfaceReference * surfref, cudaArray_const_t array, const cudaChannelFormatDesc * desc); 
# 8869 "/usr/local/cuda/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaGetSurfaceReference(const surfaceReference ** surfref, const void * symbol); 
# 8904 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGetChannelDesc(cudaChannelFormatDesc * desc, cudaArray_const_t array); 
# 8934 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaChannelFormatDesc cudaCreateChannelDesc(int x, int y, int z, int w, cudaChannelFormatKind f); 
# 9152 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaCreateTextureObject(cudaTextureObject_t * pTexObject, const cudaResourceDesc * pResDesc, const cudaTextureDesc * pTexDesc, const cudaResourceViewDesc * pResViewDesc); 
# 9172 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDestroyTextureObject(cudaTextureObject_t texObject); 
# 9192 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGetTextureObjectResourceDesc(cudaResourceDesc * pResDesc, cudaTextureObject_t texObject); 
# 9212 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGetTextureObjectTextureDesc(cudaTextureDesc * pTexDesc, cudaTextureObject_t texObject); 
# 9233 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGetTextureObjectResourceViewDesc(cudaResourceViewDesc * pResViewDesc, cudaTextureObject_t texObject); 
# 9278 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaCreateSurfaceObject(cudaSurfaceObject_t * pSurfObject, const cudaResourceDesc * pResDesc); 
# 9298 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDestroySurfaceObject(cudaSurfaceObject_t surfObject); 
# 9317 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGetSurfaceObjectResourceDesc(cudaResourceDesc * pResDesc, cudaSurfaceObject_t surfObject); 
# 9351 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDriverGetVersion(int * driverVersion); 
# 9376 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaRuntimeGetVersion(int * runtimeVersion); 
# 9423 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphCreate(cudaGraph_t * pGraph, unsigned flags); 
# 9520 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddKernelNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, const cudaKernelNodeParams * pNodeParams); 
# 9553 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphKernelNodeGetParams(cudaGraphNode_t node, cudaKernelNodeParams * pNodeParams); 
# 9578 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphKernelNodeSetParams(cudaGraphNode_t node, const cudaKernelNodeParams * pNodeParams); 
# 9598 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphKernelNodeCopyAttributes(cudaGraphNode_t hSrc, cudaGraphNode_t hDst); 
# 9621 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphKernelNodeGetAttribute(cudaGraphNode_t hNode, cudaKernelNodeAttrID attr, cudaKernelNodeAttrValue * value_out); 
# 9645 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphKernelNodeSetAttribute(cudaGraphNode_t hNode, cudaKernelNodeAttrID attr, const cudaKernelNodeAttrValue * value); 
# 9695 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddMemcpyNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, const cudaMemcpy3DParms * pCopyParams); 
# 9754 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddMemcpyNodeToSymbol(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, const void * symbol, const void * src, size_t count, size_t offset, cudaMemcpyKind kind); 
# 9823 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddMemcpyNodeFromSymbol(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, void * dst, const void * symbol, size_t count, size_t offset, cudaMemcpyKind kind); 
# 9891 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddMemcpyNode1D(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, void * dst, const void * src, size_t count, cudaMemcpyKind kind); 
# 9923 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphMemcpyNodeGetParams(cudaGraphNode_t node, cudaMemcpy3DParms * pNodeParams); 
# 9949 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphMemcpyNodeSetParams(cudaGraphNode_t node, const cudaMemcpy3DParms * pNodeParams); 
# 9988 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphMemcpyNodeSetParamsToSymbol(cudaGraphNode_t node, const void * symbol, const void * src, size_t count, size_t offset, cudaMemcpyKind kind); 
# 10034 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphMemcpyNodeSetParamsFromSymbol(cudaGraphNode_t node, void * dst, const void * symbol, size_t count, size_t offset, cudaMemcpyKind kind); 
# 10080 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphMemcpyNodeSetParams1D(cudaGraphNode_t node, void * dst, const void * src, size_t count, cudaMemcpyKind kind); 
# 10127 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddMemsetNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, const cudaMemsetParams * pMemsetParams); 
# 10150 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphMemsetNodeGetParams(cudaGraphNode_t node, cudaMemsetParams * pNodeParams); 
# 10173 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphMemsetNodeSetParams(cudaGraphNode_t node, const cudaMemsetParams * pNodeParams); 
# 10214 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddHostNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, const cudaHostNodeParams * pNodeParams); 
# 10237 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphHostNodeGetParams(cudaGraphNode_t node, cudaHostNodeParams * pNodeParams); 
# 10260 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphHostNodeSetParams(cudaGraphNode_t node, const cudaHostNodeParams * pNodeParams); 
# 10300 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddChildGraphNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, cudaGraph_t childGraph); 
# 10327 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphChildGraphNodeGetGraph(cudaGraphNode_t node, cudaGraph_t * pGraph); 
# 10364 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddEmptyNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies); 
# 10407 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddEventRecordNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, cudaEvent_t event); 
# 10434 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphEventRecordNodeGetEvent(cudaGraphNode_t node, cudaEvent_t * event_out); 
# 10461 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphEventRecordNodeSetEvent(cudaGraphNode_t node, cudaEvent_t event); 
# 10507 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddEventWaitNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, cudaEvent_t event); 
# 10534 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphEventWaitNodeGetEvent(cudaGraphNode_t node, cudaEvent_t * event_out); 
# 10561 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphEventWaitNodeSetEvent(cudaGraphNode_t node, cudaEvent_t event); 
# 10610 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddExternalSemaphoresSignalNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, const cudaExternalSemaphoreSignalNodeParams * nodeParams); 
# 10643 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExternalSemaphoresSignalNodeGetParams(cudaGraphNode_t hNode, cudaExternalSemaphoreSignalNodeParams * params_out); 
# 10670 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExternalSemaphoresSignalNodeSetParams(cudaGraphNode_t hNode, const cudaExternalSemaphoreSignalNodeParams * nodeParams); 
# 10719 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddExternalSemaphoresWaitNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, const cudaExternalSemaphoreWaitNodeParams * nodeParams); 
# 10752 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExternalSemaphoresWaitNodeGetParams(cudaGraphNode_t hNode, cudaExternalSemaphoreWaitNodeParams * params_out); 
# 10779 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExternalSemaphoresWaitNodeSetParams(cudaGraphNode_t hNode, const cudaExternalSemaphoreWaitNodeParams * nodeParams); 
# 10856 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddMemAllocNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, cudaMemAllocNodeParams * nodeParams); 
# 10883 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphMemAllocNodeGetParams(cudaGraphNode_t node, cudaMemAllocNodeParams * params_out); 
# 10943 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddMemFreeNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, void * dptr); 
# 10967 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphMemFreeNodeGetParams(cudaGraphNode_t node, void * dptr_out); 
# 10995 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGraphMemTrim(int device); 
# 11032 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetGraphMemAttribute(int device, cudaGraphMemAttributeType attr, void * value); 
# 11066 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceSetGraphMemAttribute(int device, cudaGraphMemAttributeType attr, void * value); 
# 11094 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphClone(cudaGraph_t * pGraphClone, cudaGraph_t originalGraph); 
# 11122 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphNodeFindInClone(cudaGraphNode_t * pNode, cudaGraphNode_t originalNode, cudaGraph_t clonedGraph); 
# 11153 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphNodeGetType(cudaGraphNode_t node, cudaGraphNodeType * pType); 
# 11184 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphGetNodes(cudaGraph_t graph, cudaGraphNode_t * nodes, size_t * numNodes); 
# 11215 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphGetRootNodes(cudaGraph_t graph, cudaGraphNode_t * pRootNodes, size_t * pNumRootNodes); 
# 11249 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphGetEdges(cudaGraph_t graph, cudaGraphNode_t * from, cudaGraphNode_t * to, size_t * numEdges); 
# 11280 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphNodeGetDependencies(cudaGraphNode_t node, cudaGraphNode_t * pDependencies, size_t * pNumDependencies); 
# 11312 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphNodeGetDependentNodes(cudaGraphNode_t node, cudaGraphNode_t * pDependentNodes, size_t * pNumDependentNodes); 
# 11343 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddDependencies(cudaGraph_t graph, const cudaGraphNode_t * from, const cudaGraphNode_t * to, size_t numDependencies); 
# 11374 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphRemoveDependencies(cudaGraph_t graph, const cudaGraphNode_t * from, const cudaGraphNode_t * to, size_t numDependencies); 
# 11404 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphDestroyNode(cudaGraphNode_t node); 
# 11442 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphInstantiate(cudaGraphExec_t * pGraphExec, cudaGraph_t graph, cudaGraphNode_t * pErrorNode, char * pLogBuffer, size_t bufferSize); 
# 11485 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphInstantiateWithFlags(cudaGraphExec_t * pGraphExec, cudaGraph_t graph, unsigned long long flags); 
# 11529 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecKernelNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaKernelNodeParams * pNodeParams); 
# 11579 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecMemcpyNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaMemcpy3DParms * pNodeParams); 
# 11634 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecMemcpyNodeSetParamsToSymbol(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const void * symbol, const void * src, size_t count, size_t offset, cudaMemcpyKind kind); 
# 11697 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecMemcpyNodeSetParamsFromSymbol(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, void * dst, const void * symbol, size_t count, size_t offset, cudaMemcpyKind kind); 
# 11758 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecMemcpyNodeSetParams1D(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, void * dst, const void * src, size_t count, cudaMemcpyKind kind); 
# 11812 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecMemsetNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaMemsetParams * pNodeParams); 
# 11851 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecHostNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaHostNodeParams * pNodeParams); 
# 11897 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecChildGraphNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, cudaGraph_t childGraph); 
# 11941 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecEventRecordNodeSetEvent(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event); 
# 11985 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecEventWaitNodeSetEvent(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event); 
# 12032 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecExternalSemaphoresSignalNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const cudaExternalSemaphoreSignalNodeParams * nodeParams); 
# 12079 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecExternalSemaphoresWaitNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const cudaExternalSemaphoreWaitNodeParams * nodeParams); 
# 12154 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecUpdate(cudaGraphExec_t hGraphExec, cudaGraph_t hGraph, cudaGraphNode_t * hErrorNode_out, cudaGraphExecUpdateResult * updateResult_out); 
# 12179 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphUpload(cudaGraphExec_t graphExec, cudaStream_t stream); 
# 12210 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphLaunch(cudaGraphExec_t graphExec, cudaStream_t stream); 
# 12233 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecDestroy(cudaGraphExec_t graphExec); 
# 12254 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphDestroy(cudaGraph_t graph); 
# 12273 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphDebugDotPrint(cudaGraph_t graph, const char * path, unsigned flags); 
# 12309 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaUserObjectCreate(cudaUserObject_t * object_out, void * ptr, cudaHostFn_t destroy, unsigned initialRefcount, unsigned flags); 
# 12333 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaUserObjectRetain(cudaUserObject_t object, unsigned count = 1); 
# 12361 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaUserObjectRelease(cudaUserObject_t object, unsigned count = 1); 
# 12389 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphRetainUserObject(cudaGraph_t graph, cudaUserObject_t object, unsigned count = 1, unsigned flags = 0); 
# 12414 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphReleaseUserObject(cudaGraph_t graph, cudaUserObject_t object, unsigned count = 1); 
# 12480 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGetDriverEntryPoint(const char * symbol, void ** funcPtr, unsigned long long flags); 
# 12485
extern cudaError_t cudaGetExportTable(const void ** ppExportTable, const cudaUUID_t * pExportTableId); 
# 12661 "/usr/local/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGetFuncBySymbol(cudaFunction_t * functionPtr, const void * symbolPtr); 
# 12803 "/usr/local/cuda/include/cuda_runtime_api.h"
}
# 104 "/usr/local/cuda/include/channel_descriptor.h"
template< class T> inline cudaChannelFormatDesc cudaCreateChannelDesc() 
# 105
{ 
# 106
return cudaCreateChannelDesc(0, 0, 0, 0, cudaChannelFormatKindNone); 
# 107
} 
# 109
static inline cudaChannelFormatDesc cudaCreateChannelDescHalf() 
# 110
{ 
# 111
int e = (((int)sizeof(unsigned short)) * 8); 
# 113
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
# 114
} 
# 116
static inline cudaChannelFormatDesc cudaCreateChannelDescHalf1() 
# 117
{ 
# 118
int e = (((int)sizeof(unsigned short)) * 8); 
# 120
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
# 121
} 
# 123
static inline cudaChannelFormatDesc cudaCreateChannelDescHalf2() 
# 124
{ 
# 125
int e = (((int)sizeof(unsigned short)) * 8); 
# 127
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat); 
# 128
} 
# 130
static inline cudaChannelFormatDesc cudaCreateChannelDescHalf4() 
# 131
{ 
# 132
int e = (((int)sizeof(unsigned short)) * 8); 
# 134
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat); 
# 135
} 
# 137
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char> () 
# 138
{ 
# 139
int e = (((int)sizeof(char)) * 8); 
# 142
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 146
} 
# 148
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< signed char> () 
# 149
{ 
# 150
int e = (((int)sizeof(signed char)) * 8); 
# 152
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 153
} 
# 155
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned char> () 
# 156
{ 
# 157
int e = (((int)sizeof(unsigned char)) * 8); 
# 159
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 160
} 
# 162
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char1> () 
# 163
{ 
# 164
int e = (((int)sizeof(signed char)) * 8); 
# 166
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 167
} 
# 169
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar1> () 
# 170
{ 
# 171
int e = (((int)sizeof(unsigned char)) * 8); 
# 173
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 174
} 
# 176
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char2> () 
# 177
{ 
# 178
int e = (((int)sizeof(signed char)) * 8); 
# 180
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
# 181
} 
# 183
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar2> () 
# 184
{ 
# 185
int e = (((int)sizeof(unsigned char)) * 8); 
# 187
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
# 188
} 
# 190
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char4> () 
# 191
{ 
# 192
int e = (((int)sizeof(signed char)) * 8); 
# 194
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
# 195
} 
# 197
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar4> () 
# 198
{ 
# 199
int e = (((int)sizeof(unsigned char)) * 8); 
# 201
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
# 202
} 
# 204
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short> () 
# 205
{ 
# 206
int e = (((int)sizeof(short)) * 8); 
# 208
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 209
} 
# 211
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned short> () 
# 212
{ 
# 213
int e = (((int)sizeof(unsigned short)) * 8); 
# 215
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 216
} 
# 218
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short1> () 
# 219
{ 
# 220
int e = (((int)sizeof(short)) * 8); 
# 222
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 223
} 
# 225
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort1> () 
# 226
{ 
# 227
int e = (((int)sizeof(unsigned short)) * 8); 
# 229
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 230
} 
# 232
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short2> () 
# 233
{ 
# 234
int e = (((int)sizeof(short)) * 8); 
# 236
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
# 237
} 
# 239
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort2> () 
# 240
{ 
# 241
int e = (((int)sizeof(unsigned short)) * 8); 
# 243
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
# 244
} 
# 246
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short4> () 
# 247
{ 
# 248
int e = (((int)sizeof(short)) * 8); 
# 250
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
# 251
} 
# 253
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort4> () 
# 254
{ 
# 255
int e = (((int)sizeof(unsigned short)) * 8); 
# 257
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
# 258
} 
# 260
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int> () 
# 261
{ 
# 262
int e = (((int)sizeof(int)) * 8); 
# 264
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 265
} 
# 267
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned> () 
# 268
{ 
# 269
int e = (((int)sizeof(unsigned)) * 8); 
# 271
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 272
} 
# 274
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int1> () 
# 275
{ 
# 276
int e = (((int)sizeof(int)) * 8); 
# 278
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 279
} 
# 281
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uint1> () 
# 282
{ 
# 283
int e = (((int)sizeof(unsigned)) * 8); 
# 285
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 286
} 
# 288
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int2> () 
# 289
{ 
# 290
int e = (((int)sizeof(int)) * 8); 
# 292
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
# 293
} 
# 295
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uint2> () 
# 296
{ 
# 297
int e = (((int)sizeof(unsigned)) * 8); 
# 299
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
# 300
} 
# 302
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int4> () 
# 303
{ 
# 304
int e = (((int)sizeof(int)) * 8); 
# 306
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
# 307
} 
# 309
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uint4> () 
# 310
{ 
# 311
int e = (((int)sizeof(unsigned)) * 8); 
# 313
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
# 314
} 
# 376 "/usr/local/cuda/include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float> () 
# 377
{ 
# 378
int e = (((int)sizeof(float)) * 8); 
# 380
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
# 381
} 
# 383
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float1> () 
# 384
{ 
# 385
int e = (((int)sizeof(float)) * 8); 
# 387
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
# 388
} 
# 390
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float2> () 
# 391
{ 
# 392
int e = (((int)sizeof(float)) * 8); 
# 394
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat); 
# 395
} 
# 397
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float4> () 
# 398
{ 
# 399
int e = (((int)sizeof(float)) * 8); 
# 401
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat); 
# 402
} 
# 404
static inline cudaChannelFormatDesc cudaCreateChannelDescNV12() 
# 405
{ 
# 406
int e = (((int)sizeof(char)) * 8); 
# 408
return cudaCreateChannelDesc(e, e, e, 0, cudaChannelFormatKindNV12); 
# 409
} 
# 79 "/usr/local/cuda/include/driver_functions.h"
static inline cudaPitchedPtr make_cudaPitchedPtr(void *d, size_t p, size_t xsz, size_t ysz) 
# 80
{ 
# 81
cudaPitchedPtr s; 
# 83
(s.ptr) = d; 
# 84
(s.pitch) = p; 
# 85
(s.xsize) = xsz; 
# 86
(s.ysize) = ysz; 
# 88
return s; 
# 89
} 
# 106 "/usr/local/cuda/include/driver_functions.h"
static inline cudaPos make_cudaPos(size_t x, size_t y, size_t z) 
# 107
{ 
# 108
cudaPos p; 
# 110
(p.x) = x; 
# 111
(p.y) = y; 
# 112
(p.z) = z; 
# 114
return p; 
# 115
} 
# 132 "/usr/local/cuda/include/driver_functions.h"
static inline cudaExtent make_cudaExtent(size_t w, size_t h, size_t d) 
# 133
{ 
# 134
cudaExtent e; 
# 136
(e.width) = w; 
# 137
(e.height) = h; 
# 138
(e.depth) = d; 
# 140
return e; 
# 141
} 
# 73 "/usr/local/cuda/include/vector_functions.h"
static inline char1 make_char1(signed char x); 
# 75
static inline uchar1 make_uchar1(unsigned char x); 
# 77
static inline char2 make_char2(signed char x, signed char y); 
# 79
static inline uchar2 make_uchar2(unsigned char x, unsigned char y); 
# 81
static inline char3 make_char3(signed char x, signed char y, signed char z); 
# 83
static inline uchar3 make_uchar3(unsigned char x, unsigned char y, unsigned char z); 
# 85
static inline char4 make_char4(signed char x, signed char y, signed char z, signed char w); 
# 87
static inline uchar4 make_uchar4(unsigned char x, unsigned char y, unsigned char z, unsigned char w); 
# 89
static inline short1 make_short1(short x); 
# 91
static inline ushort1 make_ushort1(unsigned short x); 
# 93
static inline short2 make_short2(short x, short y); 
# 95
static inline ushort2 make_ushort2(unsigned short x, unsigned short y); 
# 97
static inline short3 make_short3(short x, short y, short z); 
# 99
static inline ushort3 make_ushort3(unsigned short x, unsigned short y, unsigned short z); 
# 101
static inline short4 make_short4(short x, short y, short z, short w); 
# 103
static inline ushort4 make_ushort4(unsigned short x, unsigned short y, unsigned short z, unsigned short w); 
# 105
static inline int1 make_int1(int x); 
# 107
static inline uint1 make_uint1(unsigned x); 
# 109
static inline int2 make_int2(int x, int y); 
# 111
static inline uint2 make_uint2(unsigned x, unsigned y); 
# 113
static inline int3 make_int3(int x, int y, int z); 
# 115
static inline uint3 make_uint3(unsigned x, unsigned y, unsigned z); 
# 117
static inline int4 make_int4(int x, int y, int z, int w); 
# 119
static inline uint4 make_uint4(unsigned x, unsigned y, unsigned z, unsigned w); 
# 121
static inline long1 make_long1(long x); 
# 123
static inline ulong1 make_ulong1(unsigned long x); 
# 125
static inline long2 make_long2(long x, long y); 
# 127
static inline ulong2 make_ulong2(unsigned long x, unsigned long y); 
# 129
static inline long3 make_long3(long x, long y, long z); 
# 131
static inline ulong3 make_ulong3(unsigned long x, unsigned long y, unsigned long z); 
# 133
static inline long4 make_long4(long x, long y, long z, long w); 
# 135
static inline ulong4 make_ulong4(unsigned long x, unsigned long y, unsigned long z, unsigned long w); 
# 137
static inline float1 make_float1(float x); 
# 139
static inline float2 make_float2(float x, float y); 
# 141
static inline float3 make_float3(float x, float y, float z); 
# 143
static inline float4 make_float4(float x, float y, float z, float w); 
# 145
static inline longlong1 make_longlong1(long long x); 
# 147
static inline ulonglong1 make_ulonglong1(unsigned long long x); 
# 149
static inline longlong2 make_longlong2(long long x, long long y); 
# 151
static inline ulonglong2 make_ulonglong2(unsigned long long x, unsigned long long y); 
# 153
static inline longlong3 make_longlong3(long long x, long long y, long long z); 
# 155
static inline ulonglong3 make_ulonglong3(unsigned long long x, unsigned long long y, unsigned long long z); 
# 157
static inline longlong4 make_longlong4(long long x, long long y, long long z, long long w); 
# 159
static inline ulonglong4 make_ulonglong4(unsigned long long x, unsigned long long y, unsigned long long z, unsigned long long w); 
# 161
static inline double1 make_double1(double x); 
# 163
static inline double2 make_double2(double x, double y); 
# 165
static inline double3 make_double3(double x, double y, double z); 
# 167
static inline double4 make_double4(double x, double y, double z, double w); 
# 73 "/usr/local/cuda/include/vector_functions.hpp"
static inline char1 make_char1(signed char x) 
# 74
{ 
# 75
char1 t; (t.x) = x; return t; 
# 76
} 
# 78
static inline uchar1 make_uchar1(unsigned char x) 
# 79
{ 
# 80
uchar1 t; (t.x) = x; return t; 
# 81
} 
# 83
static inline char2 make_char2(signed char x, signed char y) 
# 84
{ 
# 85
char2 t; (t.x) = x; (t.y) = y; return t; 
# 86
} 
# 88
static inline uchar2 make_uchar2(unsigned char x, unsigned char y) 
# 89
{ 
# 90
uchar2 t; (t.x) = x; (t.y) = y; return t; 
# 91
} 
# 93
static inline char3 make_char3(signed char x, signed char y, signed char z) 
# 94
{ 
# 95
char3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 96
} 
# 98
static inline uchar3 make_uchar3(unsigned char x, unsigned char y, unsigned char z) 
# 99
{ 
# 100
uchar3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 101
} 
# 103
static inline char4 make_char4(signed char x, signed char y, signed char z, signed char w) 
# 104
{ 
# 105
char4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 106
} 
# 108
static inline uchar4 make_uchar4(unsigned char x, unsigned char y, unsigned char z, unsigned char w) 
# 109
{ 
# 110
uchar4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 111
} 
# 113
static inline short1 make_short1(short x) 
# 114
{ 
# 115
short1 t; (t.x) = x; return t; 
# 116
} 
# 118
static inline ushort1 make_ushort1(unsigned short x) 
# 119
{ 
# 120
ushort1 t; (t.x) = x; return t; 
# 121
} 
# 123
static inline short2 make_short2(short x, short y) 
# 124
{ 
# 125
short2 t; (t.x) = x; (t.y) = y; return t; 
# 126
} 
# 128
static inline ushort2 make_ushort2(unsigned short x, unsigned short y) 
# 129
{ 
# 130
ushort2 t; (t.x) = x; (t.y) = y; return t; 
# 131
} 
# 133
static inline short3 make_short3(short x, short y, short z) 
# 134
{ 
# 135
short3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 136
} 
# 138
static inline ushort3 make_ushort3(unsigned short x, unsigned short y, unsigned short z) 
# 139
{ 
# 140
ushort3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 141
} 
# 143
static inline short4 make_short4(short x, short y, short z, short w) 
# 144
{ 
# 145
short4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 146
} 
# 148
static inline ushort4 make_ushort4(unsigned short x, unsigned short y, unsigned short z, unsigned short w) 
# 149
{ 
# 150
ushort4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 151
} 
# 153
static inline int1 make_int1(int x) 
# 154
{ 
# 155
int1 t; (t.x) = x; return t; 
# 156
} 
# 158
static inline uint1 make_uint1(unsigned x) 
# 159
{ 
# 160
uint1 t; (t.x) = x; return t; 
# 161
} 
# 163
static inline int2 make_int2(int x, int y) 
# 164
{ 
# 165
int2 t; (t.x) = x; (t.y) = y; return t; 
# 166
} 
# 168
static inline uint2 make_uint2(unsigned x, unsigned y) 
# 169
{ 
# 170
uint2 t; (t.x) = x; (t.y) = y; return t; 
# 171
} 
# 173
static inline int3 make_int3(int x, int y, int z) 
# 174
{ 
# 175
int3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 176
} 
# 178
static inline uint3 make_uint3(unsigned x, unsigned y, unsigned z) 
# 179
{ 
# 180
uint3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 181
} 
# 183
static inline int4 make_int4(int x, int y, int z, int w) 
# 184
{ 
# 185
int4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 186
} 
# 188
static inline uint4 make_uint4(unsigned x, unsigned y, unsigned z, unsigned w) 
# 189
{ 
# 190
uint4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 191
} 
# 193
static inline long1 make_long1(long x) 
# 194
{ 
# 195
long1 t; (t.x) = x; return t; 
# 196
} 
# 198
static inline ulong1 make_ulong1(unsigned long x) 
# 199
{ 
# 200
ulong1 t; (t.x) = x; return t; 
# 201
} 
# 203
static inline long2 make_long2(long x, long y) 
# 204
{ 
# 205
long2 t; (t.x) = x; (t.y) = y; return t; 
# 206
} 
# 208
static inline ulong2 make_ulong2(unsigned long x, unsigned long y) 
# 209
{ 
# 210
ulong2 t; (t.x) = x; (t.y) = y; return t; 
# 211
} 
# 213
static inline long3 make_long3(long x, long y, long z) 
# 214
{ 
# 215
long3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 216
} 
# 218
static inline ulong3 make_ulong3(unsigned long x, unsigned long y, unsigned long z) 
# 219
{ 
# 220
ulong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 221
} 
# 223
static inline long4 make_long4(long x, long y, long z, long w) 
# 224
{ 
# 225
long4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 226
} 
# 228
static inline ulong4 make_ulong4(unsigned long x, unsigned long y, unsigned long z, unsigned long w) 
# 229
{ 
# 230
ulong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 231
} 
# 233
static inline float1 make_float1(float x) 
# 234
{ 
# 235
float1 t; (t.x) = x; return t; 
# 236
} 
# 238
static inline float2 make_float2(float x, float y) 
# 239
{ 
# 240
float2 t; (t.x) = x; (t.y) = y; return t; 
# 241
} 
# 243
static inline float3 make_float3(float x, float y, float z) 
# 244
{ 
# 245
float3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 246
} 
# 248
static inline float4 make_float4(float x, float y, float z, float w) 
# 249
{ 
# 250
float4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 251
} 
# 253
static inline longlong1 make_longlong1(long long x) 
# 254
{ 
# 255
longlong1 t; (t.x) = x; return t; 
# 256
} 
# 258
static inline ulonglong1 make_ulonglong1(unsigned long long x) 
# 259
{ 
# 260
ulonglong1 t; (t.x) = x; return t; 
# 261
} 
# 263
static inline longlong2 make_longlong2(long long x, long long y) 
# 264
{ 
# 265
longlong2 t; (t.x) = x; (t.y) = y; return t; 
# 266
} 
# 268
static inline ulonglong2 make_ulonglong2(unsigned long long x, unsigned long long y) 
# 269
{ 
# 270
ulonglong2 t; (t.x) = x; (t.y) = y; return t; 
# 271
} 
# 273
static inline longlong3 make_longlong3(long long x, long long y, long long z) 
# 274
{ 
# 275
longlong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 276
} 
# 278
static inline ulonglong3 make_ulonglong3(unsigned long long x, unsigned long long y, unsigned long long z) 
# 279
{ 
# 280
ulonglong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 281
} 
# 283
static inline longlong4 make_longlong4(long long x, long long y, long long z, long long w) 
# 284
{ 
# 285
longlong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 286
} 
# 288
static inline ulonglong4 make_ulonglong4(unsigned long long x, unsigned long long y, unsigned long long z, unsigned long long w) 
# 289
{ 
# 290
ulonglong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 291
} 
# 293
static inline double1 make_double1(double x) 
# 294
{ 
# 295
double1 t; (t.x) = x; return t; 
# 296
} 
# 298
static inline double2 make_double2(double x, double y) 
# 299
{ 
# 300
double2 t; (t.x) = x; (t.y) = y; return t; 
# 301
} 
# 303
static inline double3 make_double3(double x, double y, double z) 
# 304
{ 
# 305
double3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 306
} 
# 308
static inline double4 make_double4(double x, double y, double z, double w) 
# 309
{ 
# 310
double4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 311
} 
# 28 "/usr/include/string.h" 3
extern "C" {
# 43 "/usr/include/string.h" 3
extern __attribute((gnu_inline)) inline void *memcpy(void *__restrict__ __dest, const void *__restrict__ __src, size_t __n) throw()
# 44
 __attribute((__nonnull__(1, 2))); 
# 47
extern __attribute((gnu_inline)) inline void *memmove(void * __dest, const void * __src, size_t __n) throw()
# 48
 __attribute((__nonnull__(1, 2))); 
# 54
extern void *memccpy(void *__restrict__ __dest, const void *__restrict__ __src, int __c, size_t __n) throw()
# 56
 __attribute((__nonnull__(1, 2))); 
# 61
extern __attribute((gnu_inline)) inline void *memset(void * __s, int __c, size_t __n) throw() __attribute((__nonnull__(1))); 
# 64
extern int memcmp(const void * __s1, const void * __s2, size_t __n) throw()
# 65
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 69
extern "C++" {
# 71
extern __attribute((gnu_inline)) inline void *memchr(void * __s, int __c, size_t __n) throw() __asm__("memchr")
# 72
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 73
extern __attribute((gnu_inline)) inline const void *memchr(const void * __s, int __c, size_t __n) throw() __asm__("memchr")
# 74
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 77
__attribute((__always_inline__)) __attribute((__gnu_inline__)) extern inline void *
# 78
memchr(void *__s, int __c, size_t __n) throw() 
# 79
{ 
# 80
return __builtin_memchr(__s, __c, __n); 
# 81
} 
# 83
__attribute((__always_inline__)) __attribute((__gnu_inline__)) extern inline const void *
# 84
memchr(const void *__s, int __c, size_t __n) throw() 
# 85
{ 
# 86
return __builtin_memchr(__s, __c, __n); 
# 87
} 
# 89
}
# 99 "/usr/include/string.h" 3
extern "C++" void *rawmemchr(void * __s, int __c) throw() __asm__("rawmemchr")
# 100
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 101
extern "C++" const void *rawmemchr(const void * __s, int __c) throw() __asm__("rawmemchr")
# 102
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 110
extern "C++" void *memrchr(void * __s, int __c, size_t __n) throw() __asm__("memrchr")
# 111
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 112
extern "C++" const void *memrchr(const void * __s, int __c, size_t __n) throw() __asm__("memrchr")
# 113
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 122 "/usr/include/string.h" 3
extern __attribute((gnu_inline)) inline char *strcpy(char *__restrict__ __dest, const char *__restrict__ __src) throw()
# 123
 __attribute((__nonnull__(1, 2))); 
# 125
extern __attribute((gnu_inline)) inline char *strncpy(char *__restrict__ __dest, const char *__restrict__ __src, size_t __n) throw()
# 127
 __attribute((__nonnull__(1, 2))); 
# 130
extern __attribute((gnu_inline)) inline char *strcat(char *__restrict__ __dest, const char *__restrict__ __src) throw()
# 131
 __attribute((__nonnull__(1, 2))); 
# 133
extern __attribute((gnu_inline)) inline char *strncat(char *__restrict__ __dest, const char *__restrict__ __src, size_t __n) throw()
# 134
 __attribute((__nonnull__(1, 2))); 
# 137
extern int strcmp(const char * __s1, const char * __s2) throw()
# 138
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 140
extern int strncmp(const char * __s1, const char * __s2, size_t __n) throw()
# 141
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 144
extern int strcoll(const char * __s1, const char * __s2) throw()
# 145
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 147
extern size_t strxfrm(char *__restrict__ __dest, const char *__restrict__ __src, size_t __n) throw()
# 149
 __attribute((__nonnull__(2))); 
# 28 "/usr/include/aarch64-linux-gnu/bits/types/__locale_t.h" 3
struct __locale_struct { 
# 31
struct __locale_data *__locales[13]; 
# 34
const unsigned short *__ctype_b; 
# 35
const int *__ctype_tolower; 
# 36
const int *__ctype_toupper; 
# 39
const char *__names[13]; 
# 40
}; 
# 42
typedef __locale_struct *__locale_t; 
# 24 "/usr/include/aarch64-linux-gnu/bits/types/locale_t.h" 3
typedef __locale_t locale_t; 
# 156 "/usr/include/string.h" 3
extern int strcoll_l(const char * __s1, const char * __s2, locale_t __l) throw()
# 157
 __attribute((__pure__)) __attribute((__nonnull__(1, 2, 3))); 
# 160
extern size_t strxfrm_l(char * __dest, const char * __src, size_t __n, locale_t __l) throw()
# 161
 __attribute((__nonnull__(2, 4))); 
# 167
extern char *strdup(const char * __s) throw()
# 168
 __attribute((__malloc__)) __attribute((__nonnull__(1))); 
# 175
extern char *strndup(const char * __string, size_t __n) throw()
# 176
 __attribute((__malloc__)) __attribute((__nonnull__(1))); 
# 204 "/usr/include/string.h" 3
extern "C++" {
# 206
extern __attribute((gnu_inline)) inline char *strchr(char * __s, int __c) throw() __asm__("strchr")
# 207
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 208
extern __attribute((gnu_inline)) inline const char *strchr(const char * __s, int __c) throw() __asm__("strchr")
# 209
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 212
__attribute((__always_inline__)) __attribute((__gnu_inline__)) extern inline char *
# 213
strchr(char *__s, int __c) throw() 
# 214
{ 
# 215
return __builtin_strchr(__s, __c); 
# 216
} 
# 218
__attribute((__always_inline__)) __attribute((__gnu_inline__)) extern inline const char *
# 219
strchr(const char *__s, int __c) throw() 
# 220
{ 
# 221
return __builtin_strchr(__s, __c); 
# 222
} 
# 224
}
# 231
extern "C++" {
# 233
extern __attribute((gnu_inline)) inline char *strrchr(char * __s, int __c) throw() __asm__("strrchr")
# 234
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 235
extern __attribute((gnu_inline)) inline const char *strrchr(const char * __s, int __c) throw() __asm__("strrchr")
# 236
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 239
__attribute((__always_inline__)) __attribute((__gnu_inline__)) extern inline char *
# 240
strrchr(char *__s, int __c) throw() 
# 241
{ 
# 242
return __builtin_strrchr(__s, __c); 
# 243
} 
# 245
__attribute((__always_inline__)) __attribute((__gnu_inline__)) extern inline const char *
# 246
strrchr(const char *__s, int __c) throw() 
# 247
{ 
# 248
return __builtin_strrchr(__s, __c); 
# 249
} 
# 251
}
# 261 "/usr/include/string.h" 3
extern "C++" char *strchrnul(char * __s, int __c) throw() __asm__("strchrnul")
# 262
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 263
extern "C++" const char *strchrnul(const char * __s, int __c) throw() __asm__("strchrnul")
# 264
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 273 "/usr/include/string.h" 3
extern size_t strcspn(const char * __s, const char * __reject) throw()
# 274
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 277
extern size_t strspn(const char * __s, const char * __accept) throw()
# 278
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 281
extern "C++" {
# 283
extern __attribute((gnu_inline)) inline char *strpbrk(char * __s, const char * __accept) throw() __asm__("strpbrk")
# 284
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 285
extern __attribute((gnu_inline)) inline const char *strpbrk(const char * __s, const char * __accept) throw() __asm__("strpbrk")
# 286
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 289
__attribute((__always_inline__)) __attribute((__gnu_inline__)) extern inline char *
# 290
strpbrk(char *__s, const char *__accept) throw() 
# 291
{ 
# 292
return __builtin_strpbrk(__s, __accept); 
# 293
} 
# 295
__attribute((__always_inline__)) __attribute((__gnu_inline__)) extern inline const char *
# 296
strpbrk(const char *__s, const char *__accept) throw() 
# 297
{ 
# 298
return __builtin_strpbrk(__s, __accept); 
# 299
} 
# 301
}
# 308
extern "C++" {
# 310
extern __attribute((gnu_inline)) inline char *strstr(char * __haystack, const char * __needle) throw() __asm__("strstr")
# 311
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 312
extern __attribute((gnu_inline)) inline const char *strstr(const char * __haystack, const char * __needle) throw() __asm__("strstr")
# 313
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 316
__attribute((__always_inline__)) __attribute((__gnu_inline__)) extern inline char *
# 317
strstr(char *__haystack, const char *__needle) throw() 
# 318
{ 
# 319
return __builtin_strstr(__haystack, __needle); 
# 320
} 
# 322
__attribute((__always_inline__)) __attribute((__gnu_inline__)) extern inline const char *
# 323
strstr(const char *__haystack, const char *__needle) throw() 
# 324
{ 
# 325
return __builtin_strstr(__haystack, __needle); 
# 326
} 
# 328
}
# 336
extern char *strtok(char *__restrict__ __s, const char *__restrict__ __delim) throw()
# 337
 __attribute((__nonnull__(2))); 
# 341
extern char *__strtok_r(char *__restrict__ __s, const char *__restrict__ __delim, char **__restrict__ __save_ptr) throw()
# 344
 __attribute((__nonnull__(2, 3))); 
# 346
extern char *strtok_r(char *__restrict__ __s, const char *__restrict__ __delim, char **__restrict__ __save_ptr) throw()
# 348
 __attribute((__nonnull__(2, 3))); 
# 354
extern "C++" char *strcasestr(char * __haystack, const char * __needle) throw() __asm__("strcasestr")
# 355
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 356
extern "C++" const char *strcasestr(const char * __haystack, const char * __needle) throw() __asm__("strcasestr")
# 358
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 369 "/usr/include/string.h" 3
extern void *memmem(const void * __haystack, size_t __haystacklen, const void * __needle, size_t __needlelen) throw()
# 371
 __attribute((__pure__)) __attribute((__nonnull__(1, 3))); 
# 375
extern void *__mempcpy(void *__restrict__ __dest, const void *__restrict__ __src, size_t __n) throw()
# 377
 __attribute((__nonnull__(1, 2))); 
# 378
extern __attribute((gnu_inline)) inline void *mempcpy(void *__restrict__ __dest, const void *__restrict__ __src, size_t __n) throw()
# 380
 __attribute((__nonnull__(1, 2))); 
# 385
extern size_t strlen(const char * __s) throw()
# 386
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 391
extern size_t strnlen(const char * __string, size_t __maxlen) throw()
# 392
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 397
extern char *strerror(int __errnum) throw(); 
# 421 "/usr/include/string.h" 3
extern char *strerror_r(int __errnum, char * __buf, size_t __buflen) throw()
# 422
 __attribute((__nonnull__(2))) __attribute((__warn_unused_result__)); 
# 428
extern char *strerror_l(int __errnum, locale_t __l) throw(); 
# 30 "/usr/include/strings.h" 3
extern "C" {
# 34
extern int bcmp(const void * __s1, const void * __s2, size_t __n) throw()
# 35
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 38
extern __attribute((gnu_inline)) inline void bcopy(const void * __src, void * __dest, size_t __n) throw()
# 39
 __attribute((__nonnull__(1, 2))); 
# 42
extern __attribute((gnu_inline)) inline void bzero(void * __s, size_t __n) throw() __attribute((__nonnull__(1))); 
# 46
extern "C++" {
# 48
extern __attribute((gnu_inline)) inline char *index(char * __s, int __c) throw() __asm__("index")
# 49
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 50
extern __attribute((gnu_inline)) inline const char *index(const char * __s, int __c) throw() __asm__("index")
# 51
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 54
__attribute((__always_inline__)) __attribute((__gnu_inline__)) extern inline char *
# 55
index(char *__s, int __c) throw() 
# 56
{ 
# 57
return __builtin_index(__s, __c); 
# 58
} 
# 60
__attribute((__always_inline__)) __attribute((__gnu_inline__)) extern inline const char *
# 61
index(const char *__s, int __c) throw() 
# 62
{ 
# 63
return __builtin_index(__s, __c); 
# 64
} 
# 66
}
# 74
extern "C++" {
# 76
extern __attribute((gnu_inline)) inline char *rindex(char * __s, int __c) throw() __asm__("rindex")
# 77
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 78
extern __attribute((gnu_inline)) inline const char *rindex(const char * __s, int __c) throw() __asm__("rindex")
# 79
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 82
__attribute((__always_inline__)) __attribute((__gnu_inline__)) extern inline char *
# 83
rindex(char *__s, int __c) throw() 
# 84
{ 
# 85
return __builtin_rindex(__s, __c); 
# 86
} 
# 88
__attribute((__always_inline__)) __attribute((__gnu_inline__)) extern inline const char *
# 89
rindex(const char *__s, int __c) throw() 
# 90
{ 
# 91
return __builtin_rindex(__s, __c); 
# 92
} 
# 94
}
# 104 "/usr/include/strings.h" 3
extern int ffs(int __i) throw() __attribute((const)); 
# 110
extern int ffsl(long __l) throw() __attribute((const)); 
# 111
__extension__ extern int ffsll(long long __ll) throw()
# 112
 __attribute((const)); 
# 116
extern int strcasecmp(const char * __s1, const char * __s2) throw()
# 117
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 120
extern int strncasecmp(const char * __s1, const char * __s2, size_t __n) throw()
# 121
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 128
extern int strcasecmp_l(const char * __s1, const char * __s2, locale_t __loc) throw()
# 129
 __attribute((__pure__)) __attribute((__nonnull__(1, 2, 3))); 
# 133
extern int strncasecmp_l(const char * __s1, const char * __s2, size_t __n, locale_t __loc) throw()
# 135
 __attribute((__pure__)) __attribute((__nonnull__(1, 2, 4))); 
# 138
}
# 22 "/usr/include/aarch64-linux-gnu/bits/strings_fortified.h" 3
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline void 
# 23
 __attribute((__leaf__)) bcopy(const void *__src, void *__dest, size_t __len) throw() 
# 24
{ 
# 25
(void)__builtin___memmove_chk(__dest, __src, __len, __builtin_object_size(__dest, 0)); 
# 26
} 
# 28
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline void 
# 29
 __attribute((__leaf__)) bzero(void *__dest, size_t __len) throw() 
# 30
{ 
# 31
(void)__builtin___memset_chk(__dest, '\000', __len, __builtin_object_size(__dest, 0)); 
# 32
} 
# 436 "/usr/include/string.h" 3
extern __attribute((gnu_inline)) inline void explicit_bzero(void * __s, size_t __n) throw() __attribute((__nonnull__(1))); 
# 440
extern char *strsep(char **__restrict__ __stringp, const char *__restrict__ __delim) throw()
# 442
 __attribute((__nonnull__(1, 2))); 
# 447
extern char *strsignal(int __sig) throw(); 
# 450
extern char *__stpcpy(char *__restrict__ __dest, const char *__restrict__ __src) throw()
# 451
 __attribute((__nonnull__(1, 2))); 
# 452
extern __attribute((gnu_inline)) inline char *stpcpy(char *__restrict__ __dest, const char *__restrict__ __src) throw()
# 453
 __attribute((__nonnull__(1, 2))); 
# 457
extern char *__stpncpy(char *__restrict__ __dest, const char *__restrict__ __src, size_t __n) throw()
# 459
 __attribute((__nonnull__(1, 2))); 
# 460
extern __attribute((gnu_inline)) inline char *stpncpy(char *__restrict__ __dest, const char *__restrict__ __src, size_t __n) throw()
# 462
 __attribute((__nonnull__(1, 2))); 
# 467
extern int strverscmp(const char * __s1, const char * __s2) throw()
# 468
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 471
extern char *strfry(char * __string) throw() __attribute((__nonnull__(1))); 
# 474
extern void *memfrob(void * __s, size_t __n) throw() __attribute((__nonnull__(1))); 
# 482
extern "C++" char *basename(char * __filename) throw() __asm__("basename")
# 483
 __attribute((__nonnull__(1))); 
# 484
extern "C++" const char *basename(const char * __filename) throw() __asm__("basename")
# 485
 __attribute((__nonnull__(1))); 
# 30 "/usr/include/aarch64-linux-gnu/bits/string_fortified.h" 3
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) 
# 31
__attribute((__leaf__)) extern inline void *memcpy(void *__restrict__ __dest, const void *__restrict__ __src, size_t __len) throw() 
# 33
{ 
# 34
return __builtin___memcpy_chk(__dest, __src, __len, __builtin_object_size(__dest, 0)); 
# 35
} 
# 37
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) 
# 38
__attribute((__leaf__)) extern inline void *memmove(void *__dest, const void *__src, size_t __len) throw() 
# 39
{ 
# 40
return __builtin___memmove_chk(__dest, __src, __len, __builtin_object_size(__dest, 0)); 
# 41
} 
# 44
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) 
# 45
__attribute((__leaf__)) extern inline void *mempcpy(void *__restrict__ __dest, const void *__restrict__ __src, size_t __len) throw() 
# 47
{ 
# 48
return __builtin___mempcpy_chk(__dest, __src, __len, __builtin_object_size(__dest, 0)); 
# 49
} 
# 58 "/usr/include/aarch64-linux-gnu/bits/string_fortified.h" 3
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) 
# 59
__attribute((__leaf__)) extern inline void *memset(void *__dest, int __ch, size_t __len) throw() 
# 60
{ 
# 71 "/usr/include/aarch64-linux-gnu/bits/string_fortified.h" 3
return __builtin___memset_chk(__dest, __ch, __len, __builtin_object_size(__dest, 0)); 
# 72
} 
# 77
void __explicit_bzero_chk(void * __dest, size_t __len, size_t __destlen) throw()
# 78
 __attribute((__nonnull__(1))); 
# 80
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline void 
# 81
 __attribute((__leaf__)) explicit_bzero(void *__dest, size_t __len) throw() 
# 82
{ 
# 83
__explicit_bzero_chk(__dest, __len, __builtin_object_size(__dest, 0)); 
# 84
} 
# 87
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) 
# 88
__attribute((__leaf__)) extern inline char *strcpy(char *__restrict__ __dest, const char *__restrict__ __src) throw() 
# 89
{ 
# 90
return __builtin___strcpy_chk(__dest, __src, __builtin_object_size(__dest, 2 > 1)); 
# 91
} 
# 94
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) 
# 95
__attribute((__leaf__)) extern inline char *stpcpy(char *__restrict__ __dest, const char *__restrict__ __src) throw() 
# 96
{ 
# 97
return __builtin___stpcpy_chk(__dest, __src, __builtin_object_size(__dest, 2 > 1)); 
# 98
} 
# 102
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) 
# 103
__attribute((__leaf__)) extern inline char *strncpy(char *__restrict__ __dest, const char *__restrict__ __src, size_t __len) throw() 
# 105
{ 
# 106
return __builtin___strncpy_chk(__dest, __src, __len, __builtin_object_size(__dest, 2 > 1)); 
# 107
} 
# 110
extern char *__stpncpy_chk(char * __dest, const char * __src, size_t __n, size_t __destlen) throw(); 
# 112
extern char *__stpncpy_alias(char * __dest, const char * __src, size_t __n) throw() __asm__("stpncpy"); 
# 115
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) 
# 116
__attribute((__leaf__)) extern inline char *stpncpy(char *__dest, const char *__src, size_t __n) throw() 
# 117
{ 
# 118
if ((__builtin_object_size(__dest, 2 > 1) != ((size_t)(-1))) && ((!(0)) || (__n > __builtin_object_size(__dest, 2 > 1)))) { 
# 120
return __stpncpy_chk(__dest, __src, __n, __builtin_object_size(__dest, 2 > 1)); }  
# 121
return __stpncpy_alias(__dest, __src, __n); 
# 122
} 
# 125
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) 
# 126
__attribute((__leaf__)) extern inline char *strcat(char *__restrict__ __dest, const char *__restrict__ __src) throw() 
# 127
{ 
# 128
return __builtin___strcat_chk(__dest, __src, __builtin_object_size(__dest, 2 > 1)); 
# 129
} 
# 132
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) 
# 133
__attribute((__leaf__)) extern inline char *strncat(char *__restrict__ __dest, const char *__restrict__ __src, size_t __len) throw() 
# 135
{ 
# 136
return __builtin___strncat_chk(__dest, __src, __len, __builtin_object_size(__dest, 2 > 1)); 
# 137
} 
# 499 "/usr/include/string.h" 3
}
# 31 "/usr/include/aarch64-linux-gnu/bits/types.h" 3
typedef unsigned char __u_char; 
# 32
typedef unsigned short __u_short; 
# 33
typedef unsigned __u_int; 
# 34
typedef unsigned long __u_long; 
# 37
typedef signed char __int8_t; 
# 38
typedef unsigned char __uint8_t; 
# 39
typedef signed short __int16_t; 
# 40
typedef unsigned short __uint16_t; 
# 41
typedef signed int __int32_t; 
# 42
typedef unsigned __uint32_t; 
# 44
typedef signed long __int64_t; 
# 45
typedef unsigned long __uint64_t; 
# 52
typedef __int8_t __int_least8_t; 
# 53
typedef __uint8_t __uint_least8_t; 
# 54
typedef __int16_t __int_least16_t; 
# 55
typedef __uint16_t __uint_least16_t; 
# 56
typedef __int32_t __int_least32_t; 
# 57
typedef __uint32_t __uint_least32_t; 
# 58
typedef __int64_t __int_least64_t; 
# 59
typedef __uint64_t __uint_least64_t; 
# 63
typedef long __quad_t; 
# 64
typedef unsigned long __u_quad_t; 
# 72
typedef long __intmax_t; 
# 73
typedef unsigned long __uintmax_t; 
# 145 "/usr/include/aarch64-linux-gnu/bits/types.h" 3
typedef unsigned long __dev_t; 
# 146
typedef unsigned __uid_t; 
# 147
typedef unsigned __gid_t; 
# 148
typedef unsigned long __ino_t; 
# 149
typedef unsigned long __ino64_t; 
# 150
typedef unsigned __mode_t; 
# 151
typedef unsigned __nlink_t; 
# 152
typedef long __off_t; 
# 153
typedef long __off64_t; 
# 154
typedef int __pid_t; 
# 155
typedef struct { int __val[2]; } __fsid_t; 
# 156
typedef long __clock_t; 
# 157
typedef unsigned long __rlim_t; 
# 158
typedef unsigned long __rlim64_t; 
# 159
typedef unsigned __id_t; 
# 160
typedef long __time_t; 
# 161
typedef unsigned __useconds_t; 
# 162
typedef long __suseconds_t; 
# 164
typedef int __daddr_t; 
# 165
typedef int __key_t; 
# 168
typedef int __clockid_t; 
# 171
typedef void *__timer_t; 
# 174
typedef int __blksize_t; 
# 179
typedef long __blkcnt_t; 
# 180
typedef long __blkcnt64_t; 
# 183
typedef unsigned long __fsblkcnt_t; 
# 184
typedef unsigned long __fsblkcnt64_t; 
# 187
typedef unsigned long __fsfilcnt_t; 
# 188
typedef unsigned long __fsfilcnt64_t; 
# 191
typedef long __fsword_t; 
# 193
typedef long __ssize_t; 
# 196
typedef long __syscall_slong_t; 
# 198
typedef unsigned long __syscall_ulong_t; 
# 202
typedef __off64_t __loff_t; 
# 203
typedef char *__caddr_t; 
# 206
typedef long __intptr_t; 
# 209
typedef unsigned __socklen_t; 
# 214
typedef int __sig_atomic_t; 
# 8 "/usr/include/aarch64-linux-gnu/bits/types/struct_timeval.h" 3
struct timeval { 
# 10
__time_t tv_sec; 
# 11
__suseconds_t tv_usec; 
# 12
}; 
# 26 "/usr/include/aarch64-linux-gnu/bits/timex.h" 3
struct timex { 
# 28
unsigned modes; 
# 29
__syscall_slong_t offset; 
# 30
__syscall_slong_t freq; 
# 31
__syscall_slong_t maxerror; 
# 32
__syscall_slong_t esterror; 
# 33
int status; 
# 34
__syscall_slong_t constant; 
# 35
__syscall_slong_t precision; 
# 36
__syscall_slong_t tolerance; 
# 37
timeval time; 
# 38
__syscall_slong_t tick; 
# 39
__syscall_slong_t ppsfreq; 
# 40
__syscall_slong_t jitter; 
# 41
int shift; 
# 42
__syscall_slong_t stabil; 
# 43
__syscall_slong_t jitcnt; 
# 44
__syscall_slong_t calcnt; 
# 45
__syscall_slong_t errcnt; 
# 46
__syscall_slong_t stbcnt; 
# 48
int tai; 
# 51
int:32; int:32; int:32; int:32; 
# 52
int:32; int:32; int:32; int:32; 
# 53
int:32; int:32; int:32; 
# 54
}; 
# 75 "/usr/include/aarch64-linux-gnu/bits/time.h" 3
extern "C" {
# 78
extern int clock_adjtime(__clockid_t __clock_id, timex * __utx) throw(); 
# 80
}
# 7 "/usr/include/aarch64-linux-gnu/bits/types/clock_t.h" 3
typedef __clock_t clock_t; 
# 7 "/usr/include/aarch64-linux-gnu/bits/types/time_t.h" 3
typedef __time_t time_t; 
# 7 "/usr/include/aarch64-linux-gnu/bits/types/struct_tm.h" 3
struct tm { 
# 9
int tm_sec; 
# 10
int tm_min; 
# 11
int tm_hour; 
# 12
int tm_mday; 
# 13
int tm_mon; 
# 14
int tm_year; 
# 15
int tm_wday; 
# 16
int tm_yday; 
# 17
int tm_isdst; 
# 20
long tm_gmtoff; 
# 21
const char *tm_zone; 
# 26
}; 
# 10 "/usr/include/aarch64-linux-gnu/bits/types/struct_timespec.h" 3
struct timespec { 
# 12
__time_t tv_sec; 
# 16
__syscall_slong_t tv_nsec; 
# 26 "/usr/include/aarch64-linux-gnu/bits/types/struct_timespec.h" 3
}; 
# 7 "/usr/include/aarch64-linux-gnu/bits/types/clockid_t.h" 3
typedef __clockid_t clockid_t; 
# 7 "/usr/include/aarch64-linux-gnu/bits/types/timer_t.h" 3
typedef __timer_t timer_t; 
# 8 "/usr/include/aarch64-linux-gnu/bits/types/struct_itimerspec.h" 3
struct itimerspec { 
# 10
timespec it_interval; 
# 11
timespec it_value; 
# 12
}; 
# 49 "/usr/include/time.h" 3
struct sigevent; 
# 54
typedef __pid_t pid_t; 
# 68 "/usr/include/time.h" 3
extern "C" {
# 72
extern clock_t clock() throw(); 
# 75
extern time_t time(time_t * __timer) throw(); 
# 78
extern double difftime(time_t __time1, time_t __time0) throw()
# 79
 __attribute((const)); 
# 82
extern time_t mktime(tm * __tp) throw(); 
# 88
extern size_t strftime(char *__restrict__ __s, size_t __maxsize, const char *__restrict__ __format, const tm *__restrict__ __tp) throw(); 
# 95
extern char *strptime(const char *__restrict__ __s, const char *__restrict__ __fmt, tm * __tp) throw(); 
# 104
extern size_t strftime_l(char *__restrict__ __s, size_t __maxsize, const char *__restrict__ __format, const tm *__restrict__ __tp, locale_t __loc) throw(); 
# 111
extern char *strptime_l(const char *__restrict__ __s, const char *__restrict__ __fmt, tm * __tp, locale_t __loc) throw(); 
# 119
extern tm *gmtime(const time_t * __timer) throw(); 
# 123
extern tm *localtime(const time_t * __timer) throw(); 
# 128
extern tm *gmtime_r(const time_t *__restrict__ __timer, tm *__restrict__ __tp) throw(); 
# 133
extern tm *localtime_r(const time_t *__restrict__ __timer, tm *__restrict__ __tp) throw(); 
# 139
extern char *asctime(const tm * __tp) throw(); 
# 142
extern char *ctime(const time_t * __timer) throw(); 
# 149
extern char *asctime_r(const tm *__restrict__ __tp, char *__restrict__ __buf) throw(); 
# 153
extern char *ctime_r(const time_t *__restrict__ __timer, char *__restrict__ __buf) throw(); 
# 159
extern char *__tzname[2]; 
# 160
extern int __daylight; 
# 161
extern long __timezone; 
# 166
extern char *tzname[2]; 
# 170
extern void tzset() throw(); 
# 174
extern int daylight; 
# 175
extern long timezone; 
# 190 "/usr/include/time.h" 3
extern time_t timegm(tm * __tp) throw(); 
# 193
extern time_t timelocal(tm * __tp) throw(); 
# 196
extern int dysize(int __year) throw() __attribute((const)); 
# 205 "/usr/include/time.h" 3
extern int nanosleep(const timespec * __requested_time, timespec * __remaining); 
# 210
extern int clock_getres(clockid_t __clock_id, timespec * __res) throw(); 
# 213
extern int clock_gettime(clockid_t __clock_id, timespec * __tp) throw(); 
# 216
extern int clock_settime(clockid_t __clock_id, const timespec * __tp) throw(); 
# 224
extern int clock_nanosleep(clockid_t __clock_id, int __flags, const timespec * __req, timespec * __rem); 
# 229
extern int clock_getcpuclockid(pid_t __pid, clockid_t * __clock_id) throw(); 
# 234
extern int timer_create(clockid_t __clock_id, sigevent *__restrict__ __evp, timer_t *__restrict__ __timerid) throw(); 
# 239
extern int timer_delete(timer_t __timerid) throw(); 
# 242
extern int timer_settime(timer_t __timerid, int __flags, const itimerspec *__restrict__ __value, itimerspec *__restrict__ __ovalue) throw(); 
# 247
extern int timer_gettime(timer_t __timerid, itimerspec * __value) throw(); 
# 251
extern int timer_getoverrun(timer_t __timerid) throw(); 
# 257
extern int timespec_get(timespec * __ts, int __base) throw()
# 258
 __attribute((__nonnull__(1))); 
# 274 "/usr/include/time.h" 3
extern int getdate_err; 
# 283 "/usr/include/time.h" 3
extern tm *getdate(const char * __string); 
# 297 "/usr/include/time.h" 3
extern int getdate_r(const char *__restrict__ __string, tm *__restrict__ __resbufp); 
# 301
}
# 88 "/usr/local/cuda/include/crt/common_functions.h"
extern "C" {
# 91
extern clock_t clock() throw(); 
# 96 "/usr/local/cuda/include/crt/common_functions.h"
extern void *memset(void *, int, size_t) throw(); 
# 97 "/usr/local/cuda/include/crt/common_functions.h"
extern void *memcpy(void *, const void *, size_t) throw(); 
# 99 "/usr/local/cuda/include/crt/common_functions.h"
}
# 121 "/usr/local/cuda/include/crt/math_functions.h"
extern "C" {
# 219 "/usr/local/cuda/include/crt/math_functions.h"
extern int abs(int a) throw(); 
# 227 "/usr/local/cuda/include/crt/math_functions.h"
extern long labs(long a) throw(); 
# 235 "/usr/local/cuda/include/crt/math_functions.h"
extern long long llabs(long long a) throw(); 
# 285 "/usr/local/cuda/include/crt/math_functions.h"
extern double fabs(double x) throw(); 
# 328 "/usr/local/cuda/include/crt/math_functions.h"
extern float fabsf(float x) throw(); 
# 338 "/usr/local/cuda/include/crt/math_functions.h"
extern inline int min(const int a, const int b); 
# 345
extern inline unsigned umin(const unsigned a, const unsigned b); 
# 352
extern inline long long llmin(const long long a, const long long b); 
# 359
extern inline unsigned long long ullmin(const unsigned long long a, const unsigned long long b); 
# 380 "/usr/local/cuda/include/crt/math_functions.h"
extern float fminf(float x, float y) throw(); 
# 400 "/usr/local/cuda/include/crt/math_functions.h"
extern double fmin(double x, double y) throw(); 
# 413 "/usr/local/cuda/include/crt/math_functions.h"
extern inline int max(const int a, const int b); 
# 421
extern inline unsigned umax(const unsigned a, const unsigned b); 
# 428
extern inline long long llmax(const long long a, const long long b); 
# 435
extern inline unsigned long long ullmax(const unsigned long long a, const unsigned long long b); 
# 456 "/usr/local/cuda/include/crt/math_functions.h"
extern float fmaxf(float x, float y) throw(); 
# 476 "/usr/local/cuda/include/crt/math_functions.h"
extern double fmax(double, double) throw(); 
# 520 "/usr/local/cuda/include/crt/math_functions.h"
extern double sin(double x) throw(); 
# 553 "/usr/local/cuda/include/crt/math_functions.h"
extern double cos(double x) throw(); 
# 572 "/usr/local/cuda/include/crt/math_functions.h"
extern void sincos(double x, double * sptr, double * cptr) throw(); 
# 588 "/usr/local/cuda/include/crt/math_functions.h"
extern void sincosf(float x, float * sptr, float * cptr) throw(); 
# 633 "/usr/local/cuda/include/crt/math_functions.h"
extern double tan(double x) throw(); 
# 702 "/usr/local/cuda/include/crt/math_functions.h"
extern double sqrt(double x) throw(); 
# 774 "/usr/local/cuda/include/crt/math_functions.h"
extern double rsqrt(double x); 
# 844 "/usr/local/cuda/include/crt/math_functions.h"
extern float rsqrtf(float x); 
# 900 "/usr/local/cuda/include/crt/math_functions.h"
extern double log2(double x) throw(); 
# 965 "/usr/local/cuda/include/crt/math_functions.h"
extern double exp2(double x) throw(); 
# 1030 "/usr/local/cuda/include/crt/math_functions.h"
extern float exp2f(float x) throw(); 
# 1097 "/usr/local/cuda/include/crt/math_functions.h"
extern double exp10(double x) throw(); 
# 1160 "/usr/local/cuda/include/crt/math_functions.h"
extern float exp10f(float x) throw(); 
# 1253 "/usr/local/cuda/include/crt/math_functions.h"
extern double expm1(double x) throw(); 
# 1345 "/usr/local/cuda/include/crt/math_functions.h"
extern float expm1f(float x) throw(); 
# 1401 "/usr/local/cuda/include/crt/math_functions.h"
extern float log2f(float x) throw(); 
# 1455 "/usr/local/cuda/include/crt/math_functions.h"
extern double log10(double x) throw(); 
# 1525 "/usr/local/cuda/include/crt/math_functions.h"
extern double log(double x) throw(); 
# 1621 "/usr/local/cuda/include/crt/math_functions.h"
extern double log1p(double x) throw(); 
# 1720 "/usr/local/cuda/include/crt/math_functions.h"
extern float log1pf(float x) throw(); 
# 1784 "/usr/local/cuda/include/crt/math_functions.h"
extern double floor(double x) throw(); 
# 1863 "/usr/local/cuda/include/crt/math_functions.h"
extern double exp(double x) throw(); 
# 1904 "/usr/local/cuda/include/crt/math_functions.h"
extern double cosh(double x) throw(); 
# 1954 "/usr/local/cuda/include/crt/math_functions.h"
extern double sinh(double x) throw(); 
# 2004 "/usr/local/cuda/include/crt/math_functions.h"
extern double tanh(double x) throw(); 
# 2059 "/usr/local/cuda/include/crt/math_functions.h"
extern double acosh(double x) throw(); 
# 2117 "/usr/local/cuda/include/crt/math_functions.h"
extern float acoshf(float x) throw(); 
# 2170 "/usr/local/cuda/include/crt/math_functions.h"
extern double asinh(double x) throw(); 
# 2223 "/usr/local/cuda/include/crt/math_functions.h"
extern float asinhf(float x) throw(); 
# 2277 "/usr/local/cuda/include/crt/math_functions.h"
extern double atanh(double x) throw(); 
# 2331 "/usr/local/cuda/include/crt/math_functions.h"
extern float atanhf(float x) throw(); 
# 2380 "/usr/local/cuda/include/crt/math_functions.h"
extern double ldexp(double x, int exp) throw(); 
# 2426 "/usr/local/cuda/include/crt/math_functions.h"
extern float ldexpf(float x, int exp) throw(); 
# 2478 "/usr/local/cuda/include/crt/math_functions.h"
extern double logb(double x) throw(); 
# 2533 "/usr/local/cuda/include/crt/math_functions.h"
extern float logbf(float x) throw(); 
# 2573 "/usr/local/cuda/include/crt/math_functions.h"
extern int ilogb(double x) throw(); 
# 2613 "/usr/local/cuda/include/crt/math_functions.h"
extern int ilogbf(float x) throw(); 
# 2689 "/usr/local/cuda/include/crt/math_functions.h"
extern double scalbn(double x, int n) throw(); 
# 2765 "/usr/local/cuda/include/crt/math_functions.h"
extern float scalbnf(float x, int n) throw(); 
# 2841 "/usr/local/cuda/include/crt/math_functions.h"
extern double scalbln(double x, long n) throw(); 
# 2917 "/usr/local/cuda/include/crt/math_functions.h"
extern float scalblnf(float x, long n) throw(); 
# 2994 "/usr/local/cuda/include/crt/math_functions.h"
extern double frexp(double x, int * nptr) throw(); 
# 3068 "/usr/local/cuda/include/crt/math_functions.h"
extern float frexpf(float x, int * nptr) throw(); 
# 3120 "/usr/local/cuda/include/crt/math_functions.h"
extern double round(double x) throw(); 
# 3175 "/usr/local/cuda/include/crt/math_functions.h"
extern float roundf(float x) throw(); 
# 3193 "/usr/local/cuda/include/crt/math_functions.h"
extern long lround(double x) throw(); 
# 3211 "/usr/local/cuda/include/crt/math_functions.h"
extern long lroundf(float x) throw(); 
# 3229 "/usr/local/cuda/include/crt/math_functions.h"
extern long long llround(double x) throw(); 
# 3247 "/usr/local/cuda/include/crt/math_functions.h"
extern long long llroundf(float x) throw(); 
# 3375 "/usr/local/cuda/include/crt/math_functions.h"
extern float rintf(float x) throw(); 
# 3392 "/usr/local/cuda/include/crt/math_functions.h"
extern long lrint(double x) throw(); 
# 3409 "/usr/local/cuda/include/crt/math_functions.h"
extern long lrintf(float x) throw(); 
# 3426 "/usr/local/cuda/include/crt/math_functions.h"
extern long long llrint(double x) throw(); 
# 3443 "/usr/local/cuda/include/crt/math_functions.h"
extern long long llrintf(float x) throw(); 
# 3496 "/usr/local/cuda/include/crt/math_functions.h"
extern double nearbyint(double x) throw(); 
# 3549 "/usr/local/cuda/include/crt/math_functions.h"
extern float nearbyintf(float x) throw(); 
# 3611 "/usr/local/cuda/include/crt/math_functions.h"
extern double ceil(double x) throw(); 
# 3661 "/usr/local/cuda/include/crt/math_functions.h"
extern double trunc(double x) throw(); 
# 3714 "/usr/local/cuda/include/crt/math_functions.h"
extern float truncf(float x) throw(); 
# 3740 "/usr/local/cuda/include/crt/math_functions.h"
extern double fdim(double x, double y) throw(); 
# 3766 "/usr/local/cuda/include/crt/math_functions.h"
extern float fdimf(float x, float y) throw(); 
# 4066 "/usr/local/cuda/include/crt/math_functions.h"
extern double atan2(double y, double x) throw(); 
# 4137 "/usr/local/cuda/include/crt/math_functions.h"
extern double atan(double x) throw(); 
# 4160 "/usr/local/cuda/include/crt/math_functions.h"
extern double acos(double x) throw(); 
# 4211 "/usr/local/cuda/include/crt/math_functions.h"
extern double asin(double x) throw(); 
# 4279 "/usr/local/cuda/include/crt/math_functions.h"
extern double hypot(double x, double y) throw(); 
# 4402 "/usr/local/cuda/include/crt/math_functions.h"
extern float hypotf(float x, float y) throw(); 
# 5188 "/usr/local/cuda/include/crt/math_functions.h"
extern double cbrt(double x) throw(); 
# 5274 "/usr/local/cuda/include/crt/math_functions.h"
extern float cbrtf(float x) throw(); 
# 5329 "/usr/local/cuda/include/crt/math_functions.h"
extern double rcbrt(double x); 
# 5379 "/usr/local/cuda/include/crt/math_functions.h"
extern float rcbrtf(float x); 
# 5439 "/usr/local/cuda/include/crt/math_functions.h"
extern double sinpi(double x); 
# 5499 "/usr/local/cuda/include/crt/math_functions.h"
extern float sinpif(float x); 
# 5551 "/usr/local/cuda/include/crt/math_functions.h"
extern double cospi(double x); 
# 5603 "/usr/local/cuda/include/crt/math_functions.h"
extern float cospif(float x); 
# 5633 "/usr/local/cuda/include/crt/math_functions.h"
extern void sincospi(double x, double * sptr, double * cptr); 
# 5663 "/usr/local/cuda/include/crt/math_functions.h"
extern void sincospif(float x, float * sptr, float * cptr); 
# 5996 "/usr/local/cuda/include/crt/math_functions.h"
extern double pow(double x, double y) throw(); 
# 6052 "/usr/local/cuda/include/crt/math_functions.h"
extern double modf(double x, double * iptr) throw(); 
# 6111 "/usr/local/cuda/include/crt/math_functions.h"
extern double fmod(double x, double y) throw(); 
# 6207 "/usr/local/cuda/include/crt/math_functions.h"
extern double remainder(double x, double y) throw(); 
# 6306 "/usr/local/cuda/include/crt/math_functions.h"
extern float remainderf(float x, float y) throw(); 
# 6378 "/usr/local/cuda/include/crt/math_functions.h"
extern double remquo(double x, double y, int * quo) throw(); 
# 6450 "/usr/local/cuda/include/crt/math_functions.h"
extern float remquof(float x, float y, int * quo) throw(); 
# 6491 "/usr/local/cuda/include/crt/math_functions.h"
extern double j0(double x) throw(); 
# 6533 "/usr/local/cuda/include/crt/math_functions.h"
extern float j0f(float x) throw(); 
# 6602 "/usr/local/cuda/include/crt/math_functions.h"
extern double j1(double x) throw(); 
# 6671 "/usr/local/cuda/include/crt/math_functions.h"
extern float j1f(float x) throw(); 
# 6714 "/usr/local/cuda/include/crt/math_functions.h"
extern double jn(int n, double x) throw(); 
# 6757 "/usr/local/cuda/include/crt/math_functions.h"
extern float jnf(int n, float x) throw(); 
# 6818 "/usr/local/cuda/include/crt/math_functions.h"
extern double y0(double x) throw(); 
# 6879 "/usr/local/cuda/include/crt/math_functions.h"
extern float y0f(float x) throw(); 
# 6940 "/usr/local/cuda/include/crt/math_functions.h"
extern double y1(double x) throw(); 
# 7001 "/usr/local/cuda/include/crt/math_functions.h"
extern float y1f(float x) throw(); 
# 7064 "/usr/local/cuda/include/crt/math_functions.h"
extern double yn(int n, double x) throw(); 
# 7127 "/usr/local/cuda/include/crt/math_functions.h"
extern float ynf(int n, float x) throw(); 
# 7316 "/usr/local/cuda/include/crt/math_functions.h"
extern double erf(double x) throw(); 
# 7398 "/usr/local/cuda/include/crt/math_functions.h"
extern float erff(float x) throw(); 
# 7470 "/usr/local/cuda/include/crt/math_functions.h"
extern double erfinv(double x); 
# 7535 "/usr/local/cuda/include/crt/math_functions.h"
extern float erfinvf(float x); 
# 7574 "/usr/local/cuda/include/crt/math_functions.h"
extern double erfc(double x) throw(); 
# 7612 "/usr/local/cuda/include/crt/math_functions.h"
extern float erfcf(float x) throw(); 
# 7729 "/usr/local/cuda/include/crt/math_functions.h"
extern double lgamma(double x) throw(); 
# 7791 "/usr/local/cuda/include/crt/math_functions.h"
extern double erfcinv(double x); 
# 7846 "/usr/local/cuda/include/crt/math_functions.h"
extern float erfcinvf(float x); 
# 7914 "/usr/local/cuda/include/crt/math_functions.h"
extern double normcdfinv(double x); 
# 7982 "/usr/local/cuda/include/crt/math_functions.h"
extern float normcdfinvf(float x); 
# 8025 "/usr/local/cuda/include/crt/math_functions.h"
extern double normcdf(double x); 
# 8068 "/usr/local/cuda/include/crt/math_functions.h"
extern float normcdff(float x); 
# 8132 "/usr/local/cuda/include/crt/math_functions.h"
extern double erfcx(double x); 
# 8196 "/usr/local/cuda/include/crt/math_functions.h"
extern float erfcxf(float x); 
# 8315 "/usr/local/cuda/include/crt/math_functions.h"
extern float lgammaf(float x) throw(); 
# 8413 "/usr/local/cuda/include/crt/math_functions.h"
extern double tgamma(double x) throw(); 
# 8511 "/usr/local/cuda/include/crt/math_functions.h"
extern float tgammaf(float x) throw(); 
# 8524 "/usr/local/cuda/include/crt/math_functions.h"
extern double copysign(double x, double y) throw(); 
# 8537 "/usr/local/cuda/include/crt/math_functions.h"
extern float copysignf(float x, float y) throw(); 
# 8556 "/usr/local/cuda/include/crt/math_functions.h"
extern double nextafter(double x, double y) throw(); 
# 8575 "/usr/local/cuda/include/crt/math_functions.h"
extern float nextafterf(float x, float y) throw(); 
# 8591 "/usr/local/cuda/include/crt/math_functions.h"
extern double nan(const char * tagp) throw(); 
# 8607 "/usr/local/cuda/include/crt/math_functions.h"
extern float nanf(const char * tagp) throw(); 
# 8614 "/usr/local/cuda/include/crt/math_functions.h"
extern int __isinff(float) throw(); 
# 8615 "/usr/local/cuda/include/crt/math_functions.h"
extern int __isnanf(float) throw(); 
# 8625 "/usr/local/cuda/include/crt/math_functions.h"
extern int __finite(double) throw(); 
# 8626 "/usr/local/cuda/include/crt/math_functions.h"
extern int __finitef(float) throw(); 
# 8627 "/usr/local/cuda/include/crt/math_functions.h"
extern int __signbit(double) throw(); 
# 8628 "/usr/local/cuda/include/crt/math_functions.h"
extern int __isnan(double) throw(); 
# 8629 "/usr/local/cuda/include/crt/math_functions.h"
extern int __isinf(double) throw(); 
# 8632 "/usr/local/cuda/include/crt/math_functions.h"
extern int __signbitf(float) throw(); 
# 8791 "/usr/local/cuda/include/crt/math_functions.h"
extern double fma(double x, double y, double z) throw(); 
# 8949 "/usr/local/cuda/include/crt/math_functions.h"
extern float fmaf(float x, float y, float z) throw(); 
# 8960 "/usr/local/cuda/include/crt/math_functions.h"
extern int __signbitl(long double) throw(); 
# 8966 "/usr/local/cuda/include/crt/math_functions.h"
extern int __finitel(long double) throw(); 
# 8967 "/usr/local/cuda/include/crt/math_functions.h"
extern int __isinfl(long double) throw(); 
# 8968 "/usr/local/cuda/include/crt/math_functions.h"
extern int __isnanl(long double) throw(); 
# 9018 "/usr/local/cuda/include/crt/math_functions.h"
extern float acosf(float x) throw(); 
# 9077 "/usr/local/cuda/include/crt/math_functions.h"
extern float asinf(float x) throw(); 
# 9157 "/usr/local/cuda/include/crt/math_functions.h"
extern float atanf(float x) throw(); 
# 9454 "/usr/local/cuda/include/crt/math_functions.h"
extern float atan2f(float y, float x) throw(); 
# 9488 "/usr/local/cuda/include/crt/math_functions.h"
extern float cosf(float x) throw(); 
# 9530 "/usr/local/cuda/include/crt/math_functions.h"
extern float sinf(float x) throw(); 
# 9572 "/usr/local/cuda/include/crt/math_functions.h"
extern float tanf(float x) throw(); 
# 9613 "/usr/local/cuda/include/crt/math_functions.h"
extern float coshf(float x) throw(); 
# 9663 "/usr/local/cuda/include/crt/math_functions.h"
extern float sinhf(float x) throw(); 
# 9713 "/usr/local/cuda/include/crt/math_functions.h"
extern float tanhf(float x) throw(); 
# 9765 "/usr/local/cuda/include/crt/math_functions.h"
extern float logf(float x) throw(); 
# 9845 "/usr/local/cuda/include/crt/math_functions.h"
extern float expf(float x) throw(); 
# 9897 "/usr/local/cuda/include/crt/math_functions.h"
extern float log10f(float x) throw(); 
# 9952 "/usr/local/cuda/include/crt/math_functions.h"
extern float modff(float x, float * iptr) throw(); 
# 10282 "/usr/local/cuda/include/crt/math_functions.h"
extern float powf(float x, float y) throw(); 
# 10351 "/usr/local/cuda/include/crt/math_functions.h"
extern float sqrtf(float x) throw(); 
# 10410 "/usr/local/cuda/include/crt/math_functions.h"
extern float ceilf(float x) throw(); 
# 10471 "/usr/local/cuda/include/crt/math_functions.h"
extern float floorf(float x) throw(); 
# 10529 "/usr/local/cuda/include/crt/math_functions.h"
extern float fmodf(float x, float y) throw(); 
# 10544 "/usr/local/cuda/include/crt/math_functions.h"
}
# 256 "/usr/include/aarch64-linux-gnu/c++/9/bits/c++config.h" 3
namespace std { 
# 258
typedef unsigned long size_t; 
# 259
typedef long ptrdiff_t; 
# 262
typedef __decltype((nullptr)) nullptr_t; 
# 264
}
# 278 "/usr/include/aarch64-linux-gnu/c++/9/bits/c++config.h" 3
namespace std { 
# 280
inline namespace __cxx11 __attribute((__abi_tag__("cxx11"))) { }
# 281
}
# 282
namespace __gnu_cxx { 
# 284
inline namespace __cxx11 __attribute((__abi_tag__("cxx11"))) { }
# 285
}
# 67 "/usr/include/c++/9/bits/cpp_type_traits.h" 3
extern "C++" {
# 69
namespace std __attribute((__visibility__("default"))) { 
# 73
struct __true_type { }; 
# 74
struct __false_type { }; 
# 76
template< bool > 
# 77
struct __truth_type { 
# 78
typedef __false_type __type; }; 
# 81
template<> struct __truth_type< true>  { 
# 82
typedef __true_type __type; }; 
# 86
template< class _Sp, class _Tp> 
# 87
struct __traitor { 
# 89
enum { __value = ((bool)_Sp::__value) || ((bool)_Tp::__value)}; 
# 90
typedef typename __truth_type< __value> ::__type __type; 
# 91
}; 
# 94
template< class , class > 
# 95
struct __are_same { 
# 97
enum { __value}; 
# 98
typedef __false_type __type; 
# 99
}; 
# 101
template< class _Tp> 
# 102
struct __are_same< _Tp, _Tp>  { 
# 104
enum { __value = 1}; 
# 105
typedef __true_type __type; 
# 106
}; 
# 109
template< class _Tp> 
# 110
struct __is_void { 
# 112
enum { __value}; 
# 113
typedef __false_type __type; 
# 114
}; 
# 117
template<> struct __is_void< void>  { 
# 119
enum { __value = 1}; 
# 120
typedef __true_type __type; 
# 121
}; 
# 126
template< class _Tp> 
# 127
struct __is_integer { 
# 129
enum { __value}; 
# 130
typedef __false_type __type; 
# 131
}; 
# 138
template<> struct __is_integer< bool>  { 
# 140
enum { __value = 1}; 
# 141
typedef __true_type __type; 
# 142
}; 
# 145
template<> struct __is_integer< char>  { 
# 147
enum { __value = 1}; 
# 148
typedef __true_type __type; 
# 149
}; 
# 152
template<> struct __is_integer< signed char>  { 
# 154
enum { __value = 1}; 
# 155
typedef __true_type __type; 
# 156
}; 
# 159
template<> struct __is_integer< unsigned char>  { 
# 161
enum { __value = 1}; 
# 162
typedef __true_type __type; 
# 163
}; 
# 167
template<> struct __is_integer< wchar_t>  { 
# 169
enum { __value = 1}; 
# 170
typedef __true_type __type; 
# 171
}; 
# 185 "/usr/include/c++/9/bits/cpp_type_traits.h" 3
template<> struct __is_integer< char16_t>  { 
# 187
enum { __value = 1}; 
# 188
typedef __true_type __type; 
# 189
}; 
# 192
template<> struct __is_integer< char32_t>  { 
# 194
enum { __value = 1}; 
# 195
typedef __true_type __type; 
# 196
}; 
# 200
template<> struct __is_integer< short>  { 
# 202
enum { __value = 1}; 
# 203
typedef __true_type __type; 
# 204
}; 
# 207
template<> struct __is_integer< unsigned short>  { 
# 209
enum { __value = 1}; 
# 210
typedef __true_type __type; 
# 211
}; 
# 214
template<> struct __is_integer< int>  { 
# 216
enum { __value = 1}; 
# 217
typedef __true_type __type; 
# 218
}; 
# 221
template<> struct __is_integer< unsigned>  { 
# 223
enum { __value = 1}; 
# 224
typedef __true_type __type; 
# 225
}; 
# 228
template<> struct __is_integer< long>  { 
# 230
enum { __value = 1}; 
# 231
typedef __true_type __type; 
# 232
}; 
# 235
template<> struct __is_integer< unsigned long>  { 
# 237
enum { __value = 1}; 
# 238
typedef __true_type __type; 
# 239
}; 
# 242
template<> struct __is_integer< long long>  { 
# 244
enum { __value = 1}; 
# 245
typedef __true_type __type; 
# 246
}; 
# 249
template<> struct __is_integer< unsigned long long>  { 
# 251
enum { __value = 1}; 
# 252
typedef __true_type __type; 
# 253
}; 
# 270 "/usr/include/c++/9/bits/cpp_type_traits.h" 3
template<> struct __is_integer< __int128>  { enum { __value = 1}; typedef __true_type __type; }; template<> struct __is_integer< unsigned __int128>  { enum { __value = 1}; typedef __true_type __type; }; 
# 287 "/usr/include/c++/9/bits/cpp_type_traits.h" 3
template< class _Tp> 
# 288
struct __is_floating { 
# 290
enum { __value}; 
# 291
typedef __false_type __type; 
# 292
}; 
# 296
template<> struct __is_floating< float>  { 
# 298
enum { __value = 1}; 
# 299
typedef __true_type __type; 
# 300
}; 
# 303
template<> struct __is_floating< double>  { 
# 305
enum { __value = 1}; 
# 306
typedef __true_type __type; 
# 307
}; 
# 310
template<> struct __is_floating< long double>  { 
# 312
enum { __value = 1}; 
# 313
typedef __true_type __type; 
# 314
}; 
# 319
template< class _Tp> 
# 320
struct __is_pointer { 
# 322
enum { __value}; 
# 323
typedef __false_type __type; 
# 324
}; 
# 326
template< class _Tp> 
# 327
struct __is_pointer< _Tp *>  { 
# 329
enum { __value = 1}; 
# 330
typedef __true_type __type; 
# 331
}; 
# 336
template< class _Tp> 
# 337
struct __is_arithmetic : public __traitor< __is_integer< _Tp> , __is_floating< _Tp> >  { 
# 339
}; 
# 344
template< class _Tp> 
# 345
struct __is_scalar : public __traitor< __is_arithmetic< _Tp> , __is_pointer< _Tp> >  { 
# 347
}; 
# 352
template< class _Tp> 
# 353
struct __is_char { 
# 355
enum { __value}; 
# 356
typedef __false_type __type; 
# 357
}; 
# 360
template<> struct __is_char< char>  { 
# 362
enum { __value = 1}; 
# 363
typedef __true_type __type; 
# 364
}; 
# 368
template<> struct __is_char< wchar_t>  { 
# 370
enum { __value = 1}; 
# 371
typedef __true_type __type; 
# 372
}; 
# 375
template< class _Tp> 
# 376
struct __is_byte { 
# 378
enum { __value}; 
# 379
typedef __false_type __type; 
# 380
}; 
# 383
template<> struct __is_byte< char>  { 
# 385
enum { __value = 1}; 
# 386
typedef __true_type __type; 
# 387
}; 
# 390
template<> struct __is_byte< signed char>  { 
# 392
enum { __value = 1}; 
# 393
typedef __true_type __type; 
# 394
}; 
# 397
template<> struct __is_byte< unsigned char>  { 
# 399
enum { __value = 1}; 
# 400
typedef __true_type __type; 
# 401
}; 
# 417 "/usr/include/c++/9/bits/cpp_type_traits.h" 3
template< class _Tp> 
# 418
struct __is_move_iterator { 
# 420
enum { __value}; 
# 421
typedef __false_type __type; 
# 422
}; 
# 426
template< class _Iterator> inline _Iterator 
# 428
__miter_base(_Iterator __it) 
# 429
{ return __it; } 
# 432
}
# 433
}
# 37 "/usr/include/c++/9/ext/type_traits.h" 3
extern "C++" {
# 39
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 44
template< bool , class > 
# 45
struct __enable_if { 
# 46
}; 
# 48
template< class _Tp> 
# 49
struct __enable_if< true, _Tp>  { 
# 50
typedef _Tp __type; }; 
# 54
template< bool _Cond, class _Iftrue, class _Iffalse> 
# 55
struct __conditional_type { 
# 56
typedef _Iftrue __type; }; 
# 58
template< class _Iftrue, class _Iffalse> 
# 59
struct __conditional_type< false, _Iftrue, _Iffalse>  { 
# 60
typedef _Iffalse __type; }; 
# 64
template< class _Tp> 
# 65
struct __add_unsigned { 
# 68
private: typedef __enable_if< std::__is_integer< _Tp> ::__value, _Tp>  __if_type; 
# 71
public: typedef typename __enable_if< std::__is_integer< _Tp> ::__value, _Tp> ::__type __type; 
# 72
}; 
# 75
template<> struct __add_unsigned< char>  { 
# 76
typedef unsigned char __type; }; 
# 79
template<> struct __add_unsigned< signed char>  { 
# 80
typedef unsigned char __type; }; 
# 83
template<> struct __add_unsigned< short>  { 
# 84
typedef unsigned short __type; }; 
# 87
template<> struct __add_unsigned< int>  { 
# 88
typedef unsigned __type; }; 
# 91
template<> struct __add_unsigned< long>  { 
# 92
typedef unsigned long __type; }; 
# 95
template<> struct __add_unsigned< long long>  { 
# 96
typedef unsigned long long __type; }; 
# 100
template<> struct __add_unsigned< bool> ; 
# 103
template<> struct __add_unsigned< wchar_t> ; 
# 107
template< class _Tp> 
# 108
struct __remove_unsigned { 
# 111
private: typedef __enable_if< std::__is_integer< _Tp> ::__value, _Tp>  __if_type; 
# 114
public: typedef typename __enable_if< std::__is_integer< _Tp> ::__value, _Tp> ::__type __type; 
# 115
}; 
# 118
template<> struct __remove_unsigned< char>  { 
# 119
typedef signed char __type; }; 
# 122
template<> struct __remove_unsigned< unsigned char>  { 
# 123
typedef signed char __type; }; 
# 126
template<> struct __remove_unsigned< unsigned short>  { 
# 127
typedef short __type; }; 
# 130
template<> struct __remove_unsigned< unsigned>  { 
# 131
typedef int __type; }; 
# 134
template<> struct __remove_unsigned< unsigned long>  { 
# 135
typedef long __type; }; 
# 138
template<> struct __remove_unsigned< unsigned long long>  { 
# 139
typedef long long __type; }; 
# 143
template<> struct __remove_unsigned< bool> ; 
# 146
template<> struct __remove_unsigned< wchar_t> ; 
# 150
template< class _Type> inline bool 
# 152
__is_null_pointer(_Type *__ptr) 
# 153
{ return __ptr == 0; } 
# 155
template< class _Type> inline bool 
# 157
__is_null_pointer(_Type) 
# 158
{ return false; } 
# 162
inline bool __is_null_pointer(std::nullptr_t) 
# 163
{ return true; } 
# 167
template< class _Tp, bool  = std::__is_integer< _Tp> ::__value> 
# 168
struct __promote { 
# 169
typedef double __type; }; 
# 174
template< class _Tp> 
# 175
struct __promote< _Tp, false>  { 
# 176
}; 
# 179
template<> struct __promote< long double>  { 
# 180
typedef long double __type; }; 
# 183
template<> struct __promote< double>  { 
# 184
typedef double __type; }; 
# 187
template<> struct __promote< float>  { 
# 188
typedef float __type; }; 
# 190
template< class _Tp, class _Up, class 
# 191
_Tp2 = typename __promote< _Tp> ::__type, class 
# 192
_Up2 = typename __promote< _Up> ::__type> 
# 193
struct __promote_2 { 
# 195
typedef __typeof__(_Tp2() + _Up2()) __type; 
# 196
}; 
# 198
template< class _Tp, class _Up, class _Vp, class 
# 199
_Tp2 = typename __promote< _Tp> ::__type, class 
# 200
_Up2 = typename __promote< _Up> ::__type, class 
# 201
_Vp2 = typename __promote< _Vp> ::__type> 
# 202
struct __promote_3 { 
# 204
typedef __typeof__((_Tp2() + _Up2()) + _Vp2()) __type; 
# 205
}; 
# 207
template< class _Tp, class _Up, class _Vp, class _Wp, class 
# 208
_Tp2 = typename __promote< _Tp> ::__type, class 
# 209
_Up2 = typename __promote< _Up> ::__type, class 
# 210
_Vp2 = typename __promote< _Vp> ::__type, class 
# 211
_Wp2 = typename __promote< _Wp> ::__type> 
# 212
struct __promote_4 { 
# 214
typedef __typeof__(((_Tp2() + _Up2()) + _Vp2()) + _Wp2()) __type; 
# 215
}; 
# 218
}
# 219
}
# 34 "/usr/include/math.h" 3
extern "C" {
# 80 "/usr/include/aarch64-linux-gnu/bits/floatn.h" 3
typedef long double _Float128; 
# 214 "/usr/include/aarch64-linux-gnu/bits/floatn-common.h" 3
typedef float _Float32; 
# 251 "/usr/include/aarch64-linux-gnu/bits/floatn-common.h" 3
typedef double _Float64; 
# 268 "/usr/include/aarch64-linux-gnu/bits/floatn-common.h" 3
typedef double _Float32x; 
# 285 "/usr/include/aarch64-linux-gnu/bits/floatn-common.h" 3
typedef long double _Float64x; 
# 149 "/usr/include/math.h" 3
typedef float float_t; 
# 150
typedef double double_t; 
# 238 "/usr/include/math.h" 3
enum { 
# 239
FP_INT_UPWARD, 
# 242
FP_INT_DOWNWARD, 
# 245
FP_INT_TOWARDZERO, 
# 248
FP_INT_TONEARESTFROMZERO, 
# 251
FP_INT_TONEAREST
# 254
}; 
# 21 "/usr/include/aarch64-linux-gnu/bits/mathcalls-helper-functions.h" 3
extern int __fpclassify(double __value) throw()
# 22
 __attribute((const)); 
# 25
extern int __signbit(double __value) throw()
# 26
 __attribute((const)); 
# 30
extern int __isinf(double __value) throw() __attribute((const)); 
# 33
extern int __finite(double __value) throw() __attribute((const)); 
# 36
extern int __isnan(double __value) throw() __attribute((const)); 
# 39
extern int __iseqsig(double __x, double __y) throw(); 
# 42
extern int __issignaling(double __value) throw()
# 43
 __attribute((const)); 
# 53 "/usr/include/aarch64-linux-gnu/bits/mathcalls.h" 3
extern double acos(double __x) throw(); extern double __acos(double __x) throw(); 
# 55
extern double asin(double __x) throw(); extern double __asin(double __x) throw(); 
# 57
extern double atan(double __x) throw(); extern double __atan(double __x) throw(); 
# 59
extern double atan2(double __y, double __x) throw(); extern double __atan2(double __y, double __x) throw(); 
# 62
extern double cos(double __x) throw(); extern double __cos(double __x) throw(); 
# 64
extern double sin(double __x) throw(); extern double __sin(double __x) throw(); 
# 66
extern double tan(double __x) throw(); extern double __tan(double __x) throw(); 
# 71
extern double cosh(double __x) throw(); extern double __cosh(double __x) throw(); 
# 73
extern double sinh(double __x) throw(); extern double __sinh(double __x) throw(); 
# 75
extern double tanh(double __x) throw(); extern double __tanh(double __x) throw(); 
# 79
extern void sincos(double __x, double * __sinx, double * __cosx) throw(); extern void __sincos(double __x, double * __sinx, double * __cosx) throw(); 
# 85
extern double acosh(double __x) throw(); extern double __acosh(double __x) throw(); 
# 87
extern double asinh(double __x) throw(); extern double __asinh(double __x) throw(); 
# 89
extern double atanh(double __x) throw(); extern double __atanh(double __x) throw(); 
# 95
extern double exp(double __x) throw(); extern double __exp(double __x) throw(); 
# 98
extern double frexp(double __x, int * __exponent) throw(); extern double __frexp(double __x, int * __exponent) throw(); 
# 101
extern double ldexp(double __x, int __exponent) throw(); extern double __ldexp(double __x, int __exponent) throw(); 
# 104
extern double log(double __x) throw(); extern double __log(double __x) throw(); 
# 107
extern double log10(double __x) throw(); extern double __log10(double __x) throw(); 
# 110
extern double modf(double __x, double * __iptr) throw(); extern double __modf(double __x, double * __iptr) throw() __attribute((__nonnull__(2))); 
# 114
extern double exp10(double __x) throw(); extern double __exp10(double __x) throw(); 
# 119
extern double expm1(double __x) throw(); extern double __expm1(double __x) throw(); 
# 122
extern double log1p(double __x) throw(); extern double __log1p(double __x) throw(); 
# 125
extern double logb(double __x) throw(); extern double __logb(double __x) throw(); 
# 130
extern double exp2(double __x) throw(); extern double __exp2(double __x) throw(); 
# 133
extern double log2(double __x) throw(); extern double __log2(double __x) throw(); 
# 140
extern double pow(double __x, double __y) throw(); extern double __pow(double __x, double __y) throw(); 
# 143
extern double sqrt(double __x) throw(); extern double __sqrt(double __x) throw(); 
# 147
extern double hypot(double __x, double __y) throw(); extern double __hypot(double __x, double __y) throw(); 
# 152
extern double cbrt(double __x) throw(); extern double __cbrt(double __x) throw(); 
# 159
extern double ceil(double __x) throw() __attribute((const)); extern double __ceil(double __x) throw() __attribute((const)); 
# 162
extern double fabs(double __x) throw() __attribute((const)); extern double __fabs(double __x) throw() __attribute((const)); 
# 165
extern double floor(double __x) throw() __attribute((const)); extern double __floor(double __x) throw() __attribute((const)); 
# 168
extern double fmod(double __x, double __y) throw(); extern double __fmod(double __x, double __y) throw(); 
# 182 "/usr/include/aarch64-linux-gnu/bits/mathcalls.h" 3
extern int finite(double __value) throw() __attribute((const)); 
# 185
extern double drem(double __x, double __y) throw(); extern double __drem(double __x, double __y) throw(); 
# 189
extern double significand(double __x) throw(); extern double __significand(double __x) throw(); 
# 196
extern double copysign(double __x, double __y) throw() __attribute((const)); extern double __copysign(double __x, double __y) throw() __attribute((const)); 
# 201
extern double nan(const char * __tagb) throw(); extern double __nan(const char * __tagb) throw(); 
# 217 "/usr/include/aarch64-linux-gnu/bits/mathcalls.h" 3
extern double j0(double) throw(); extern double __j0(double) throw(); 
# 218
extern double j1(double) throw(); extern double __j1(double) throw(); 
# 219
extern double jn(int, double) throw(); extern double __jn(int, double) throw(); 
# 220
extern double y0(double) throw(); extern double __y0(double) throw(); 
# 221
extern double y1(double) throw(); extern double __y1(double) throw(); 
# 222
extern double yn(int, double) throw(); extern double __yn(int, double) throw(); 
# 228
extern double erf(double) throw(); extern double __erf(double) throw(); 
# 229
extern double erfc(double) throw(); extern double __erfc(double) throw(); 
# 230
extern double lgamma(double) throw(); extern double __lgamma(double) throw(); 
# 235
extern double tgamma(double) throw(); extern double __tgamma(double) throw(); 
# 241
extern double gamma(double) throw(); extern double __gamma(double) throw(); 
# 249
extern double lgamma_r(double, int * __signgamp) throw(); extern double __lgamma_r(double, int * __signgamp) throw(); 
# 256
extern double rint(double __x) throw(); extern double __rint(double __x) throw(); 
# 259
extern double nextafter(double __x, double __y) throw(); extern double __nextafter(double __x, double __y) throw(); 
# 261
extern double nexttoward(double __x, long double __y) throw(); extern double __nexttoward(double __x, long double __y) throw(); 
# 266
extern double nextdown(double __x) throw(); extern double __nextdown(double __x) throw(); 
# 268
extern double nextup(double __x) throw(); extern double __nextup(double __x) throw(); 
# 272
extern double remainder(double __x, double __y) throw(); extern double __remainder(double __x, double __y) throw(); 
# 276
extern double scalbn(double __x, int __n) throw(); extern double __scalbn(double __x, int __n) throw(); 
# 280
extern int ilogb(double __x) throw(); extern int __ilogb(double __x) throw(); 
# 285
extern long llogb(double __x) throw(); extern long __llogb(double __x) throw(); 
# 290
extern double scalbln(double __x, long __n) throw(); extern double __scalbln(double __x, long __n) throw(); 
# 294
extern double nearbyint(double __x) throw(); extern double __nearbyint(double __x) throw(); 
# 298
extern double round(double __x) throw() __attribute((const)); extern double __round(double __x) throw() __attribute((const)); 
# 302
extern double trunc(double __x) throw() __attribute((const)); extern double __trunc(double __x) throw() __attribute((const)); 
# 307
extern double remquo(double __x, double __y, int * __quo) throw(); extern double __remquo(double __x, double __y, int * __quo) throw(); 
# 314
extern long lrint(double __x) throw(); extern long __lrint(double __x) throw(); 
# 316
__extension__ extern long long llrint(double __x) throw(); extern long long __llrint(double __x) throw(); 
# 320
extern long lround(double __x) throw(); extern long __lround(double __x) throw(); 
# 322
__extension__ extern long long llround(double __x) throw(); extern long long __llround(double __x) throw(); 
# 326
extern double fdim(double __x, double __y) throw(); extern double __fdim(double __x, double __y) throw(); 
# 329
extern double fmax(double __x, double __y) throw() __attribute((const)); extern double __fmax(double __x, double __y) throw() __attribute((const)); 
# 332
extern double fmin(double __x, double __y) throw() __attribute((const)); extern double __fmin(double __x, double __y) throw() __attribute((const)); 
# 335
extern double fma(double __x, double __y, double __z) throw(); extern double __fma(double __x, double __y, double __z) throw(); 
# 340
extern double roundeven(double __x) throw() __attribute((const)); extern double __roundeven(double __x) throw() __attribute((const)); 
# 344
extern __intmax_t fromfp(double __x, int __round, unsigned __width) throw(); extern __intmax_t __fromfp(double __x, int __round, unsigned __width) throw(); 
# 349
extern __uintmax_t ufromfp(double __x, int __round, unsigned __width) throw(); extern __uintmax_t __ufromfp(double __x, int __round, unsigned __width) throw(); 
# 355
extern __intmax_t fromfpx(double __x, int __round, unsigned __width) throw(); extern __intmax_t __fromfpx(double __x, int __round, unsigned __width) throw(); 
# 361
extern __uintmax_t ufromfpx(double __x, int __round, unsigned __width) throw(); extern __uintmax_t __ufromfpx(double __x, int __round, unsigned __width) throw(); 
# 365
extern double fmaxmag(double __x, double __y) throw() __attribute((const)); extern double __fmaxmag(double __x, double __y) throw() __attribute((const)); 
# 368
extern double fminmag(double __x, double __y) throw() __attribute((const)); extern double __fminmag(double __x, double __y) throw() __attribute((const)); 
# 371
extern int canonicalize(double * __cx, const double * __x) throw(); 
# 376
extern int totalorder(const double * __x, const double * __y) throw()
# 378
 __attribute((__pure__)); 
# 381
extern int totalordermag(const double * __x, const double * __y) throw()
# 383
 __attribute((__pure__)); 
# 386
extern double getpayload(const double * __x) throw(); extern double __getpayload(const double * __x) throw(); 
# 389
extern int setpayload(double * __x, double __payload) throw(); 
# 392
extern int setpayloadsig(double * __x, double __payload) throw(); 
# 400
extern double scalb(double __x, double __n) throw(); extern double __scalb(double __x, double __n) throw(); 
# 21 "/usr/include/aarch64-linux-gnu/bits/mathcalls-helper-functions.h" 3
extern int __fpclassifyf(float __value) throw()
# 22
 __attribute((const)); 
# 25
extern int __signbitf(float __value) throw()
# 26
 __attribute((const)); 
# 30
extern int __isinff(float __value) throw() __attribute((const)); 
# 33
extern int __finitef(float __value) throw() __attribute((const)); 
# 36
extern int __isnanf(float __value) throw() __attribute((const)); 
# 39
extern int __iseqsigf(float __x, float __y) throw(); 
# 42
extern int __issignalingf(float __value) throw()
# 43
 __attribute((const)); 
# 53 "/usr/include/aarch64-linux-gnu/bits/mathcalls.h" 3
extern float acosf(float __x) throw(); extern float __acosf(float __x) throw(); 
# 55
extern float asinf(float __x) throw(); extern float __asinf(float __x) throw(); 
# 57
extern float atanf(float __x) throw(); extern float __atanf(float __x) throw(); 
# 59
extern float atan2f(float __y, float __x) throw(); extern float __atan2f(float __y, float __x) throw(); 
# 62
extern float cosf(float __x) throw(); 
# 64
extern float sinf(float __x) throw(); 
# 66
extern float tanf(float __x) throw(); 
# 71
extern float coshf(float __x) throw(); extern float __coshf(float __x) throw(); 
# 73
extern float sinhf(float __x) throw(); extern float __sinhf(float __x) throw(); 
# 75
extern float tanhf(float __x) throw(); extern float __tanhf(float __x) throw(); 
# 79
extern void sincosf(float __x, float * __sinx, float * __cosx) throw(); 
# 85
extern float acoshf(float __x) throw(); extern float __acoshf(float __x) throw(); 
# 87
extern float asinhf(float __x) throw(); extern float __asinhf(float __x) throw(); 
# 89
extern float atanhf(float __x) throw(); extern float __atanhf(float __x) throw(); 
# 95
extern float expf(float __x) throw(); 
# 98
extern float frexpf(float __x, int * __exponent) throw(); extern float __frexpf(float __x, int * __exponent) throw(); 
# 101
extern float ldexpf(float __x, int __exponent) throw(); extern float __ldexpf(float __x, int __exponent) throw(); 
# 104
extern float logf(float __x) throw(); 
# 107
extern float log10f(float __x) throw(); 
# 110
extern float modff(float __x, float * __iptr) throw(); extern float __modff(float __x, float * __iptr) throw() __attribute((__nonnull__(2))); 
# 114
extern float exp10f(float __x) throw(); 
# 119
extern float expm1f(float __x) throw(); extern float __expm1f(float __x) throw(); 
# 122
extern float log1pf(float __x) throw(); extern float __log1pf(float __x) throw(); 
# 125
extern float logbf(float __x) throw(); extern float __logbf(float __x) throw(); 
# 130
extern float exp2f(float __x) throw(); extern float __exp2f(float __x) throw(); 
# 133
extern float log2f(float __x) throw(); 
# 140
extern float powf(float __x, float __y) throw(); 
# 143
extern float sqrtf(float __x) throw(); extern float __sqrtf(float __x) throw(); 
# 147
extern float hypotf(float __x, float __y) throw(); extern float __hypotf(float __x, float __y) throw(); 
# 152
extern float cbrtf(float __x) throw(); extern float __cbrtf(float __x) throw(); 
# 159
extern float ceilf(float __x) throw() __attribute((const)); extern float __ceilf(float __x) throw() __attribute((const)); 
# 162
extern float fabsf(float __x) throw() __attribute((const)); extern float __fabsf(float __x) throw() __attribute((const)); 
# 165
extern float floorf(float __x) throw() __attribute((const)); extern float __floorf(float __x) throw() __attribute((const)); 
# 168
extern float fmodf(float __x, float __y) throw(); extern float __fmodf(float __x, float __y) throw(); 
# 177 "/usr/include/aarch64-linux-gnu/bits/mathcalls.h" 3
extern int isinff(float __value) throw() __attribute((const)); 
# 182
extern int finitef(float __value) throw() __attribute((const)); 
# 185
extern float dremf(float __x, float __y) throw(); extern float __dremf(float __x, float __y) throw(); 
# 189
extern float significandf(float __x) throw(); extern float __significandf(float __x) throw(); 
# 196
extern float copysignf(float __x, float __y) throw() __attribute((const)); extern float __copysignf(float __x, float __y) throw() __attribute((const)); 
# 201
extern float nanf(const char * __tagb) throw(); extern float __nanf(const char * __tagb) throw(); 
# 211 "/usr/include/aarch64-linux-gnu/bits/mathcalls.h" 3
extern int isnanf(float __value) throw() __attribute((const)); 
# 217
extern float j0f(float) throw(); extern float __j0f(float) throw(); 
# 218
extern float j1f(float) throw(); extern float __j1f(float) throw(); 
# 219
extern float jnf(int, float) throw(); extern float __jnf(int, float) throw(); 
# 220
extern float y0f(float) throw(); extern float __y0f(float) throw(); 
# 221
extern float y1f(float) throw(); extern float __y1f(float) throw(); 
# 222
extern float ynf(int, float) throw(); extern float __ynf(int, float) throw(); 
# 228
extern float erff(float) throw(); extern float __erff(float) throw(); 
# 229
extern float erfcf(float) throw(); extern float __erfcf(float) throw(); 
# 230
extern float lgammaf(float) throw(); extern float __lgammaf(float) throw(); 
# 235
extern float tgammaf(float) throw(); extern float __tgammaf(float) throw(); 
# 241
extern float gammaf(float) throw(); extern float __gammaf(float) throw(); 
# 249
extern float lgammaf_r(float, int * __signgamp) throw(); extern float __lgammaf_r(float, int * __signgamp) throw(); 
# 256
extern float rintf(float __x) throw(); extern float __rintf(float __x) throw(); 
# 259
extern float nextafterf(float __x, float __y) throw(); extern float __nextafterf(float __x, float __y) throw(); 
# 261
extern float nexttowardf(float __x, long double __y) throw(); extern float __nexttowardf(float __x, long double __y) throw(); 
# 266
extern float nextdownf(float __x) throw(); extern float __nextdownf(float __x) throw(); 
# 268
extern float nextupf(float __x) throw(); extern float __nextupf(float __x) throw(); 
# 272
extern float remainderf(float __x, float __y) throw(); extern float __remainderf(float __x, float __y) throw(); 
# 276
extern float scalbnf(float __x, int __n) throw(); extern float __scalbnf(float __x, int __n) throw(); 
# 280
extern int ilogbf(float __x) throw(); extern int __ilogbf(float __x) throw(); 
# 285
extern long llogbf(float __x) throw(); extern long __llogbf(float __x) throw(); 
# 290
extern float scalblnf(float __x, long __n) throw(); extern float __scalblnf(float __x, long __n) throw(); 
# 294
extern float nearbyintf(float __x) throw(); extern float __nearbyintf(float __x) throw(); 
# 298
extern float roundf(float __x) throw() __attribute((const)); extern float __roundf(float __x) throw() __attribute((const)); 
# 302
extern float truncf(float __x) throw() __attribute((const)); extern float __truncf(float __x) throw() __attribute((const)); 
# 307
extern float remquof(float __x, float __y, int * __quo) throw(); extern float __remquof(float __x, float __y, int * __quo) throw(); 
# 314
extern long lrintf(float __x) throw(); extern long __lrintf(float __x) throw(); 
# 316
__extension__ extern long long llrintf(float __x) throw(); extern long long __llrintf(float __x) throw(); 
# 320
extern long lroundf(float __x) throw(); extern long __lroundf(float __x) throw(); 
# 322
__extension__ extern long long llroundf(float __x) throw(); extern long long __llroundf(float __x) throw(); 
# 326
extern float fdimf(float __x, float __y) throw(); extern float __fdimf(float __x, float __y) throw(); 
# 329
extern float fmaxf(float __x, float __y) throw() __attribute((const)); extern float __fmaxf(float __x, float __y) throw() __attribute((const)); 
# 332
extern float fminf(float __x, float __y) throw() __attribute((const)); extern float __fminf(float __x, float __y) throw() __attribute((const)); 
# 335
extern float fmaf(float __x, float __y, float __z) throw(); extern float __fmaf(float __x, float __y, float __z) throw(); 
# 340
extern float roundevenf(float __x) throw() __attribute((const)); extern float __roundevenf(float __x) throw() __attribute((const)); 
# 344
extern __intmax_t fromfpf(float __x, int __round, unsigned __width) throw(); extern __intmax_t __fromfpf(float __x, int __round, unsigned __width) throw(); 
# 349
extern __uintmax_t ufromfpf(float __x, int __round, unsigned __width) throw(); extern __uintmax_t __ufromfpf(float __x, int __round, unsigned __width) throw(); 
# 355
extern __intmax_t fromfpxf(float __x, int __round, unsigned __width) throw(); extern __intmax_t __fromfpxf(float __x, int __round, unsigned __width) throw(); 
# 361
extern __uintmax_t ufromfpxf(float __x, int __round, unsigned __width) throw(); extern __uintmax_t __ufromfpxf(float __x, int __round, unsigned __width) throw(); 
# 365
extern float fmaxmagf(float __x, float __y) throw() __attribute((const)); extern float __fmaxmagf(float __x, float __y) throw() __attribute((const)); 
# 368
extern float fminmagf(float __x, float __y) throw() __attribute((const)); extern float __fminmagf(float __x, float __y) throw() __attribute((const)); 
# 371
extern int canonicalizef(float * __cx, const float * __x) throw(); 
# 376
extern int totalorderf(const float * __x, const float * __y) throw()
# 378
 __attribute((__pure__)); 
# 381
extern int totalordermagf(const float * __x, const float * __y) throw()
# 383
 __attribute((__pure__)); 
# 386
extern float getpayloadf(const float * __x) throw(); extern float __getpayloadf(const float * __x) throw(); 
# 389
extern int setpayloadf(float * __x, float __payload) throw(); 
# 392
extern int setpayloadsigf(float * __x, float __payload) throw(); 
# 400
extern float scalbf(float __x, float __n) throw(); extern float __scalbf(float __x, float __n) throw(); 
# 21 "/usr/include/aarch64-linux-gnu/bits/mathcalls-helper-functions.h" 3
extern int __fpclassifyl(long double __value) throw()
# 22
 __attribute((const)); 
# 25
extern int __signbitl(long double __value) throw()
# 26
 __attribute((const)); 
# 30
extern int __isinfl(long double __value) throw() __attribute((const)); 
# 33
extern int __finitel(long double __value) throw() __attribute((const)); 
# 36
extern int __isnanl(long double __value) throw() __attribute((const)); 
# 39
extern int __iseqsigl(long double __x, long double __y) throw(); 
# 42
extern int __issignalingl(long double __value) throw()
# 43
 __attribute((const)); 
# 53 "/usr/include/aarch64-linux-gnu/bits/mathcalls.h" 3
extern long double acosl(long double __x) throw(); extern long double __acosl(long double __x) throw(); 
# 55
extern long double asinl(long double __x) throw(); extern long double __asinl(long double __x) throw(); 
# 57
extern long double atanl(long double __x) throw(); extern long double __atanl(long double __x) throw(); 
# 59
extern long double atan2l(long double __y, long double __x) throw(); extern long double __atan2l(long double __y, long double __x) throw(); 
# 62
extern long double cosl(long double __x) throw(); extern long double __cosl(long double __x) throw(); 
# 64
extern long double sinl(long double __x) throw(); extern long double __sinl(long double __x) throw(); 
# 66
extern long double tanl(long double __x) throw(); extern long double __tanl(long double __x) throw(); 
# 71
extern long double coshl(long double __x) throw(); extern long double __coshl(long double __x) throw(); 
# 73
extern long double sinhl(long double __x) throw(); extern long double __sinhl(long double __x) throw(); 
# 75
extern long double tanhl(long double __x) throw(); extern long double __tanhl(long double __x) throw(); 
# 79
extern void sincosl(long double __x, long double * __sinx, long double * __cosx) throw(); extern void __sincosl(long double __x, long double * __sinx, long double * __cosx) throw(); 
# 85
extern long double acoshl(long double __x) throw(); extern long double __acoshl(long double __x) throw(); 
# 87
extern long double asinhl(long double __x) throw(); extern long double __asinhl(long double __x) throw(); 
# 89
extern long double atanhl(long double __x) throw(); extern long double __atanhl(long double __x) throw(); 
# 95
extern long double expl(long double __x) throw(); extern long double __expl(long double __x) throw(); 
# 98
extern long double frexpl(long double __x, int * __exponent) throw(); extern long double __frexpl(long double __x, int * __exponent) throw(); 
# 101
extern long double ldexpl(long double __x, int __exponent) throw(); extern long double __ldexpl(long double __x, int __exponent) throw(); 
# 104
extern long double logl(long double __x) throw(); extern long double __logl(long double __x) throw(); 
# 107
extern long double log10l(long double __x) throw(); extern long double __log10l(long double __x) throw(); 
# 110
extern long double modfl(long double __x, long double * __iptr) throw(); extern long double __modfl(long double __x, long double * __iptr) throw() __attribute((__nonnull__(2))); 
# 114
extern long double exp10l(long double __x) throw(); extern long double __exp10l(long double __x) throw(); 
# 119
extern long double expm1l(long double __x) throw(); extern long double __expm1l(long double __x) throw(); 
# 122
extern long double log1pl(long double __x) throw(); extern long double __log1pl(long double __x) throw(); 
# 125
extern long double logbl(long double __x) throw(); extern long double __logbl(long double __x) throw(); 
# 130
extern long double exp2l(long double __x) throw(); extern long double __exp2l(long double __x) throw(); 
# 133
extern long double log2l(long double __x) throw(); extern long double __log2l(long double __x) throw(); 
# 140
extern long double powl(long double __x, long double __y) throw(); extern long double __powl(long double __x, long double __y) throw(); 
# 143
extern long double sqrtl(long double __x) throw(); extern long double __sqrtl(long double __x) throw(); 
# 147
extern long double hypotl(long double __x, long double __y) throw(); extern long double __hypotl(long double __x, long double __y) throw(); 
# 152
extern long double cbrtl(long double __x) throw(); extern long double __cbrtl(long double __x) throw(); 
# 159
extern long double ceill(long double __x) throw() __attribute((const)); extern long double __ceill(long double __x) throw() __attribute((const)); 
# 162
extern long double fabsl(long double __x) throw() __attribute((const)); extern long double __fabsl(long double __x) throw() __attribute((const)); 
# 165
extern long double floorl(long double __x) throw() __attribute((const)); extern long double __floorl(long double __x) throw() __attribute((const)); 
# 168
extern long double fmodl(long double __x, long double __y) throw(); extern long double __fmodl(long double __x, long double __y) throw(); 
# 177 "/usr/include/aarch64-linux-gnu/bits/mathcalls.h" 3
extern int isinfl(long double __value) throw() __attribute((const)); 
# 182
extern int finitel(long double __value) throw() __attribute((const)); 
# 185
extern long double dreml(long double __x, long double __y) throw(); extern long double __dreml(long double __x, long double __y) throw(); 
# 189
extern long double significandl(long double __x) throw(); extern long double __significandl(long double __x) throw(); 
# 196
extern long double copysignl(long double __x, long double __y) throw() __attribute((const)); extern long double __copysignl(long double __x, long double __y) throw() __attribute((const)); 
# 201
extern long double nanl(const char * __tagb) throw(); extern long double __nanl(const char * __tagb) throw(); 
# 211 "/usr/include/aarch64-linux-gnu/bits/mathcalls.h" 3
extern int isnanl(long double __value) throw() __attribute((const)); 
# 217
extern long double j0l(long double) throw(); extern long double __j0l(long double) throw(); 
# 218
extern long double j1l(long double) throw(); extern long double __j1l(long double) throw(); 
# 219
extern long double jnl(int, long double) throw(); extern long double __jnl(int, long double) throw(); 
# 220
extern long double y0l(long double) throw(); extern long double __y0l(long double) throw(); 
# 221
extern long double y1l(long double) throw(); extern long double __y1l(long double) throw(); 
# 222
extern long double ynl(int, long double) throw(); extern long double __ynl(int, long double) throw(); 
# 228
extern long double erfl(long double) throw(); extern long double __erfl(long double) throw(); 
# 229
extern long double erfcl(long double) throw(); extern long double __erfcl(long double) throw(); 
# 230
extern long double lgammal(long double) throw(); extern long double __lgammal(long double) throw(); 
# 235
extern long double tgammal(long double) throw(); extern long double __tgammal(long double) throw(); 
# 241
extern long double gammal(long double) throw(); extern long double __gammal(long double) throw(); 
# 249
extern long double lgammal_r(long double, int * __signgamp) throw(); extern long double __lgammal_r(long double, int * __signgamp) throw(); 
# 256
extern long double rintl(long double __x) throw(); extern long double __rintl(long double __x) throw(); 
# 259
extern long double nextafterl(long double __x, long double __y) throw(); extern long double __nextafterl(long double __x, long double __y) throw(); 
# 261
extern long double nexttowardl(long double __x, long double __y) throw(); extern long double __nexttowardl(long double __x, long double __y) throw(); 
# 266
extern long double nextdownl(long double __x) throw(); extern long double __nextdownl(long double __x) throw(); 
# 268
extern long double nextupl(long double __x) throw(); extern long double __nextupl(long double __x) throw(); 
# 272
extern long double remainderl(long double __x, long double __y) throw(); extern long double __remainderl(long double __x, long double __y) throw(); 
# 276
extern long double scalbnl(long double __x, int __n) throw(); extern long double __scalbnl(long double __x, int __n) throw(); 
# 280
extern int ilogbl(long double __x) throw(); extern int __ilogbl(long double __x) throw(); 
# 285
extern long llogbl(long double __x) throw(); extern long __llogbl(long double __x) throw(); 
# 290
extern long double scalblnl(long double __x, long __n) throw(); extern long double __scalblnl(long double __x, long __n) throw(); 
# 294
extern long double nearbyintl(long double __x) throw(); extern long double __nearbyintl(long double __x) throw(); 
# 298
extern long double roundl(long double __x) throw() __attribute((const)); extern long double __roundl(long double __x) throw() __attribute((const)); 
# 302
extern long double truncl(long double __x) throw() __attribute((const)); extern long double __truncl(long double __x) throw() __attribute((const)); 
# 307
extern long double remquol(long double __x, long double __y, int * __quo) throw(); extern long double __remquol(long double __x, long double __y, int * __quo) throw(); 
# 314
extern long lrintl(long double __x) throw(); extern long __lrintl(long double __x) throw(); 
# 316
__extension__ extern long long llrintl(long double __x) throw(); extern long long __llrintl(long double __x) throw(); 
# 320
extern long lroundl(long double __x) throw(); extern long __lroundl(long double __x) throw(); 
# 322
__extension__ extern long long llroundl(long double __x) throw(); extern long long __llroundl(long double __x) throw(); 
# 326
extern long double fdiml(long double __x, long double __y) throw(); extern long double __fdiml(long double __x, long double __y) throw(); 
# 329
extern long double fmaxl(long double __x, long double __y) throw() __attribute((const)); extern long double __fmaxl(long double __x, long double __y) throw() __attribute((const)); 
# 332
extern long double fminl(long double __x, long double __y) throw() __attribute((const)); extern long double __fminl(long double __x, long double __y) throw() __attribute((const)); 
# 335
extern long double fmal(long double __x, long double __y, long double __z) throw(); extern long double __fmal(long double __x, long double __y, long double __z) throw(); 
# 340
extern long double roundevenl(long double __x) throw() __attribute((const)); extern long double __roundevenl(long double __x) throw() __attribute((const)); 
# 344
extern __intmax_t fromfpl(long double __x, int __round, unsigned __width) throw(); extern __intmax_t __fromfpl(long double __x, int __round, unsigned __width) throw(); 
# 349
extern __uintmax_t ufromfpl(long double __x, int __round, unsigned __width) throw(); extern __uintmax_t __ufromfpl(long double __x, int __round, unsigned __width) throw(); 
# 355
extern __intmax_t fromfpxl(long double __x, int __round, unsigned __width) throw(); extern __intmax_t __fromfpxl(long double __x, int __round, unsigned __width) throw(); 
# 361
extern __uintmax_t ufromfpxl(long double __x, int __round, unsigned __width) throw(); extern __uintmax_t __ufromfpxl(long double __x, int __round, unsigned __width) throw(); 
# 365
extern long double fmaxmagl(long double __x, long double __y) throw() __attribute((const)); extern long double __fmaxmagl(long double __x, long double __y) throw() __attribute((const)); 
# 368
extern long double fminmagl(long double __x, long double __y) throw() __attribute((const)); extern long double __fminmagl(long double __x, long double __y) throw() __attribute((const)); 
# 371
extern int canonicalizel(long double * __cx, const long double * __x) throw(); 
# 376
extern int totalorderl(const long double * __x, const long double * __y) throw()
# 378
 __attribute((__pure__)); 
# 381
extern int totalordermagl(const long double * __x, const long double * __y) throw()
# 383
 __attribute((__pure__)); 
# 386
extern long double getpayloadl(const long double * __x) throw(); extern long double __getpayloadl(const long double * __x) throw(); 
# 389
extern int setpayloadl(long double * __x, long double __payload) throw(); 
# 392
extern int setpayloadsigl(long double * __x, long double __payload) throw(); 
# 400
extern long double scalbl(long double __x, long double __n) throw(); extern long double __scalbl(long double __x, long double __n) throw(); 
# 53 "/usr/include/aarch64-linux-gnu/bits/mathcalls.h" 3
extern _Float32 acosf32(_Float32 __x) throw(); extern _Float32 __acosf32(_Float32 __x) throw(); 
# 55
extern _Float32 asinf32(_Float32 __x) throw(); extern _Float32 __asinf32(_Float32 __x) throw(); 
# 57
extern _Float32 atanf32(_Float32 __x) throw(); extern _Float32 __atanf32(_Float32 __x) throw(); 
# 59
extern _Float32 atan2f32(_Float32 __y, _Float32 __x) throw(); extern _Float32 __atan2f32(_Float32 __y, _Float32 __x) throw(); 
# 62
extern _Float32 cosf32(_Float32 __x) throw(); extern _Float32 __cosf32(_Float32 __x) throw(); 
# 64
extern _Float32 sinf32(_Float32 __x) throw(); extern _Float32 __sinf32(_Float32 __x) throw(); 
# 66
extern _Float32 tanf32(_Float32 __x) throw(); extern _Float32 __tanf32(_Float32 __x) throw(); 
# 71
extern _Float32 coshf32(_Float32 __x) throw(); extern _Float32 __coshf32(_Float32 __x) throw(); 
# 73
extern _Float32 sinhf32(_Float32 __x) throw(); extern _Float32 __sinhf32(_Float32 __x) throw(); 
# 75
extern _Float32 tanhf32(_Float32 __x) throw(); extern _Float32 __tanhf32(_Float32 __x) throw(); 
# 79
extern void sincosf32(_Float32 __x, _Float32 * __sinx, _Float32 * __cosx) throw(); extern void __sincosf32(_Float32 __x, _Float32 * __sinx, _Float32 * __cosx) throw(); 
# 85
extern _Float32 acoshf32(_Float32 __x) throw(); extern _Float32 __acoshf32(_Float32 __x) throw(); 
# 87
extern _Float32 asinhf32(_Float32 __x) throw(); extern _Float32 __asinhf32(_Float32 __x) throw(); 
# 89
extern _Float32 atanhf32(_Float32 __x) throw(); extern _Float32 __atanhf32(_Float32 __x) throw(); 
# 95
extern _Float32 expf32(_Float32 __x) throw(); extern _Float32 __expf32(_Float32 __x) throw(); 
# 98
extern _Float32 frexpf32(_Float32 __x, int * __exponent) throw(); extern _Float32 __frexpf32(_Float32 __x, int * __exponent) throw(); 
# 101
extern _Float32 ldexpf32(_Float32 __x, int __exponent) throw(); extern _Float32 __ldexpf32(_Float32 __x, int __exponent) throw(); 
# 104
extern _Float32 logf32(_Float32 __x) throw(); extern _Float32 __logf32(_Float32 __x) throw(); 
# 107
extern _Float32 log10f32(_Float32 __x) throw(); extern _Float32 __log10f32(_Float32 __x) throw(); 
# 110
extern _Float32 modff32(_Float32 __x, _Float32 * __iptr) throw(); extern _Float32 __modff32(_Float32 __x, _Float32 * __iptr) throw() __attribute((__nonnull__(2))); 
# 114
extern _Float32 exp10f32(_Float32 __x) throw(); extern _Float32 __exp10f32(_Float32 __x) throw(); 
# 119
extern _Float32 expm1f32(_Float32 __x) throw(); extern _Float32 __expm1f32(_Float32 __x) throw(); 
# 122
extern _Float32 log1pf32(_Float32 __x) throw(); extern _Float32 __log1pf32(_Float32 __x) throw(); 
# 125
extern _Float32 logbf32(_Float32 __x) throw(); extern _Float32 __logbf32(_Float32 __x) throw(); 
# 130
extern _Float32 exp2f32(_Float32 __x) throw(); extern _Float32 __exp2f32(_Float32 __x) throw(); 
# 133
extern _Float32 log2f32(_Float32 __x) throw(); extern _Float32 __log2f32(_Float32 __x) throw(); 
# 140
extern _Float32 powf32(_Float32 __x, _Float32 __y) throw(); extern _Float32 __powf32(_Float32 __x, _Float32 __y) throw(); 
# 143
extern _Float32 sqrtf32(_Float32 __x) throw(); extern _Float32 __sqrtf32(_Float32 __x) throw(); 
# 147
extern _Float32 hypotf32(_Float32 __x, _Float32 __y) throw(); extern _Float32 __hypotf32(_Float32 __x, _Float32 __y) throw(); 
# 152
extern _Float32 cbrtf32(_Float32 __x) throw(); extern _Float32 __cbrtf32(_Float32 __x) throw(); 
# 159
extern _Float32 ceilf32(_Float32 __x) throw() __attribute((const)); extern _Float32 __ceilf32(_Float32 __x) throw() __attribute((const)); 
# 162
extern _Float32 fabsf32(_Float32 __x) throw() __attribute((const)); extern _Float32 __fabsf32(_Float32 __x) throw() __attribute((const)); 
# 165
extern _Float32 floorf32(_Float32 __x) throw() __attribute((const)); extern _Float32 __floorf32(_Float32 __x) throw() __attribute((const)); 
# 168
extern _Float32 fmodf32(_Float32 __x, _Float32 __y) throw(); extern _Float32 __fmodf32(_Float32 __x, _Float32 __y) throw(); 
# 196 "/usr/include/aarch64-linux-gnu/bits/mathcalls.h" 3
extern _Float32 copysignf32(_Float32 __x, _Float32 __y) throw() __attribute((const)); extern _Float32 __copysignf32(_Float32 __x, _Float32 __y) throw() __attribute((const)); 
# 201
extern _Float32 nanf32(const char * __tagb) throw(); extern _Float32 __nanf32(const char * __tagb) throw(); 
# 217 "/usr/include/aarch64-linux-gnu/bits/mathcalls.h" 3
extern _Float32 j0f32(_Float32) throw(); extern _Float32 __j0f32(_Float32) throw(); 
# 218
extern _Float32 j1f32(_Float32) throw(); extern _Float32 __j1f32(_Float32) throw(); 
# 219
extern _Float32 jnf32(int, _Float32) throw(); extern _Float32 __jnf32(int, _Float32) throw(); 
# 220
extern _Float32 y0f32(_Float32) throw(); extern _Float32 __y0f32(_Float32) throw(); 
# 221
extern _Float32 y1f32(_Float32) throw(); extern _Float32 __y1f32(_Float32) throw(); 
# 222
extern _Float32 ynf32(int, _Float32) throw(); extern _Float32 __ynf32(int, _Float32) throw(); 
# 228
extern _Float32 erff32(_Float32) throw(); extern _Float32 __erff32(_Float32) throw(); 
# 229
extern _Float32 erfcf32(_Float32) throw(); extern _Float32 __erfcf32(_Float32) throw(); 
# 230
extern _Float32 lgammaf32(_Float32) throw(); extern _Float32 __lgammaf32(_Float32) throw(); 
# 235
extern _Float32 tgammaf32(_Float32) throw(); extern _Float32 __tgammaf32(_Float32) throw(); 
# 249 "/usr/include/aarch64-linux-gnu/bits/mathcalls.h" 3
extern _Float32 lgammaf32_r(_Float32, int * __signgamp) throw(); extern _Float32 __lgammaf32_r(_Float32, int * __signgamp) throw(); 
# 256
extern _Float32 rintf32(_Float32 __x) throw(); extern _Float32 __rintf32(_Float32 __x) throw(); 
# 259
extern _Float32 nextafterf32(_Float32 __x, _Float32 __y) throw(); extern _Float32 __nextafterf32(_Float32 __x, _Float32 __y) throw(); 
# 266
extern _Float32 nextdownf32(_Float32 __x) throw(); extern _Float32 __nextdownf32(_Float32 __x) throw(); 
# 268
extern _Float32 nextupf32(_Float32 __x) throw(); extern _Float32 __nextupf32(_Float32 __x) throw(); 
# 272
extern _Float32 remainderf32(_Float32 __x, _Float32 __y) throw(); extern _Float32 __remainderf32(_Float32 __x, _Float32 __y) throw(); 
# 276
extern _Float32 scalbnf32(_Float32 __x, int __n) throw(); extern _Float32 __scalbnf32(_Float32 __x, int __n) throw(); 
# 280
extern int ilogbf32(_Float32 __x) throw(); extern int __ilogbf32(_Float32 __x) throw(); 
# 285
extern long llogbf32(_Float32 __x) throw(); extern long __llogbf32(_Float32 __x) throw(); 
# 290
extern _Float32 scalblnf32(_Float32 __x, long __n) throw(); extern _Float32 __scalblnf32(_Float32 __x, long __n) throw(); 
# 294
extern _Float32 nearbyintf32(_Float32 __x) throw(); extern _Float32 __nearbyintf32(_Float32 __x) throw(); 
# 298
extern _Float32 roundf32(_Float32 __x) throw() __attribute((const)); extern _Float32 __roundf32(_Float32 __x) throw() __attribute((const)); 
# 302
extern _Float32 truncf32(_Float32 __x) throw() __attribute((const)); extern _Float32 __truncf32(_Float32 __x) throw() __attribute((const)); 
# 307
extern _Float32 remquof32(_Float32 __x, _Float32 __y, int * __quo) throw(); extern _Float32 __remquof32(_Float32 __x, _Float32 __y, int * __quo) throw(); 
# 314
extern long lrintf32(_Float32 __x) throw(); extern long __lrintf32(_Float32 __x) throw(); 
# 316
__extension__ extern long long llrintf32(_Float32 __x) throw(); extern long long __llrintf32(_Float32 __x) throw(); 
# 320
extern long lroundf32(_Float32 __x) throw(); extern long __lroundf32(_Float32 __x) throw(); 
# 322
__extension__ extern long long llroundf32(_Float32 __x) throw(); extern long long __llroundf32(_Float32 __x) throw(); 
# 326
extern _Float32 fdimf32(_Float32 __x, _Float32 __y) throw(); extern _Float32 __fdimf32(_Float32 __x, _Float32 __y) throw(); 
# 329
extern _Float32 fmaxf32(_Float32 __x, _Float32 __y) throw() __attribute((const)); extern _Float32 __fmaxf32(_Float32 __x, _Float32 __y) throw() __attribute((const)); 
# 332
extern _Float32 fminf32(_Float32 __x, _Float32 __y) throw() __attribute((const)); extern _Float32 __fminf32(_Float32 __x, _Float32 __y) throw() __attribute((const)); 
# 335
extern _Float32 fmaf32(_Float32 __x, _Float32 __y, _Float32 __z) throw(); extern _Float32 __fmaf32(_Float32 __x, _Float32 __y, _Float32 __z) throw(); 
# 340
extern _Float32 roundevenf32(_Float32 __x) throw() __attribute((const)); extern _Float32 __roundevenf32(_Float32 __x) throw() __attribute((const)); 
# 344
extern __intmax_t fromfpf32(_Float32 __x, int __round, unsigned __width) throw(); extern __intmax_t __fromfpf32(_Float32 __x, int __round, unsigned __width) throw(); 
# 349
extern __uintmax_t ufromfpf32(_Float32 __x, int __round, unsigned __width) throw(); extern __uintmax_t __ufromfpf32(_Float32 __x, int __round, unsigned __width) throw(); 
# 355
extern __intmax_t fromfpxf32(_Float32 __x, int __round, unsigned __width) throw(); extern __intmax_t __fromfpxf32(_Float32 __x, int __round, unsigned __width) throw(); 
# 361
extern __uintmax_t ufromfpxf32(_Float32 __x, int __round, unsigned __width) throw(); extern __uintmax_t __ufromfpxf32(_Float32 __x, int __round, unsigned __width) throw(); 
# 365
extern _Float32 fmaxmagf32(_Float32 __x, _Float32 __y) throw() __attribute((const)); extern _Float32 __fmaxmagf32(_Float32 __x, _Float32 __y) throw() __attribute((const)); 
# 368
extern _Float32 fminmagf32(_Float32 __x, _Float32 __y) throw() __attribute((const)); extern _Float32 __fminmagf32(_Float32 __x, _Float32 __y) throw() __attribute((const)); 
# 371
extern int canonicalizef32(_Float32 * __cx, const _Float32 * __x) throw(); 
# 376
extern int totalorderf32(const _Float32 * __x, const _Float32 * __y) throw()
# 378
 __attribute((__pure__)); 
# 381
extern int totalordermagf32(const _Float32 * __x, const _Float32 * __y) throw()
# 383
 __attribute((__pure__)); 
# 386
extern _Float32 getpayloadf32(const _Float32 * __x) throw(); extern _Float32 __getpayloadf32(const _Float32 * __x) throw(); 
# 389
extern int setpayloadf32(_Float32 * __x, _Float32 __payload) throw(); 
# 392
extern int setpayloadsigf32(_Float32 * __x, _Float32 __payload) throw(); 
# 53 "/usr/include/aarch64-linux-gnu/bits/mathcalls.h" 3
extern _Float64 acosf64(_Float64 __x) throw(); extern _Float64 __acosf64(_Float64 __x) throw(); 
# 55
extern _Float64 asinf64(_Float64 __x) throw(); extern _Float64 __asinf64(_Float64 __x) throw(); 
# 57
extern _Float64 atanf64(_Float64 __x) throw(); extern _Float64 __atanf64(_Float64 __x) throw(); 
# 59
extern _Float64 atan2f64(_Float64 __y, _Float64 __x) throw(); extern _Float64 __atan2f64(_Float64 __y, _Float64 __x) throw(); 
# 62
extern _Float64 cosf64(_Float64 __x) throw(); extern _Float64 __cosf64(_Float64 __x) throw(); 
# 64
extern _Float64 sinf64(_Float64 __x) throw(); extern _Float64 __sinf64(_Float64 __x) throw(); 
# 66
extern _Float64 tanf64(_Float64 __x) throw(); extern _Float64 __tanf64(_Float64 __x) throw(); 
# 71
extern _Float64 coshf64(_Float64 __x) throw(); extern _Float64 __coshf64(_Float64 __x) throw(); 
# 73
extern _Float64 sinhf64(_Float64 __x) throw(); extern _Float64 __sinhf64(_Float64 __x) throw(); 
# 75
extern _Float64 tanhf64(_Float64 __x) throw(); extern _Float64 __tanhf64(_Float64 __x) throw(); 
# 79
extern void sincosf64(_Float64 __x, _Float64 * __sinx, _Float64 * __cosx) throw(); extern void __sincosf64(_Float64 __x, _Float64 * __sinx, _Float64 * __cosx) throw(); 
# 85
extern _Float64 acoshf64(_Float64 __x) throw(); extern _Float64 __acoshf64(_Float64 __x) throw(); 
# 87
extern _Float64 asinhf64(_Float64 __x) throw(); extern _Float64 __asinhf64(_Float64 __x) throw(); 
# 89
extern _Float64 atanhf64(_Float64 __x) throw(); extern _Float64 __atanhf64(_Float64 __x) throw(); 
# 95
extern _Float64 expf64(_Float64 __x) throw(); extern _Float64 __expf64(_Float64 __x) throw(); 
# 98
extern _Float64 frexpf64(_Float64 __x, int * __exponent) throw(); extern _Float64 __frexpf64(_Float64 __x, int * __exponent) throw(); 
# 101
extern _Float64 ldexpf64(_Float64 __x, int __exponent) throw(); extern _Float64 __ldexpf64(_Float64 __x, int __exponent) throw(); 
# 104
extern _Float64 logf64(_Float64 __x) throw(); extern _Float64 __logf64(_Float64 __x) throw(); 
# 107
extern _Float64 log10f64(_Float64 __x) throw(); extern _Float64 __log10f64(_Float64 __x) throw(); 
# 110
extern _Float64 modff64(_Float64 __x, _Float64 * __iptr) throw(); extern _Float64 __modff64(_Float64 __x, _Float64 * __iptr) throw() __attribute((__nonnull__(2))); 
# 114
extern _Float64 exp10f64(_Float64 __x) throw(); extern _Float64 __exp10f64(_Float64 __x) throw(); 
# 119
extern _Float64 expm1f64(_Float64 __x) throw(); extern _Float64 __expm1f64(_Float64 __x) throw(); 
# 122
extern _Float64 log1pf64(_Float64 __x) throw(); extern _Float64 __log1pf64(_Float64 __x) throw(); 
# 125
extern _Float64 logbf64(_Float64 __x) throw(); extern _Float64 __logbf64(_Float64 __x) throw(); 
# 130
extern _Float64 exp2f64(_Float64 __x) throw(); extern _Float64 __exp2f64(_Float64 __x) throw(); 
# 133
extern _Float64 log2f64(_Float64 __x) throw(); extern _Float64 __log2f64(_Float64 __x) throw(); 
# 140
extern _Float64 powf64(_Float64 __x, _Float64 __y) throw(); extern _Float64 __powf64(_Float64 __x, _Float64 __y) throw(); 
# 143
extern _Float64 sqrtf64(_Float64 __x) throw(); extern _Float64 __sqrtf64(_Float64 __x) throw(); 
# 147
extern _Float64 hypotf64(_Float64 __x, _Float64 __y) throw(); extern _Float64 __hypotf64(_Float64 __x, _Float64 __y) throw(); 
# 152
extern _Float64 cbrtf64(_Float64 __x) throw(); extern _Float64 __cbrtf64(_Float64 __x) throw(); 
# 159
extern _Float64 ceilf64(_Float64 __x) throw() __attribute((const)); extern _Float64 __ceilf64(_Float64 __x) throw() __attribute((const)); 
# 162
extern _Float64 fabsf64(_Float64 __x) throw() __attribute((const)); extern _Float64 __fabsf64(_Float64 __x) throw() __attribute((const)); 
# 165
extern _Float64 floorf64(_Float64 __x) throw() __attribute((const)); extern _Float64 __floorf64(_Float64 __x) throw() __attribute((const)); 
# 168
extern _Float64 fmodf64(_Float64 __x, _Float64 __y) throw(); extern _Float64 __fmodf64(_Float64 __x, _Float64 __y) throw(); 
# 196 "/usr/include/aarch64-linux-gnu/bits/mathcalls.h" 3
extern _Float64 copysignf64(_Float64 __x, _Float64 __y) throw() __attribute((const)); extern _Float64 __copysignf64(_Float64 __x, _Float64 __y) throw() __attribute((const)); 
# 201
extern _Float64 nanf64(const char * __tagb) throw(); extern _Float64 __nanf64(const char * __tagb) throw(); 
# 217 "/usr/include/aarch64-linux-gnu/bits/mathcalls.h" 3
extern _Float64 j0f64(_Float64) throw(); extern _Float64 __j0f64(_Float64) throw(); 
# 218
extern _Float64 j1f64(_Float64) throw(); extern _Float64 __j1f64(_Float64) throw(); 
# 219
extern _Float64 jnf64(int, _Float64) throw(); extern _Float64 __jnf64(int, _Float64) throw(); 
# 220
extern _Float64 y0f64(_Float64) throw(); extern _Float64 __y0f64(_Float64) throw(); 
# 221
extern _Float64 y1f64(_Float64) throw(); extern _Float64 __y1f64(_Float64) throw(); 
# 222
extern _Float64 ynf64(int, _Float64) throw(); extern _Float64 __ynf64(int, _Float64) throw(); 
# 228
extern _Float64 erff64(_Float64) throw(); extern _Float64 __erff64(_Float64) throw(); 
# 229
extern _Float64 erfcf64(_Float64) throw(); extern _Float64 __erfcf64(_Float64) throw(); 
# 230
extern _Float64 lgammaf64(_Float64) throw(); extern _Float64 __lgammaf64(_Float64) throw(); 
# 235
extern _Float64 tgammaf64(_Float64) throw(); extern _Float64 __tgammaf64(_Float64) throw(); 
# 249 "/usr/include/aarch64-linux-gnu/bits/mathcalls.h" 3
extern _Float64 lgammaf64_r(_Float64, int * __signgamp) throw(); extern _Float64 __lgammaf64_r(_Float64, int * __signgamp) throw(); 
# 256
extern _Float64 rintf64(_Float64 __x) throw(); extern _Float64 __rintf64(_Float64 __x) throw(); 
# 259
extern _Float64 nextafterf64(_Float64 __x, _Float64 __y) throw(); extern _Float64 __nextafterf64(_Float64 __x, _Float64 __y) throw(); 
# 266
extern _Float64 nextdownf64(_Float64 __x) throw(); extern _Float64 __nextdownf64(_Float64 __x) throw(); 
# 268
extern _Float64 nextupf64(_Float64 __x) throw(); extern _Float64 __nextupf64(_Float64 __x) throw(); 
# 272
extern _Float64 remainderf64(_Float64 __x, _Float64 __y) throw(); extern _Float64 __remainderf64(_Float64 __x, _Float64 __y) throw(); 
# 276
extern _Float64 scalbnf64(_Float64 __x, int __n) throw(); extern _Float64 __scalbnf64(_Float64 __x, int __n) throw(); 
# 280
extern int ilogbf64(_Float64 __x) throw(); extern int __ilogbf64(_Float64 __x) throw(); 
# 285
extern long llogbf64(_Float64 __x) throw(); extern long __llogbf64(_Float64 __x) throw(); 
# 290
extern _Float64 scalblnf64(_Float64 __x, long __n) throw(); extern _Float64 __scalblnf64(_Float64 __x, long __n) throw(); 
# 294
extern _Float64 nearbyintf64(_Float64 __x) throw(); extern _Float64 __nearbyintf64(_Float64 __x) throw(); 
# 298
extern _Float64 roundf64(_Float64 __x) throw() __attribute((const)); extern _Float64 __roundf64(_Float64 __x) throw() __attribute((const)); 
# 302
extern _Float64 truncf64(_Float64 __x) throw() __attribute((const)); extern _Float64 __truncf64(_Float64 __x) throw() __attribute((const)); 
# 307
extern _Float64 remquof64(_Float64 __x, _Float64 __y, int * __quo) throw(); extern _Float64 __remquof64(_Float64 __x, _Float64 __y, int * __quo) throw(); 
# 314
extern long lrintf64(_Float64 __x) throw(); extern long __lrintf64(_Float64 __x) throw(); 
# 316
__extension__ extern long long llrintf64(_Float64 __x) throw(); extern long long __llrintf64(_Float64 __x) throw(); 
# 320
extern long lroundf64(_Float64 __x) throw(); extern long __lroundf64(_Float64 __x) throw(); 
# 322
__extension__ extern long long llroundf64(_Float64 __x) throw(); extern long long __llroundf64(_Float64 __x) throw(); 
# 326
extern _Float64 fdimf64(_Float64 __x, _Float64 __y) throw(); extern _Float64 __fdimf64(_Float64 __x, _Float64 __y) throw(); 
# 329
extern _Float64 fmaxf64(_Float64 __x, _Float64 __y) throw() __attribute((const)); extern _Float64 __fmaxf64(_Float64 __x, _Float64 __y) throw() __attribute((const)); 
# 332
extern _Float64 fminf64(_Float64 __x, _Float64 __y) throw() __attribute((const)); extern _Float64 __fminf64(_Float64 __x, _Float64 __y) throw() __attribute((const)); 
# 335
extern _Float64 fmaf64(_Float64 __x, _Float64 __y, _Float64 __z) throw(); extern _Float64 __fmaf64(_Float64 __x, _Float64 __y, _Float64 __z) throw(); 
# 340
extern _Float64 roundevenf64(_Float64 __x) throw() __attribute((const)); extern _Float64 __roundevenf64(_Float64 __x) throw() __attribute((const)); 
# 344
extern __intmax_t fromfpf64(_Float64 __x, int __round, unsigned __width) throw(); extern __intmax_t __fromfpf64(_Float64 __x, int __round, unsigned __width) throw(); 
# 349
extern __uintmax_t ufromfpf64(_Float64 __x, int __round, unsigned __width) throw(); extern __uintmax_t __ufromfpf64(_Float64 __x, int __round, unsigned __width) throw(); 
# 355
extern __intmax_t fromfpxf64(_Float64 __x, int __round, unsigned __width) throw(); extern __intmax_t __fromfpxf64(_Float64 __x, int __round, unsigned __width) throw(); 
# 361
extern __uintmax_t ufromfpxf64(_Float64 __x, int __round, unsigned __width) throw(); extern __uintmax_t __ufromfpxf64(_Float64 __x, int __round, unsigned __width) throw(); 
# 365
extern _Float64 fmaxmagf64(_Float64 __x, _Float64 __y) throw() __attribute((const)); extern _Float64 __fmaxmagf64(_Float64 __x, _Float64 __y) throw() __attribute((const)); 
# 368
extern _Float64 fminmagf64(_Float64 __x, _Float64 __y) throw() __attribute((const)); extern _Float64 __fminmagf64(_Float64 __x, _Float64 __y) throw() __attribute((const)); 
# 371
extern int canonicalizef64(_Float64 * __cx, const _Float64 * __x) throw(); 
# 376
extern int totalorderf64(const _Float64 * __x, const _Float64 * __y) throw()
# 378
 __attribute((__pure__)); 
# 381
extern int totalordermagf64(const _Float64 * __x, const _Float64 * __y) throw()
# 383
 __attribute((__pure__)); 
# 386
extern _Float64 getpayloadf64(const _Float64 * __x) throw(); extern _Float64 __getpayloadf64(const _Float64 * __x) throw(); 
# 389
extern int setpayloadf64(_Float64 * __x, _Float64 __payload) throw(); 
# 392
extern int setpayloadsigf64(_Float64 * __x, _Float64 __payload) throw(); 
# 53 "/usr/include/aarch64-linux-gnu/bits/mathcalls.h" 3
extern _Float128 acosf128(_Float128 __x) throw(); extern _Float128 __acosf128(_Float128 __x) throw(); 
# 55
extern _Float128 asinf128(_Float128 __x) throw(); extern _Float128 __asinf128(_Float128 __x) throw(); 
# 57
extern _Float128 atanf128(_Float128 __x) throw(); extern _Float128 __atanf128(_Float128 __x) throw(); 
# 59
extern _Float128 atan2f128(_Float128 __y, _Float128 __x) throw(); extern _Float128 __atan2f128(_Float128 __y, _Float128 __x) throw(); 
# 62
extern _Float128 cosf128(_Float128 __x) throw(); extern _Float128 __cosf128(_Float128 __x) throw(); 
# 64
extern _Float128 sinf128(_Float128 __x) throw(); extern _Float128 __sinf128(_Float128 __x) throw(); 
# 66
extern _Float128 tanf128(_Float128 __x) throw(); extern _Float128 __tanf128(_Float128 __x) throw(); 
# 71
extern _Float128 coshf128(_Float128 __x) throw(); extern _Float128 __coshf128(_Float128 __x) throw(); 
# 73
extern _Float128 sinhf128(_Float128 __x) throw(); extern _Float128 __sinhf128(_Float128 __x) throw(); 
# 75
extern _Float128 tanhf128(_Float128 __x) throw(); extern _Float128 __tanhf128(_Float128 __x) throw(); 
# 79
extern void sincosf128(_Float128 __x, _Float128 * __sinx, _Float128 * __cosx) throw(); extern void __sincosf128(_Float128 __x, _Float128 * __sinx, _Float128 * __cosx) throw(); 
# 85
extern _Float128 acoshf128(_Float128 __x) throw(); extern _Float128 __acoshf128(_Float128 __x) throw(); 
# 87
extern _Float128 asinhf128(_Float128 __x) throw(); extern _Float128 __asinhf128(_Float128 __x) throw(); 
# 89
extern _Float128 atanhf128(_Float128 __x) throw(); extern _Float128 __atanhf128(_Float128 __x) throw(); 
# 95
extern _Float128 expf128(_Float128 __x) throw(); extern _Float128 __expf128(_Float128 __x) throw(); 
# 98
extern _Float128 frexpf128(_Float128 __x, int * __exponent) throw(); extern _Float128 __frexpf128(_Float128 __x, int * __exponent) throw(); 
# 101
extern _Float128 ldexpf128(_Float128 __x, int __exponent) throw(); extern _Float128 __ldexpf128(_Float128 __x, int __exponent) throw(); 
# 104
extern _Float128 logf128(_Float128 __x) throw(); extern _Float128 __logf128(_Float128 __x) throw(); 
# 107
extern _Float128 log10f128(_Float128 __x) throw(); extern _Float128 __log10f128(_Float128 __x) throw(); 
# 110
extern _Float128 modff128(_Float128 __x, _Float128 * __iptr) throw(); extern _Float128 __modff128(_Float128 __x, _Float128 * __iptr) throw() __attribute((__nonnull__(2))); 
# 114
extern _Float128 exp10f128(_Float128 __x) throw(); extern _Float128 __exp10f128(_Float128 __x) throw(); 
# 119
extern _Float128 expm1f128(_Float128 __x) throw(); extern _Float128 __expm1f128(_Float128 __x) throw(); 
# 122
extern _Float128 log1pf128(_Float128 __x) throw(); extern _Float128 __log1pf128(_Float128 __x) throw(); 
# 125
extern _Float128 logbf128(_Float128 __x) throw(); extern _Float128 __logbf128(_Float128 __x) throw(); 
# 130
extern _Float128 exp2f128(_Float128 __x) throw(); extern _Float128 __exp2f128(_Float128 __x) throw(); 
# 133
extern _Float128 log2f128(_Float128 __x) throw(); extern _Float128 __log2f128(_Float128 __x) throw(); 
# 140
extern _Float128 powf128(_Float128 __x, _Float128 __y) throw(); extern _Float128 __powf128(_Float128 __x, _Float128 __y) throw(); 
# 143
extern _Float128 sqrtf128(_Float128 __x) throw(); extern _Float128 __sqrtf128(_Float128 __x) throw(); 
# 147
extern _Float128 hypotf128(_Float128 __x, _Float128 __y) throw(); extern _Float128 __hypotf128(_Float128 __x, _Float128 __y) throw(); 
# 152
extern _Float128 cbrtf128(_Float128 __x) throw(); extern _Float128 __cbrtf128(_Float128 __x) throw(); 
# 159
extern _Float128 ceilf128(_Float128 __x) throw() __attribute((const)); extern _Float128 __ceilf128(_Float128 __x) throw() __attribute((const)); 
# 162
extern _Float128 fabsf128(_Float128 __x) throw() __attribute((const)); extern _Float128 __fabsf128(_Float128 __x) throw() __attribute((const)); 
# 165
extern _Float128 floorf128(_Float128 __x) throw() __attribute((const)); extern _Float128 __floorf128(_Float128 __x) throw() __attribute((const)); 
# 168
extern _Float128 fmodf128(_Float128 __x, _Float128 __y) throw(); extern _Float128 __fmodf128(_Float128 __x, _Float128 __y) throw(); 
# 196 "/usr/include/aarch64-linux-gnu/bits/mathcalls.h" 3
extern _Float128 copysignf128(_Float128 __x, _Float128 __y) throw() __attribute((const)); extern _Float128 __copysignf128(_Float128 __x, _Float128 __y) throw() __attribute((const)); 
# 201
extern _Float128 nanf128(const char * __tagb) throw(); extern _Float128 __nanf128(const char * __tagb) throw(); 
# 217 "/usr/include/aarch64-linux-gnu/bits/mathcalls.h" 3
extern _Float128 j0f128(_Float128) throw(); extern _Float128 __j0f128(_Float128) throw(); 
# 218
extern _Float128 j1f128(_Float128) throw(); extern _Float128 __j1f128(_Float128) throw(); 
# 219
extern _Float128 jnf128(int, _Float128) throw(); extern _Float128 __jnf128(int, _Float128) throw(); 
# 220
extern _Float128 y0f128(_Float128) throw(); extern _Float128 __y0f128(_Float128) throw(); 
# 221
extern _Float128 y1f128(_Float128) throw(); extern _Float128 __y1f128(_Float128) throw(); 
# 222
extern _Float128 ynf128(int, _Float128) throw(); extern _Float128 __ynf128(int, _Float128) throw(); 
# 228
extern _Float128 erff128(_Float128) throw(); extern _Float128 __erff128(_Float128) throw(); 
# 229
extern _Float128 erfcf128(_Float128) throw(); extern _Float128 __erfcf128(_Float128) throw(); 
# 230
extern _Float128 lgammaf128(_Float128) throw(); extern _Float128 __lgammaf128(_Float128) throw(); 
# 235
extern _Float128 tgammaf128(_Float128) throw(); extern _Float128 __tgammaf128(_Float128) throw(); 
# 249 "/usr/include/aarch64-linux-gnu/bits/mathcalls.h" 3
extern _Float128 lgammaf128_r(_Float128, int * __signgamp) throw(); extern _Float128 __lgammaf128_r(_Float128, int * __signgamp) throw(); 
# 256
extern _Float128 rintf128(_Float128 __x) throw(); extern _Float128 __rintf128(_Float128 __x) throw(); 
# 259
extern _Float128 nextafterf128(_Float128 __x, _Float128 __y) throw(); extern _Float128 __nextafterf128(_Float128 __x, _Float128 __y) throw(); 
# 266
extern _Float128 nextdownf128(_Float128 __x) throw(); extern _Float128 __nextdownf128(_Float128 __x) throw(); 
# 268
extern _Float128 nextupf128(_Float128 __x) throw(); extern _Float128 __nextupf128(_Float128 __x) throw(); 
# 272
extern _Float128 remainderf128(_Float128 __x, _Float128 __y) throw(); extern _Float128 __remainderf128(_Float128 __x, _Float128 __y) throw(); 
# 276
extern _Float128 scalbnf128(_Float128 __x, int __n) throw(); extern _Float128 __scalbnf128(_Float128 __x, int __n) throw(); 
# 280
extern int ilogbf128(_Float128 __x) throw(); extern int __ilogbf128(_Float128 __x) throw(); 
# 285
extern long llogbf128(_Float128 __x) throw(); extern long __llogbf128(_Float128 __x) throw(); 
# 290
extern _Float128 scalblnf128(_Float128 __x, long __n) throw(); extern _Float128 __scalblnf128(_Float128 __x, long __n) throw(); 
# 294
extern _Float128 nearbyintf128(_Float128 __x) throw(); extern _Float128 __nearbyintf128(_Float128 __x) throw(); 
# 298
extern _Float128 roundf128(_Float128 __x) throw() __attribute((const)); extern _Float128 __roundf128(_Float128 __x) throw() __attribute((const)); 
# 302
extern _Float128 truncf128(_Float128 __x) throw() __attribute((const)); extern _Float128 __truncf128(_Float128 __x) throw() __attribute((const)); 
# 307
extern _Float128 remquof128(_Float128 __x, _Float128 __y, int * __quo) throw(); extern _Float128 __remquof128(_Float128 __x, _Float128 __y, int * __quo) throw(); 
# 314
extern long lrintf128(_Float128 __x) throw(); extern long __lrintf128(_Float128 __x) throw(); 
# 316
__extension__ extern long long llrintf128(_Float128 __x) throw(); extern long long __llrintf128(_Float128 __x) throw(); 
# 320
extern long lroundf128(_Float128 __x) throw(); extern long __lroundf128(_Float128 __x) throw(); 
# 322
__extension__ extern long long llroundf128(_Float128 __x) throw(); extern long long __llroundf128(_Float128 __x) throw(); 
# 326
extern _Float128 fdimf128(_Float128 __x, _Float128 __y) throw(); extern _Float128 __fdimf128(_Float128 __x, _Float128 __y) throw(); 
# 329
extern _Float128 fmaxf128(_Float128 __x, _Float128 __y) throw() __attribute((const)); extern _Float128 __fmaxf128(_Float128 __x, _Float128 __y) throw() __attribute((const)); 
# 332
extern _Float128 fminf128(_Float128 __x, _Float128 __y) throw() __attribute((const)); extern _Float128 __fminf128(_Float128 __x, _Float128 __y) throw() __attribute((const)); 
# 335
extern _Float128 fmaf128(_Float128 __x, _Float128 __y, _Float128 __z) throw(); extern _Float128 __fmaf128(_Float128 __x, _Float128 __y, _Float128 __z) throw(); 
# 340
extern _Float128 roundevenf128(_Float128 __x) throw() __attribute((const)); extern _Float128 __roundevenf128(_Float128 __x) throw() __attribute((const)); 
# 344
extern __intmax_t fromfpf128(_Float128 __x, int __round, unsigned __width) throw(); extern __intmax_t __fromfpf128(_Float128 __x, int __round, unsigned __width) throw(); 
# 349
extern __uintmax_t ufromfpf128(_Float128 __x, int __round, unsigned __width) throw(); extern __uintmax_t __ufromfpf128(_Float128 __x, int __round, unsigned __width) throw(); 
# 355
extern __intmax_t fromfpxf128(_Float128 __x, int __round, unsigned __width) throw(); extern __intmax_t __fromfpxf128(_Float128 __x, int __round, unsigned __width) throw(); 
# 361
extern __uintmax_t ufromfpxf128(_Float128 __x, int __round, unsigned __width) throw(); extern __uintmax_t __ufromfpxf128(_Float128 __x, int __round, unsigned __width) throw(); 
# 365
extern _Float128 fmaxmagf128(_Float128 __x, _Float128 __y) throw() __attribute((const)); extern _Float128 __fmaxmagf128(_Float128 __x, _Float128 __y) throw() __attribute((const)); 
# 368
extern _Float128 fminmagf128(_Float128 __x, _Float128 __y) throw() __attribute((const)); extern _Float128 __fminmagf128(_Float128 __x, _Float128 __y) throw() __attribute((const)); 
# 371
extern int canonicalizef128(_Float128 * __cx, const _Float128 * __x) throw(); 
# 376
extern int totalorderf128(const _Float128 * __x, const _Float128 * __y) throw()
# 378
 __attribute((__pure__)); 
# 381
extern int totalordermagf128(const _Float128 * __x, const _Float128 * __y) throw()
# 383
 __attribute((__pure__)); 
# 386
extern _Float128 getpayloadf128(const _Float128 * __x) throw(); extern _Float128 __getpayloadf128(const _Float128 * __x) throw(); 
# 389
extern int setpayloadf128(_Float128 * __x, _Float128 __payload) throw(); 
# 392
extern int setpayloadsigf128(_Float128 * __x, _Float128 __payload) throw(); 
# 53 "/usr/include/aarch64-linux-gnu/bits/mathcalls.h" 3
extern _Float32x acosf32x(_Float32x __x) throw(); extern _Float32x __acosf32x(_Float32x __x) throw(); 
# 55
extern _Float32x asinf32x(_Float32x __x) throw(); extern _Float32x __asinf32x(_Float32x __x) throw(); 
# 57
extern _Float32x atanf32x(_Float32x __x) throw(); extern _Float32x __atanf32x(_Float32x __x) throw(); 
# 59
extern _Float32x atan2f32x(_Float32x __y, _Float32x __x) throw(); extern _Float32x __atan2f32x(_Float32x __y, _Float32x __x) throw(); 
# 62
extern _Float32x cosf32x(_Float32x __x) throw(); extern _Float32x __cosf32x(_Float32x __x) throw(); 
# 64
extern _Float32x sinf32x(_Float32x __x) throw(); extern _Float32x __sinf32x(_Float32x __x) throw(); 
# 66
extern _Float32x tanf32x(_Float32x __x) throw(); extern _Float32x __tanf32x(_Float32x __x) throw(); 
# 71
extern _Float32x coshf32x(_Float32x __x) throw(); extern _Float32x __coshf32x(_Float32x __x) throw(); 
# 73
extern _Float32x sinhf32x(_Float32x __x) throw(); extern _Float32x __sinhf32x(_Float32x __x) throw(); 
# 75
extern _Float32x tanhf32x(_Float32x __x) throw(); extern _Float32x __tanhf32x(_Float32x __x) throw(); 
# 79
extern void sincosf32x(_Float32x __x, _Float32x * __sinx, _Float32x * __cosx) throw(); extern void __sincosf32x(_Float32x __x, _Float32x * __sinx, _Float32x * __cosx) throw(); 
# 85
extern _Float32x acoshf32x(_Float32x __x) throw(); extern _Float32x __acoshf32x(_Float32x __x) throw(); 
# 87
extern _Float32x asinhf32x(_Float32x __x) throw(); extern _Float32x __asinhf32x(_Float32x __x) throw(); 
# 89
extern _Float32x atanhf32x(_Float32x __x) throw(); extern _Float32x __atanhf32x(_Float32x __x) throw(); 
# 95
extern _Float32x expf32x(_Float32x __x) throw(); extern _Float32x __expf32x(_Float32x __x) throw(); 
# 98
extern _Float32x frexpf32x(_Float32x __x, int * __exponent) throw(); extern _Float32x __frexpf32x(_Float32x __x, int * __exponent) throw(); 
# 101
extern _Float32x ldexpf32x(_Float32x __x, int __exponent) throw(); extern _Float32x __ldexpf32x(_Float32x __x, int __exponent) throw(); 
# 104
extern _Float32x logf32x(_Float32x __x) throw(); extern _Float32x __logf32x(_Float32x __x) throw(); 
# 107
extern _Float32x log10f32x(_Float32x __x) throw(); extern _Float32x __log10f32x(_Float32x __x) throw(); 
# 110
extern _Float32x modff32x(_Float32x __x, _Float32x * __iptr) throw(); extern _Float32x __modff32x(_Float32x __x, _Float32x * __iptr) throw() __attribute((__nonnull__(2))); 
# 114
extern _Float32x exp10f32x(_Float32x __x) throw(); extern _Float32x __exp10f32x(_Float32x __x) throw(); 
# 119
extern _Float32x expm1f32x(_Float32x __x) throw(); extern _Float32x __expm1f32x(_Float32x __x) throw(); 
# 122
extern _Float32x log1pf32x(_Float32x __x) throw(); extern _Float32x __log1pf32x(_Float32x __x) throw(); 
# 125
extern _Float32x logbf32x(_Float32x __x) throw(); extern _Float32x __logbf32x(_Float32x __x) throw(); 
# 130
extern _Float32x exp2f32x(_Float32x __x) throw(); extern _Float32x __exp2f32x(_Float32x __x) throw(); 
# 133
extern _Float32x log2f32x(_Float32x __x) throw(); extern _Float32x __log2f32x(_Float32x __x) throw(); 
# 140
extern _Float32x powf32x(_Float32x __x, _Float32x __y) throw(); extern _Float32x __powf32x(_Float32x __x, _Float32x __y) throw(); 
# 143
extern _Float32x sqrtf32x(_Float32x __x) throw(); extern _Float32x __sqrtf32x(_Float32x __x) throw(); 
# 147
extern _Float32x hypotf32x(_Float32x __x, _Float32x __y) throw(); extern _Float32x __hypotf32x(_Float32x __x, _Float32x __y) throw(); 
# 152
extern _Float32x cbrtf32x(_Float32x __x) throw(); extern _Float32x __cbrtf32x(_Float32x __x) throw(); 
# 159
extern _Float32x ceilf32x(_Float32x __x) throw() __attribute((const)); extern _Float32x __ceilf32x(_Float32x __x) throw() __attribute((const)); 
# 162
extern _Float32x fabsf32x(_Float32x __x) throw() __attribute((const)); extern _Float32x __fabsf32x(_Float32x __x) throw() __attribute((const)); 
# 165
extern _Float32x floorf32x(_Float32x __x) throw() __attribute((const)); extern _Float32x __floorf32x(_Float32x __x) throw() __attribute((const)); 
# 168
extern _Float32x fmodf32x(_Float32x __x, _Float32x __y) throw(); extern _Float32x __fmodf32x(_Float32x __x, _Float32x __y) throw(); 
# 196 "/usr/include/aarch64-linux-gnu/bits/mathcalls.h" 3
extern _Float32x copysignf32x(_Float32x __x, _Float32x __y) throw() __attribute((const)); extern _Float32x __copysignf32x(_Float32x __x, _Float32x __y) throw() __attribute((const)); 
# 201
extern _Float32x nanf32x(const char * __tagb) throw(); extern _Float32x __nanf32x(const char * __tagb) throw(); 
# 217 "/usr/include/aarch64-linux-gnu/bits/mathcalls.h" 3
extern _Float32x j0f32x(_Float32x) throw(); extern _Float32x __j0f32x(_Float32x) throw(); 
# 218
extern _Float32x j1f32x(_Float32x) throw(); extern _Float32x __j1f32x(_Float32x) throw(); 
# 219
extern _Float32x jnf32x(int, _Float32x) throw(); extern _Float32x __jnf32x(int, _Float32x) throw(); 
# 220
extern _Float32x y0f32x(_Float32x) throw(); extern _Float32x __y0f32x(_Float32x) throw(); 
# 221
extern _Float32x y1f32x(_Float32x) throw(); extern _Float32x __y1f32x(_Float32x) throw(); 
# 222
extern _Float32x ynf32x(int, _Float32x) throw(); extern _Float32x __ynf32x(int, _Float32x) throw(); 
# 228
extern _Float32x erff32x(_Float32x) throw(); extern _Float32x __erff32x(_Float32x) throw(); 
# 229
extern _Float32x erfcf32x(_Float32x) throw(); extern _Float32x __erfcf32x(_Float32x) throw(); 
# 230
extern _Float32x lgammaf32x(_Float32x) throw(); extern _Float32x __lgammaf32x(_Float32x) throw(); 
# 235
extern _Float32x tgammaf32x(_Float32x) throw(); extern _Float32x __tgammaf32x(_Float32x) throw(); 
# 249 "/usr/include/aarch64-linux-gnu/bits/mathcalls.h" 3
extern _Float32x lgammaf32x_r(_Float32x, int * __signgamp) throw(); extern _Float32x __lgammaf32x_r(_Float32x, int * __signgamp) throw(); 
# 256
extern _Float32x rintf32x(_Float32x __x) throw(); extern _Float32x __rintf32x(_Float32x __x) throw(); 
# 259
extern _Float32x nextafterf32x(_Float32x __x, _Float32x __y) throw(); extern _Float32x __nextafterf32x(_Float32x __x, _Float32x __y) throw(); 
# 266
extern _Float32x nextdownf32x(_Float32x __x) throw(); extern _Float32x __nextdownf32x(_Float32x __x) throw(); 
# 268
extern _Float32x nextupf32x(_Float32x __x) throw(); extern _Float32x __nextupf32x(_Float32x __x) throw(); 
# 272
extern _Float32x remainderf32x(_Float32x __x, _Float32x __y) throw(); extern _Float32x __remainderf32x(_Float32x __x, _Float32x __y) throw(); 
# 276
extern _Float32x scalbnf32x(_Float32x __x, int __n) throw(); extern _Float32x __scalbnf32x(_Float32x __x, int __n) throw(); 
# 280
extern int ilogbf32x(_Float32x __x) throw(); extern int __ilogbf32x(_Float32x __x) throw(); 
# 285
extern long llogbf32x(_Float32x __x) throw(); extern long __llogbf32x(_Float32x __x) throw(); 
# 290
extern _Float32x scalblnf32x(_Float32x __x, long __n) throw(); extern _Float32x __scalblnf32x(_Float32x __x, long __n) throw(); 
# 294
extern _Float32x nearbyintf32x(_Float32x __x) throw(); extern _Float32x __nearbyintf32x(_Float32x __x) throw(); 
# 298
extern _Float32x roundf32x(_Float32x __x) throw() __attribute((const)); extern _Float32x __roundf32x(_Float32x __x) throw() __attribute((const)); 
# 302
extern _Float32x truncf32x(_Float32x __x) throw() __attribute((const)); extern _Float32x __truncf32x(_Float32x __x) throw() __attribute((const)); 
# 307
extern _Float32x remquof32x(_Float32x __x, _Float32x __y, int * __quo) throw(); extern _Float32x __remquof32x(_Float32x __x, _Float32x __y, int * __quo) throw(); 
# 314
extern long lrintf32x(_Float32x __x) throw(); extern long __lrintf32x(_Float32x __x) throw(); 
# 316
__extension__ extern long long llrintf32x(_Float32x __x) throw(); extern long long __llrintf32x(_Float32x __x) throw(); 
# 320
extern long lroundf32x(_Float32x __x) throw(); extern long __lroundf32x(_Float32x __x) throw(); 
# 322
__extension__ extern long long llroundf32x(_Float32x __x) throw(); extern long long __llroundf32x(_Float32x __x) throw(); 
# 326
extern _Float32x fdimf32x(_Float32x __x, _Float32x __y) throw(); extern _Float32x __fdimf32x(_Float32x __x, _Float32x __y) throw(); 
# 329
extern _Float32x fmaxf32x(_Float32x __x, _Float32x __y) throw() __attribute((const)); extern _Float32x __fmaxf32x(_Float32x __x, _Float32x __y) throw() __attribute((const)); 
# 332
extern _Float32x fminf32x(_Float32x __x, _Float32x __y) throw() __attribute((const)); extern _Float32x __fminf32x(_Float32x __x, _Float32x __y) throw() __attribute((const)); 
# 335
extern _Float32x fmaf32x(_Float32x __x, _Float32x __y, _Float32x __z) throw(); extern _Float32x __fmaf32x(_Float32x __x, _Float32x __y, _Float32x __z) throw(); 
# 340
extern _Float32x roundevenf32x(_Float32x __x) throw() __attribute((const)); extern _Float32x __roundevenf32x(_Float32x __x) throw() __attribute((const)); 
# 344
extern __intmax_t fromfpf32x(_Float32x __x, int __round, unsigned __width) throw(); extern __intmax_t __fromfpf32x(_Float32x __x, int __round, unsigned __width) throw(); 
# 349
extern __uintmax_t ufromfpf32x(_Float32x __x, int __round, unsigned __width) throw(); extern __uintmax_t __ufromfpf32x(_Float32x __x, int __round, unsigned __width) throw(); 
# 355
extern __intmax_t fromfpxf32x(_Float32x __x, int __round, unsigned __width) throw(); extern __intmax_t __fromfpxf32x(_Float32x __x, int __round, unsigned __width) throw(); 
# 361
extern __uintmax_t ufromfpxf32x(_Float32x __x, int __round, unsigned __width) throw(); extern __uintmax_t __ufromfpxf32x(_Float32x __x, int __round, unsigned __width) throw(); 
# 365
extern _Float32x fmaxmagf32x(_Float32x __x, _Float32x __y) throw() __attribute((const)); extern _Float32x __fmaxmagf32x(_Float32x __x, _Float32x __y) throw() __attribute((const)); 
# 368
extern _Float32x fminmagf32x(_Float32x __x, _Float32x __y) throw() __attribute((const)); extern _Float32x __fminmagf32x(_Float32x __x, _Float32x __y) throw() __attribute((const)); 
# 371
extern int canonicalizef32x(_Float32x * __cx, const _Float32x * __x) throw(); 
# 376
extern int totalorderf32x(const _Float32x * __x, const _Float32x * __y) throw()
# 378
 __attribute((__pure__)); 
# 381
extern int totalordermagf32x(const _Float32x * __x, const _Float32x * __y) throw()
# 383
 __attribute((__pure__)); 
# 386
extern _Float32x getpayloadf32x(const _Float32x * __x) throw(); extern _Float32x __getpayloadf32x(const _Float32x * __x) throw(); 
# 389
extern int setpayloadf32x(_Float32x * __x, _Float32x __payload) throw(); 
# 392
extern int setpayloadsigf32x(_Float32x * __x, _Float32x __payload) throw(); 
# 53 "/usr/include/aarch64-linux-gnu/bits/mathcalls.h" 3
extern _Float64x acosf64x(_Float64x __x) throw(); extern _Float64x __acosf64x(_Float64x __x) throw(); 
# 55
extern _Float64x asinf64x(_Float64x __x) throw(); extern _Float64x __asinf64x(_Float64x __x) throw(); 
# 57
extern _Float64x atanf64x(_Float64x __x) throw(); extern _Float64x __atanf64x(_Float64x __x) throw(); 
# 59
extern _Float64x atan2f64x(_Float64x __y, _Float64x __x) throw(); extern _Float64x __atan2f64x(_Float64x __y, _Float64x __x) throw(); 
# 62
extern _Float64x cosf64x(_Float64x __x) throw(); extern _Float64x __cosf64x(_Float64x __x) throw(); 
# 64
extern _Float64x sinf64x(_Float64x __x) throw(); extern _Float64x __sinf64x(_Float64x __x) throw(); 
# 66
extern _Float64x tanf64x(_Float64x __x) throw(); extern _Float64x __tanf64x(_Float64x __x) throw(); 
# 71
extern _Float64x coshf64x(_Float64x __x) throw(); extern _Float64x __coshf64x(_Float64x __x) throw(); 
# 73
extern _Float64x sinhf64x(_Float64x __x) throw(); extern _Float64x __sinhf64x(_Float64x __x) throw(); 
# 75
extern _Float64x tanhf64x(_Float64x __x) throw(); extern _Float64x __tanhf64x(_Float64x __x) throw(); 
# 79
extern void sincosf64x(_Float64x __x, _Float64x * __sinx, _Float64x * __cosx) throw(); extern void __sincosf64x(_Float64x __x, _Float64x * __sinx, _Float64x * __cosx) throw(); 
# 85
extern _Float64x acoshf64x(_Float64x __x) throw(); extern _Float64x __acoshf64x(_Float64x __x) throw(); 
# 87
extern _Float64x asinhf64x(_Float64x __x) throw(); extern _Float64x __asinhf64x(_Float64x __x) throw(); 
# 89
extern _Float64x atanhf64x(_Float64x __x) throw(); extern _Float64x __atanhf64x(_Float64x __x) throw(); 
# 95
extern _Float64x expf64x(_Float64x __x) throw(); extern _Float64x __expf64x(_Float64x __x) throw(); 
# 98
extern _Float64x frexpf64x(_Float64x __x, int * __exponent) throw(); extern _Float64x __frexpf64x(_Float64x __x, int * __exponent) throw(); 
# 101
extern _Float64x ldexpf64x(_Float64x __x, int __exponent) throw(); extern _Float64x __ldexpf64x(_Float64x __x, int __exponent) throw(); 
# 104
extern _Float64x logf64x(_Float64x __x) throw(); extern _Float64x __logf64x(_Float64x __x) throw(); 
# 107
extern _Float64x log10f64x(_Float64x __x) throw(); extern _Float64x __log10f64x(_Float64x __x) throw(); 
# 110
extern _Float64x modff64x(_Float64x __x, _Float64x * __iptr) throw(); extern _Float64x __modff64x(_Float64x __x, _Float64x * __iptr) throw() __attribute((__nonnull__(2))); 
# 114
extern _Float64x exp10f64x(_Float64x __x) throw(); extern _Float64x __exp10f64x(_Float64x __x) throw(); 
# 119
extern _Float64x expm1f64x(_Float64x __x) throw(); extern _Float64x __expm1f64x(_Float64x __x) throw(); 
# 122
extern _Float64x log1pf64x(_Float64x __x) throw(); extern _Float64x __log1pf64x(_Float64x __x) throw(); 
# 125
extern _Float64x logbf64x(_Float64x __x) throw(); extern _Float64x __logbf64x(_Float64x __x) throw(); 
# 130
extern _Float64x exp2f64x(_Float64x __x) throw(); extern _Float64x __exp2f64x(_Float64x __x) throw(); 
# 133
extern _Float64x log2f64x(_Float64x __x) throw(); extern _Float64x __log2f64x(_Float64x __x) throw(); 
# 140
extern _Float64x powf64x(_Float64x __x, _Float64x __y) throw(); extern _Float64x __powf64x(_Float64x __x, _Float64x __y) throw(); 
# 143
extern _Float64x sqrtf64x(_Float64x __x) throw(); extern _Float64x __sqrtf64x(_Float64x __x) throw(); 
# 147
extern _Float64x hypotf64x(_Float64x __x, _Float64x __y) throw(); extern _Float64x __hypotf64x(_Float64x __x, _Float64x __y) throw(); 
# 152
extern _Float64x cbrtf64x(_Float64x __x) throw(); extern _Float64x __cbrtf64x(_Float64x __x) throw(); 
# 159
extern _Float64x ceilf64x(_Float64x __x) throw() __attribute((const)); extern _Float64x __ceilf64x(_Float64x __x) throw() __attribute((const)); 
# 162
extern _Float64x fabsf64x(_Float64x __x) throw() __attribute((const)); extern _Float64x __fabsf64x(_Float64x __x) throw() __attribute((const)); 
# 165
extern _Float64x floorf64x(_Float64x __x) throw() __attribute((const)); extern _Float64x __floorf64x(_Float64x __x) throw() __attribute((const)); 
# 168
extern _Float64x fmodf64x(_Float64x __x, _Float64x __y) throw(); extern _Float64x __fmodf64x(_Float64x __x, _Float64x __y) throw(); 
# 196 "/usr/include/aarch64-linux-gnu/bits/mathcalls.h" 3
extern _Float64x copysignf64x(_Float64x __x, _Float64x __y) throw() __attribute((const)); extern _Float64x __copysignf64x(_Float64x __x, _Float64x __y) throw() __attribute((const)); 
# 201
extern _Float64x nanf64x(const char * __tagb) throw(); extern _Float64x __nanf64x(const char * __tagb) throw(); 
# 217 "/usr/include/aarch64-linux-gnu/bits/mathcalls.h" 3
extern _Float64x j0f64x(_Float64x) throw(); extern _Float64x __j0f64x(_Float64x) throw(); 
# 218
extern _Float64x j1f64x(_Float64x) throw(); extern _Float64x __j1f64x(_Float64x) throw(); 
# 219
extern _Float64x jnf64x(int, _Float64x) throw(); extern _Float64x __jnf64x(int, _Float64x) throw(); 
# 220
extern _Float64x y0f64x(_Float64x) throw(); extern _Float64x __y0f64x(_Float64x) throw(); 
# 221
extern _Float64x y1f64x(_Float64x) throw(); extern _Float64x __y1f64x(_Float64x) throw(); 
# 222
extern _Float64x ynf64x(int, _Float64x) throw(); extern _Float64x __ynf64x(int, _Float64x) throw(); 
# 228
extern _Float64x erff64x(_Float64x) throw(); extern _Float64x __erff64x(_Float64x) throw(); 
# 229
extern _Float64x erfcf64x(_Float64x) throw(); extern _Float64x __erfcf64x(_Float64x) throw(); 
# 230
extern _Float64x lgammaf64x(_Float64x) throw(); extern _Float64x __lgammaf64x(_Float64x) throw(); 
# 235
extern _Float64x tgammaf64x(_Float64x) throw(); extern _Float64x __tgammaf64x(_Float64x) throw(); 
# 249 "/usr/include/aarch64-linux-gnu/bits/mathcalls.h" 3
extern _Float64x lgammaf64x_r(_Float64x, int * __signgamp) throw(); extern _Float64x __lgammaf64x_r(_Float64x, int * __signgamp) throw(); 
# 256
extern _Float64x rintf64x(_Float64x __x) throw(); extern _Float64x __rintf64x(_Float64x __x) throw(); 
# 259
extern _Float64x nextafterf64x(_Float64x __x, _Float64x __y) throw(); extern _Float64x __nextafterf64x(_Float64x __x, _Float64x __y) throw(); 
# 266
extern _Float64x nextdownf64x(_Float64x __x) throw(); extern _Float64x __nextdownf64x(_Float64x __x) throw(); 
# 268
extern _Float64x nextupf64x(_Float64x __x) throw(); extern _Float64x __nextupf64x(_Float64x __x) throw(); 
# 272
extern _Float64x remainderf64x(_Float64x __x, _Float64x __y) throw(); extern _Float64x __remainderf64x(_Float64x __x, _Float64x __y) throw(); 
# 276
extern _Float64x scalbnf64x(_Float64x __x, int __n) throw(); extern _Float64x __scalbnf64x(_Float64x __x, int __n) throw(); 
# 280
extern int ilogbf64x(_Float64x __x) throw(); extern int __ilogbf64x(_Float64x __x) throw(); 
# 285
extern long llogbf64x(_Float64x __x) throw(); extern long __llogbf64x(_Float64x __x) throw(); 
# 290
extern _Float64x scalblnf64x(_Float64x __x, long __n) throw(); extern _Float64x __scalblnf64x(_Float64x __x, long __n) throw(); 
# 294
extern _Float64x nearbyintf64x(_Float64x __x) throw(); extern _Float64x __nearbyintf64x(_Float64x __x) throw(); 
# 298
extern _Float64x roundf64x(_Float64x __x) throw() __attribute((const)); extern _Float64x __roundf64x(_Float64x __x) throw() __attribute((const)); 
# 302
extern _Float64x truncf64x(_Float64x __x) throw() __attribute((const)); extern _Float64x __truncf64x(_Float64x __x) throw() __attribute((const)); 
# 307
extern _Float64x remquof64x(_Float64x __x, _Float64x __y, int * __quo) throw(); extern _Float64x __remquof64x(_Float64x __x, _Float64x __y, int * __quo) throw(); 
# 314
extern long lrintf64x(_Float64x __x) throw(); extern long __lrintf64x(_Float64x __x) throw(); 
# 316
__extension__ extern long long llrintf64x(_Float64x __x) throw(); extern long long __llrintf64x(_Float64x __x) throw(); 
# 320
extern long lroundf64x(_Float64x __x) throw(); extern long __lroundf64x(_Float64x __x) throw(); 
# 322
__extension__ extern long long llroundf64x(_Float64x __x) throw(); extern long long __llroundf64x(_Float64x __x) throw(); 
# 326
extern _Float64x fdimf64x(_Float64x __x, _Float64x __y) throw(); extern _Float64x __fdimf64x(_Float64x __x, _Float64x __y) throw(); 
# 329
extern _Float64x fmaxf64x(_Float64x __x, _Float64x __y) throw() __attribute((const)); extern _Float64x __fmaxf64x(_Float64x __x, _Float64x __y) throw() __attribute((const)); 
# 332
extern _Float64x fminf64x(_Float64x __x, _Float64x __y) throw() __attribute((const)); extern _Float64x __fminf64x(_Float64x __x, _Float64x __y) throw() __attribute((const)); 
# 335
extern _Float64x fmaf64x(_Float64x __x, _Float64x __y, _Float64x __z) throw(); extern _Float64x __fmaf64x(_Float64x __x, _Float64x __y, _Float64x __z) throw(); 
# 340
extern _Float64x roundevenf64x(_Float64x __x) throw() __attribute((const)); extern _Float64x __roundevenf64x(_Float64x __x) throw() __attribute((const)); 
# 344
extern __intmax_t fromfpf64x(_Float64x __x, int __round, unsigned __width) throw(); extern __intmax_t __fromfpf64x(_Float64x __x, int __round, unsigned __width) throw(); 
# 349
extern __uintmax_t ufromfpf64x(_Float64x __x, int __round, unsigned __width) throw(); extern __uintmax_t __ufromfpf64x(_Float64x __x, int __round, unsigned __width) throw(); 
# 355
extern __intmax_t fromfpxf64x(_Float64x __x, int __round, unsigned __width) throw(); extern __intmax_t __fromfpxf64x(_Float64x __x, int __round, unsigned __width) throw(); 
# 361
extern __uintmax_t ufromfpxf64x(_Float64x __x, int __round, unsigned __width) throw(); extern __uintmax_t __ufromfpxf64x(_Float64x __x, int __round, unsigned __width) throw(); 
# 365
extern _Float64x fmaxmagf64x(_Float64x __x, _Float64x __y) throw() __attribute((const)); extern _Float64x __fmaxmagf64x(_Float64x __x, _Float64x __y) throw() __attribute((const)); 
# 368
extern _Float64x fminmagf64x(_Float64x __x, _Float64x __y) throw() __attribute((const)); extern _Float64x __fminmagf64x(_Float64x __x, _Float64x __y) throw() __attribute((const)); 
# 371
extern int canonicalizef64x(_Float64x * __cx, const _Float64x * __x) throw(); 
# 376
extern int totalorderf64x(const _Float64x * __x, const _Float64x * __y) throw()
# 378
 __attribute((__pure__)); 
# 381
extern int totalordermagf64x(const _Float64x * __x, const _Float64x * __y) throw()
# 383
 __attribute((__pure__)); 
# 386
extern _Float64x getpayloadf64x(const _Float64x * __x) throw(); extern _Float64x __getpayloadf64x(const _Float64x * __x) throw(); 
# 389
extern int setpayloadf64x(_Float64x * __x, _Float64x __payload) throw(); 
# 392
extern int setpayloadsigf64x(_Float64x * __x, _Float64x __payload) throw(); 
# 24 "/usr/include/aarch64-linux-gnu/bits/mathcalls-narrow.h" 3
extern float fadd(double __x, double __y) throw(); 
# 27
extern float fdiv(double __x, double __y) throw(); 
# 30
extern float fmul(double __x, double __y) throw(); 
# 33
extern float fsub(double __x, double __y) throw(); 
# 24 "/usr/include/aarch64-linux-gnu/bits/mathcalls-narrow.h" 3
extern float faddl(long double __x, long double __y) throw(); 
# 27
extern float fdivl(long double __x, long double __y) throw(); 
# 30
extern float fmull(long double __x, long double __y) throw(); 
# 33
extern float fsubl(long double __x, long double __y) throw(); 
# 24 "/usr/include/aarch64-linux-gnu/bits/mathcalls-narrow.h" 3
extern double daddl(long double __x, long double __y) throw(); 
# 27
extern double ddivl(long double __x, long double __y) throw(); 
# 30
extern double dmull(long double __x, long double __y) throw(); 
# 33
extern double dsubl(long double __x, long double __y) throw(); 
# 24 "/usr/include/aarch64-linux-gnu/bits/mathcalls-narrow.h" 3
extern _Float32 f32addf32x(_Float32x __x, _Float32x __y) throw(); 
# 27
extern _Float32 f32divf32x(_Float32x __x, _Float32x __y) throw(); 
# 30
extern _Float32 f32mulf32x(_Float32x __x, _Float32x __y) throw(); 
# 33
extern _Float32 f32subf32x(_Float32x __x, _Float32x __y) throw(); 
# 24 "/usr/include/aarch64-linux-gnu/bits/mathcalls-narrow.h" 3
extern _Float32 f32addf64(_Float64 __x, _Float64 __y) throw(); 
# 27
extern _Float32 f32divf64(_Float64 __x, _Float64 __y) throw(); 
# 30
extern _Float32 f32mulf64(_Float64 __x, _Float64 __y) throw(); 
# 33
extern _Float32 f32subf64(_Float64 __x, _Float64 __y) throw(); 
# 24 "/usr/include/aarch64-linux-gnu/bits/mathcalls-narrow.h" 3
extern _Float32 f32addf64x(_Float64x __x, _Float64x __y) throw(); 
# 27
extern _Float32 f32divf64x(_Float64x __x, _Float64x __y) throw(); 
# 30
extern _Float32 f32mulf64x(_Float64x __x, _Float64x __y) throw(); 
# 33
extern _Float32 f32subf64x(_Float64x __x, _Float64x __y) throw(); 
# 24 "/usr/include/aarch64-linux-gnu/bits/mathcalls-narrow.h" 3
extern _Float32 f32addf128(_Float128 __x, _Float128 __y) throw(); 
# 27
extern _Float32 f32divf128(_Float128 __x, _Float128 __y) throw(); 
# 30
extern _Float32 f32mulf128(_Float128 __x, _Float128 __y) throw(); 
# 33
extern _Float32 f32subf128(_Float128 __x, _Float128 __y) throw(); 
# 24 "/usr/include/aarch64-linux-gnu/bits/mathcalls-narrow.h" 3
extern _Float32x f32xaddf64(_Float64 __x, _Float64 __y) throw(); 
# 27
extern _Float32x f32xdivf64(_Float64 __x, _Float64 __y) throw(); 
# 30
extern _Float32x f32xmulf64(_Float64 __x, _Float64 __y) throw(); 
# 33
extern _Float32x f32xsubf64(_Float64 __x, _Float64 __y) throw(); 
# 24 "/usr/include/aarch64-linux-gnu/bits/mathcalls-narrow.h" 3
extern _Float32x f32xaddf64x(_Float64x __x, _Float64x __y) throw(); 
# 27
extern _Float32x f32xdivf64x(_Float64x __x, _Float64x __y) throw(); 
# 30
extern _Float32x f32xmulf64x(_Float64x __x, _Float64x __y) throw(); 
# 33
extern _Float32x f32xsubf64x(_Float64x __x, _Float64x __y) throw(); 
# 24 "/usr/include/aarch64-linux-gnu/bits/mathcalls-narrow.h" 3
extern _Float32x f32xaddf128(_Float128 __x, _Float128 __y) throw(); 
# 27
extern _Float32x f32xdivf128(_Float128 __x, _Float128 __y) throw(); 
# 30
extern _Float32x f32xmulf128(_Float128 __x, _Float128 __y) throw(); 
# 33
extern _Float32x f32xsubf128(_Float128 __x, _Float128 __y) throw(); 
# 24 "/usr/include/aarch64-linux-gnu/bits/mathcalls-narrow.h" 3
extern _Float64 f64addf64x(_Float64x __x, _Float64x __y) throw(); 
# 27
extern _Float64 f64divf64x(_Float64x __x, _Float64x __y) throw(); 
# 30
extern _Float64 f64mulf64x(_Float64x __x, _Float64x __y) throw(); 
# 33
extern _Float64 f64subf64x(_Float64x __x, _Float64x __y) throw(); 
# 24 "/usr/include/aarch64-linux-gnu/bits/mathcalls-narrow.h" 3
extern _Float64 f64addf128(_Float128 __x, _Float128 __y) throw(); 
# 27
extern _Float64 f64divf128(_Float128 __x, _Float128 __y) throw(); 
# 30
extern _Float64 f64mulf128(_Float128 __x, _Float128 __y) throw(); 
# 33
extern _Float64 f64subf128(_Float128 __x, _Float128 __y) throw(); 
# 24 "/usr/include/aarch64-linux-gnu/bits/mathcalls-narrow.h" 3
extern _Float64x f64xaddf128(_Float128 __x, _Float128 __y) throw(); 
# 27
extern _Float64x f64xdivf128(_Float128 __x, _Float128 __y) throw(); 
# 30
extern _Float64x f64xmulf128(_Float128 __x, _Float128 __y) throw(); 
# 33
extern _Float64x f64xsubf128(_Float128 __x, _Float128 __y) throw(); 
# 773 "/usr/include/math.h" 3
extern int signgam; 
# 854 "/usr/include/math.h" 3
enum { 
# 855
FP_NAN, 
# 858
FP_INFINITE, 
# 861
FP_ZERO, 
# 864
FP_SUBNORMAL, 
# 867
FP_NORMAL
# 870
}; 
# 985 "/usr/include/math.h" 3
extern "C++" {
# 986
inline int issignaling(float __val) { return __issignalingf(__val); } 
# 987
inline int issignaling(double __val) { return __issignaling(__val); } 
# 989
inline int issignaling(long double __val) 
# 990
{ 
# 994
return __issignalingl(__val); 
# 996
} 
# 1002
}
# 1016 "/usr/include/math.h" 3
extern "C++" {
# 1047 "/usr/include/math.h" 3
template< class __T> inline bool 
# 1048
iszero(__T __val) 
# 1049
{ 
# 1050
return __val == 0; 
# 1051
} 
# 1053
}
# 1278 "/usr/include/math.h" 3
extern "C++" {
# 1279
template< class > struct __iseqsig_type; 
# 1281
template<> struct __iseqsig_type< float>  { 
# 1283
static int __call(float __x, float __y) throw() 
# 1284
{ 
# 1285
return __iseqsigf(__x, __y); 
# 1286
} 
# 1287
}; 
# 1289
template<> struct __iseqsig_type< double>  { 
# 1291
static int __call(double __x, double __y) throw() 
# 1292
{ 
# 1293
return __iseqsig(__x, __y); 
# 1294
} 
# 1295
}; 
# 1297
template<> struct __iseqsig_type< long double>  { 
# 1299
static int __call(long double __x, long double __y) throw() 
# 1300
{ 
# 1302
return __iseqsigl(__x, __y); 
# 1306
} 
# 1307
}; 
# 1321 "/usr/include/math.h" 3
template< class _T1, class _T2> inline int 
# 1323
iseqsig(_T1 __x, _T2 __y) throw() 
# 1324
{ 
# 1326
typedef __decltype(((__x + __y) + (0.0F))) _T3; 
# 1330
return __iseqsig_type< __decltype(((__x + __y) + (0.0F)))> ::__call(__x, __y); 
# 1331
} 
# 1333
}
# 1338
}
# 33 "/usr/include/stdlib.h" 3
extern "C" {
# 57 "/usr/include/aarch64-linux-gnu/bits/waitflags.h" 3
typedef 
# 53
enum { 
# 54
P_ALL, 
# 55
P_PID, 
# 56
P_PGID
# 57
} idtype_t; 
# 62 "/usr/include/stdlib.h" 3
typedef 
# 59
struct { 
# 60
int quot; 
# 61
int rem; 
# 62
} div_t; 
# 70
typedef 
# 67
struct { 
# 68
long quot; 
# 69
long rem; 
# 70
} ldiv_t; 
# 80
__extension__ typedef 
# 77
struct { 
# 78
long long quot; 
# 79
long long rem; 
# 80
} lldiv_t; 
# 97 "/usr/include/stdlib.h" 3
extern size_t __ctype_get_mb_cur_max() throw() __attribute((__warn_unused_result__)); 
# 101
extern __attribute((gnu_inline)) inline double atof(const char * __nptr) throw()
# 102
 __attribute((__pure__)) __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); 
# 104
extern __attribute((gnu_inline)) inline int atoi(const char * __nptr) throw()
# 105
 __attribute((__pure__)) __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); 
# 107
extern __attribute((gnu_inline)) inline long atol(const char * __nptr) throw()
# 108
 __attribute((__pure__)) __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); 
# 112
__extension__ extern __attribute((gnu_inline)) inline long long atoll(const char * __nptr) throw()
# 113
 __attribute((__pure__)) __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); 
# 117
extern double strtod(const char *__restrict__ __nptr, char **__restrict__ __endptr) throw()
# 119
 __attribute((__nonnull__(1))); 
# 123
extern float strtof(const char *__restrict__ __nptr, char **__restrict__ __endptr) throw()
# 124
 __attribute((__nonnull__(1))); 
# 126
extern long double strtold(const char *__restrict__ __nptr, char **__restrict__ __endptr) throw()
# 128
 __attribute((__nonnull__(1))); 
# 140 "/usr/include/stdlib.h" 3
extern _Float32 strtof32(const char *__restrict__ __nptr, char **__restrict__ __endptr) throw()
# 142
 __attribute((__nonnull__(1))); 
# 146
extern _Float64 strtof64(const char *__restrict__ __nptr, char **__restrict__ __endptr) throw()
# 148
 __attribute((__nonnull__(1))); 
# 152
extern _Float128 strtof128(const char *__restrict__ __nptr, char **__restrict__ __endptr) throw()
# 154
 __attribute((__nonnull__(1))); 
# 158
extern _Float32x strtof32x(const char *__restrict__ __nptr, char **__restrict__ __endptr) throw()
# 160
 __attribute((__nonnull__(1))); 
# 164
extern _Float64x strtof64x(const char *__restrict__ __nptr, char **__restrict__ __endptr) throw()
# 166
 __attribute((__nonnull__(1))); 
# 176 "/usr/include/stdlib.h" 3
extern long strtol(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) throw()
# 178
 __attribute((__nonnull__(1))); 
# 180
extern unsigned long strtoul(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) throw()
# 182
 __attribute((__nonnull__(1))); 
# 187
__extension__ extern long long strtoq(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) throw()
# 189
 __attribute((__nonnull__(1))); 
# 192
__extension__ extern unsigned long long strtouq(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) throw()
# 194
 __attribute((__nonnull__(1))); 
# 200
__extension__ extern long long strtoll(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) throw()
# 202
 __attribute((__nonnull__(1))); 
# 205
__extension__ extern unsigned long long strtoull(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) throw()
# 207
 __attribute((__nonnull__(1))); 
# 212
extern int strfromd(char * __dest, size_t __size, const char * __format, double __f) throw()
# 214
 __attribute((__nonnull__(3))); 
# 216
extern int strfromf(char * __dest, size_t __size, const char * __format, float __f) throw()
# 218
 __attribute((__nonnull__(3))); 
# 220
extern int strfroml(char * __dest, size_t __size, const char * __format, long double __f) throw()
# 222
 __attribute((__nonnull__(3))); 
# 232 "/usr/include/stdlib.h" 3
extern int strfromf32(char * __dest, size_t __size, const char * __format, _Float32 __f) throw()
# 234
 __attribute((__nonnull__(3))); 
# 238
extern int strfromf64(char * __dest, size_t __size, const char * __format, _Float64 __f) throw()
# 240
 __attribute((__nonnull__(3))); 
# 244
extern int strfromf128(char * __dest, size_t __size, const char * __format, _Float128 __f) throw()
# 246
 __attribute((__nonnull__(3))); 
# 250
extern int strfromf32x(char * __dest, size_t __size, const char * __format, _Float32x __f) throw()
# 252
 __attribute((__nonnull__(3))); 
# 256
extern int strfromf64x(char * __dest, size_t __size, const char * __format, _Float64x __f) throw()
# 258
 __attribute((__nonnull__(3))); 
# 274 "/usr/include/stdlib.h" 3
extern long strtol_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base, locale_t __loc) throw()
# 276
 __attribute((__nonnull__(1, 4))); 
# 278
extern unsigned long strtoul_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base, locale_t __loc) throw()
# 281
 __attribute((__nonnull__(1, 4))); 
# 284
__extension__ extern long long strtoll_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base, locale_t __loc) throw()
# 287
 __attribute((__nonnull__(1, 4))); 
# 290
__extension__ extern unsigned long long strtoull_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base, locale_t __loc) throw()
# 293
 __attribute((__nonnull__(1, 4))); 
# 295
extern double strtod_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, locale_t __loc) throw()
# 297
 __attribute((__nonnull__(1, 3))); 
# 299
extern float strtof_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, locale_t __loc) throw()
# 301
 __attribute((__nonnull__(1, 3))); 
# 303
extern long double strtold_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, locale_t __loc) throw()
# 306
 __attribute((__nonnull__(1, 3))); 
# 316 "/usr/include/stdlib.h" 3
extern _Float32 strtof32_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, locale_t __loc) throw()
# 319
 __attribute((__nonnull__(1, 3))); 
# 323
extern _Float64 strtof64_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, locale_t __loc) throw()
# 326
 __attribute((__nonnull__(1, 3))); 
# 330
extern _Float128 strtof128_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, locale_t __loc) throw()
# 333
 __attribute((__nonnull__(1, 3))); 
# 337
extern _Float32x strtof32x_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, locale_t __loc) throw()
# 340
 __attribute((__nonnull__(1, 3))); 
# 344
extern _Float64x strtof64x_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, locale_t __loc) throw()
# 347
 __attribute((__nonnull__(1, 3))); 
# 360 "/usr/include/stdlib.h" 3
__attribute((__gnu_inline__)) extern inline int 
# 361
 __attribute((__leaf__)) atoi(const char *__nptr) throw() 
# 362
{ 
# 363
return (int)strtol(__nptr, (char **)__null, 10); 
# 364
} 
# 365
__attribute((__gnu_inline__)) extern inline long 
# 366
 __attribute((__leaf__)) atol(const char *__nptr) throw() 
# 367
{ 
# 368
return strtol(__nptr, (char **)__null, 10); 
# 369
} 
# 373
__extension__ 
# 372
__attribute((__gnu_inline__)) extern inline long long 
# 373
 __attribute((__leaf__)) atoll(const char *__nptr) throw() 
# 374
{ 
# 375
return strtoll(__nptr, (char **)__null, 10); 
# 376
} 
# 385 "/usr/include/stdlib.h" 3
extern char *l64a(long __n) throw() __attribute((__warn_unused_result__)); 
# 388
extern long a64l(const char * __s) throw()
# 389
 __attribute((__pure__)) __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); 
# 27 "/usr/include/aarch64-linux-gnu/sys/types.h" 3
extern "C" {
# 33
typedef __u_char u_char; 
# 34
typedef __u_short u_short; 
# 35
typedef __u_int u_int; 
# 36
typedef __u_long u_long; 
# 37
typedef __quad_t quad_t; 
# 38
typedef __u_quad_t u_quad_t; 
# 39
typedef __fsid_t fsid_t; 
# 42
typedef __loff_t loff_t; 
# 47
typedef __ino_t ino_t; 
# 54
typedef __ino64_t ino64_t; 
# 59
typedef __dev_t dev_t; 
# 64
typedef __gid_t gid_t; 
# 69
typedef __mode_t mode_t; 
# 74
typedef __nlink_t nlink_t; 
# 79
typedef __uid_t uid_t; 
# 85
typedef __off_t off_t; 
# 92
typedef __off64_t off64_t; 
# 103 "/usr/include/aarch64-linux-gnu/sys/types.h" 3
typedef __id_t id_t; 
# 108
typedef __ssize_t ssize_t; 
# 114
typedef __daddr_t daddr_t; 
# 115
typedef __caddr_t caddr_t; 
# 121
typedef __key_t key_t; 
# 134 "/usr/include/aarch64-linux-gnu/sys/types.h" 3
typedef __useconds_t useconds_t; 
# 138
typedef __suseconds_t suseconds_t; 
# 148 "/usr/include/aarch64-linux-gnu/sys/types.h" 3
typedef unsigned long ulong; 
# 149
typedef unsigned short ushort; 
# 150
typedef unsigned uint; 
# 24 "/usr/include/aarch64-linux-gnu/bits/stdint-intn.h" 3
typedef __int8_t int8_t; 
# 25
typedef __int16_t int16_t; 
# 26
typedef __int32_t int32_t; 
# 27
typedef __int64_t int64_t; 
# 158 "/usr/include/aarch64-linux-gnu/sys/types.h" 3
typedef __uint8_t u_int8_t; 
# 159
typedef __uint16_t u_int16_t; 
# 160
typedef __uint32_t u_int32_t; 
# 161
typedef __uint64_t u_int64_t; 
# 164
typedef long register_t __attribute((__mode__(__word__))); 
# 34 "/usr/include/aarch64-linux-gnu/bits/byteswap.h" 3
static inline __uint16_t __bswap_16(__uint16_t __bsx) 
# 35
{ 
# 37
return __builtin_bswap16(__bsx); 
# 41
} 
# 49
static inline __uint32_t __bswap_32(__uint32_t __bsx) 
# 50
{ 
# 52
return __builtin_bswap32(__bsx); 
# 56
} 
# 70 "/usr/include/aarch64-linux-gnu/bits/byteswap.h" 3
__extension__ static inline __uint64_t __bswap_64(__uint64_t __bsx) 
# 71
{ 
# 73
return __builtin_bswap64(__bsx); 
# 77
} 
# 33 "/usr/include/aarch64-linux-gnu/bits/uintn-identity.h" 3
static inline __uint16_t __uint16_identity(__uint16_t __x) 
# 34
{ 
# 35
return __x; 
# 36
} 
# 39
static inline __uint32_t __uint32_identity(__uint32_t __x) 
# 40
{ 
# 41
return __x; 
# 42
} 
# 45
static inline __uint64_t __uint64_identity(__uint64_t __x) 
# 46
{ 
# 47
return __x; 
# 48
} 
# 8 "/usr/include/aarch64-linux-gnu/bits/types/__sigset_t.h" 3
typedef 
# 6
struct { 
# 7
unsigned long __val[(1024) / ((8) * sizeof(unsigned long))]; 
# 8
} __sigset_t; 
# 7 "/usr/include/aarch64-linux-gnu/bits/types/sigset_t.h" 3
typedef __sigset_t sigset_t; 
# 49 "/usr/include/aarch64-linux-gnu/sys/select.h" 3
typedef long __fd_mask; 
# 70 "/usr/include/aarch64-linux-gnu/sys/select.h" 3
typedef 
# 60
struct { 
# 64
__fd_mask fds_bits[1024 / (8 * ((int)sizeof(__fd_mask)))]; 
# 70
} fd_set; 
# 77
typedef __fd_mask fd_mask; 
# 91 "/usr/include/aarch64-linux-gnu/sys/select.h" 3
extern "C" {
# 101 "/usr/include/aarch64-linux-gnu/sys/select.h" 3
extern int select(int __nfds, fd_set *__restrict__ __readfds, fd_set *__restrict__ __writefds, fd_set *__restrict__ __exceptfds, timeval *__restrict__ __timeout); 
# 113 "/usr/include/aarch64-linux-gnu/sys/select.h" 3
extern int pselect(int __nfds, fd_set *__restrict__ __readfds, fd_set *__restrict__ __writefds, fd_set *__restrict__ __exceptfds, const timespec *__restrict__ __timeout, const __sigset_t *__restrict__ __sigmask); 
# 24 "/usr/include/aarch64-linux-gnu/bits/select2.h" 3
extern long __fdelt_chk(long __d); 
# 25
extern long __fdelt_warn(long __d)
# 26
 __attribute((__warning__("bit outside of fd_set selected"))); 
# 126 "/usr/include/aarch64-linux-gnu/sys/select.h" 3
}
# 185 "/usr/include/aarch64-linux-gnu/sys/types.h" 3
typedef __blksize_t blksize_t; 
# 192
typedef __blkcnt_t blkcnt_t; 
# 196
typedef __fsblkcnt_t fsblkcnt_t; 
# 200
typedef __fsfilcnt_t fsfilcnt_t; 
# 219 "/usr/include/aarch64-linux-gnu/sys/types.h" 3
typedef __blkcnt64_t blkcnt64_t; 
# 220
typedef __fsblkcnt64_t fsblkcnt64_t; 
# 221
typedef __fsfilcnt64_t fsfilcnt64_t; 
# 53 "/usr/include/aarch64-linux-gnu/bits/thread-shared-types.h" 3
typedef 
# 49
struct __pthread_internal_list { 
# 51
__pthread_internal_list *__prev; 
# 52
__pthread_internal_list *__next; 
# 53
} __pthread_list_t; 
# 58
typedef 
# 55
struct __pthread_internal_slist { 
# 57
__pthread_internal_slist *__next; 
# 58
} __pthread_slist_t; 
# 27 "/usr/include/aarch64-linux-gnu/bits/struct_mutex.h" 3
struct __pthread_mutex_s { 
# 29
int __lock; 
# 30
unsigned __count; 
# 31
int __owner; 
# 33
unsigned __nusers; 
# 58 "/usr/include/aarch64-linux-gnu/bits/struct_mutex.h" 3
int __kind; 
# 63
int __spins; 
# 64
__pthread_list_t __list; 
# 74 "/usr/include/aarch64-linux-gnu/bits/struct_mutex.h" 3
}; 
# 23 "/usr/include/aarch64-linux-gnu/bits/struct_rwlock.h" 3
struct __pthread_rwlock_arch_t { 
# 25
unsigned __readers; 
# 26
unsigned __writers; 
# 27
unsigned __wrphase_futex; 
# 28
unsigned __writers_futex; 
# 29
unsigned __pad3; 
# 30
unsigned __pad4; 
# 31
int __cur_writer; 
# 32
int __shared; 
# 33
unsigned long __pad1; 
# 34
unsigned long __pad2; 
# 35
unsigned __flags; 
# 36
}; 
# 92 "/usr/include/aarch64-linux-gnu/bits/thread-shared-types.h" 3
struct __pthread_cond_s { 
# 95
__extension__ union { 
# 96
__extension__ unsigned long long __wseq; 
# 98
struct { 
# 99
unsigned __low; 
# 100
unsigned __high; 
# 101
} __wseq32; 
# 102
}; 
# 104
__extension__ union { 
# 105
__extension__ unsigned long long __g1_start; 
# 107
struct { 
# 108
unsigned __low; 
# 109
unsigned __high; 
# 110
} __g1_start32; 
# 111
}; 
# 112
unsigned __g_refs[2]; 
# 113
unsigned __g_size[2]; 
# 114
unsigned __g1_orig_size; 
# 115
unsigned __wrefs; 
# 116
unsigned __g_signals[2]; 
# 117
}; 
# 27 "/usr/include/aarch64-linux-gnu/bits/pthreadtypes.h" 3
typedef unsigned long pthread_t; 
# 36
typedef 
# 33
union { 
# 34
char __size[8]; 
# 35
int __align; 
# 36
} pthread_mutexattr_t; 
# 45
typedef 
# 42
union { 
# 43
char __size[8]; 
# 44
int __align; 
# 45
} pthread_condattr_t; 
# 49
typedef unsigned pthread_key_t; 
# 53
typedef int pthread_once_t; 
# 56
union pthread_attr_t { 
# 58
char __size[64]; 
# 59
long __align; 
# 60
}; 
# 62
typedef pthread_attr_t pthread_attr_t; 
# 72
typedef 
# 68
union { 
# 69
__pthread_mutex_s __data; 
# 70
char __size[48]; 
# 71
long __align; 
# 72
} pthread_mutex_t; 
# 80
typedef 
# 76
union { 
# 77
__pthread_cond_s __data; 
# 78
char __size[48]; 
# 79
__extension__ long long __align; 
# 80
} pthread_cond_t; 
# 91
typedef 
# 87
union { 
# 88
__pthread_rwlock_arch_t __data; 
# 89
char __size[56]; 
# 90
long __align; 
# 91
} pthread_rwlock_t; 
# 97
typedef 
# 94
union { 
# 95
char __size[8]; 
# 96
long __align; 
# 97
} pthread_rwlockattr_t; 
# 103
typedef volatile int pthread_spinlock_t; 
# 112
typedef 
# 109
union { 
# 110
char __size[32]; 
# 111
long __align; 
# 112
} pthread_barrier_t; 
# 118
typedef 
# 115
union { 
# 116
char __size[8]; 
# 117
int __align; 
# 118
} pthread_barrierattr_t; 
# 230 "/usr/include/aarch64-linux-gnu/sys/types.h" 3
}
# 401 "/usr/include/stdlib.h" 3
extern long random() throw(); 
# 404
extern void srandom(unsigned __seed) throw(); 
# 410
extern char *initstate(unsigned __seed, char * __statebuf, size_t __statelen) throw()
# 411
 __attribute((__nonnull__(2))); 
# 415
extern char *setstate(char * __statebuf) throw() __attribute((__nonnull__(1))); 
# 423
struct random_data { 
# 425
int32_t *fptr; 
# 426
int32_t *rptr; 
# 427
int32_t *state; 
# 428
int rand_type; 
# 429
int rand_deg; 
# 430
int rand_sep; 
# 431
int32_t *end_ptr; 
# 432
}; 
# 434
extern int random_r(random_data *__restrict__ __buf, int32_t *__restrict__ __result) throw()
# 435
 __attribute((__nonnull__(1, 2))); 
# 437
extern int srandom_r(unsigned __seed, random_data * __buf) throw()
# 438
 __attribute((__nonnull__(2))); 
# 440
extern int initstate_r(unsigned __seed, char *__restrict__ __statebuf, size_t __statelen, random_data *__restrict__ __buf) throw()
# 443
 __attribute((__nonnull__(2, 4))); 
# 445
extern int setstate_r(char *__restrict__ __statebuf, random_data *__restrict__ __buf) throw()
# 447
 __attribute((__nonnull__(1, 2))); 
# 453
extern int rand() throw(); 
# 455
extern void srand(unsigned __seed) throw(); 
# 459
extern int rand_r(unsigned * __seed) throw(); 
# 467
extern double drand48() throw(); 
# 468
extern double erand48(unsigned short  __xsubi[3]) throw() __attribute((__nonnull__(1))); 
# 471
extern long lrand48() throw(); 
# 472
extern long nrand48(unsigned short  __xsubi[3]) throw()
# 473
 __attribute((__nonnull__(1))); 
# 476
extern long mrand48() throw(); 
# 477
extern long jrand48(unsigned short  __xsubi[3]) throw()
# 478
 __attribute((__nonnull__(1))); 
# 481
extern void srand48(long __seedval) throw(); 
# 482
extern unsigned short *seed48(unsigned short  __seed16v[3]) throw()
# 483
 __attribute((__nonnull__(1))); 
# 484
extern void lcong48(unsigned short  __param[7]) throw() __attribute((__nonnull__(1))); 
# 490
struct drand48_data { 
# 492
unsigned short __x[3]; 
# 493
unsigned short __old_x[3]; 
# 494
unsigned short __c; 
# 495
unsigned short __init; 
# 496
__extension__ unsigned long long __a; 
# 498
}; 
# 501
extern int drand48_r(drand48_data *__restrict__ __buffer, double *__restrict__ __result) throw()
# 502
 __attribute((__nonnull__(1, 2))); 
# 503
extern int erand48_r(unsigned short  __xsubi[3], drand48_data *__restrict__ __buffer, double *__restrict__ __result) throw()
# 505
 __attribute((__nonnull__(1, 2))); 
# 508
extern int lrand48_r(drand48_data *__restrict__ __buffer, long *__restrict__ __result) throw()
# 510
 __attribute((__nonnull__(1, 2))); 
# 511
extern int nrand48_r(unsigned short  __xsubi[3], drand48_data *__restrict__ __buffer, long *__restrict__ __result) throw()
# 514
 __attribute((__nonnull__(1, 2))); 
# 517
extern int mrand48_r(drand48_data *__restrict__ __buffer, long *__restrict__ __result) throw()
# 519
 __attribute((__nonnull__(1, 2))); 
# 520
extern int jrand48_r(unsigned short  __xsubi[3], drand48_data *__restrict__ __buffer, long *__restrict__ __result) throw()
# 523
 __attribute((__nonnull__(1, 2))); 
# 526
extern int srand48_r(long __seedval, drand48_data * __buffer) throw()
# 527
 __attribute((__nonnull__(2))); 
# 529
extern int seed48_r(unsigned short  __seed16v[3], drand48_data * __buffer) throw()
# 530
 __attribute((__nonnull__(1, 2))); 
# 532
extern int lcong48_r(unsigned short  __param[7], drand48_data * __buffer) throw()
# 534
 __attribute((__nonnull__(1, 2))); 
# 539
extern void *malloc(size_t __size) throw() __attribute((__malloc__))
# 540
 __attribute((__alloc_size__(1))) __attribute((__warn_unused_result__)); 
# 542
extern void *calloc(size_t __nmemb, size_t __size) throw()
# 543
 __attribute((__malloc__)) __attribute((__alloc_size__(1, 2))) __attribute((__warn_unused_result__)); 
# 550
extern void *realloc(void * __ptr, size_t __size) throw()
# 551
 __attribute((__warn_unused_result__)) __attribute((__alloc_size__(2))); 
# 559
extern void *reallocarray(void * __ptr, size_t __nmemb, size_t __size) throw()
# 560
 __attribute((__warn_unused_result__))
# 561
 __attribute((__alloc_size__(2, 3))); 
# 565
extern void free(void * __ptr) throw(); 
# 26 "/usr/include/alloca.h" 3
extern "C" {
# 32
extern void *alloca(size_t __size) throw(); 
# 38
}
# 574 "/usr/include/stdlib.h" 3
extern void *valloc(size_t __size) throw() __attribute((__malloc__))
# 575
 __attribute((__alloc_size__(1))) __attribute((__warn_unused_result__)); 
# 580
extern int posix_memalign(void ** __memptr, size_t __alignment, size_t __size) throw()
# 581
 __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); 
# 586
extern void *aligned_alloc(size_t __alignment, size_t __size) throw()
# 587
 __attribute((__malloc__)) __attribute((__alloc_size__(2))) __attribute((__warn_unused_result__)); 
# 591
extern void abort() throw() __attribute((__noreturn__)); 
# 595
extern int atexit(void (* __func)(void)) throw() __attribute((__nonnull__(1))); 
# 600
extern "C++" int at_quick_exit(void (* __func)(void)) throw() __asm__("at_quick_exit")
# 601
 __attribute((__nonnull__(1))); 
# 610 "/usr/include/stdlib.h" 3
extern int on_exit(void (* __func)(int __status, void * __arg), void * __arg) throw()
# 611
 __attribute((__nonnull__(1))); 
# 617
extern void exit(int __status) throw() __attribute((__noreturn__)); 
# 623
extern void quick_exit(int __status) throw() __attribute((__noreturn__)); 
# 629
extern void _Exit(int __status) throw() __attribute((__noreturn__)); 
# 634
extern char *getenv(const char * __name) throw() __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); 
# 639
extern char *secure_getenv(const char * __name) throw()
# 640
 __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); 
# 647
extern int putenv(char * __string) throw() __attribute((__nonnull__(1))); 
# 653
extern int setenv(const char * __name, const char * __value, int __replace) throw()
# 654
 __attribute((__nonnull__(2))); 
# 657
extern int unsetenv(const char * __name) throw() __attribute((__nonnull__(1))); 
# 664
extern int clearenv() throw(); 
# 675 "/usr/include/stdlib.h" 3
extern char *mktemp(char * __template) throw() __attribute((__nonnull__(1))); 
# 688 "/usr/include/stdlib.h" 3
extern int mkstemp(char * __template) __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); 
# 698 "/usr/include/stdlib.h" 3
extern int mkstemp64(char * __template) __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); 
# 710 "/usr/include/stdlib.h" 3
extern int mkstemps(char * __template, int __suffixlen) __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); 
# 720 "/usr/include/stdlib.h" 3
extern int mkstemps64(char * __template, int __suffixlen)
# 721
 __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); 
# 731 "/usr/include/stdlib.h" 3
extern char *mkdtemp(char * __template) throw() __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); 
# 742 "/usr/include/stdlib.h" 3
extern int mkostemp(char * __template, int __flags) __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); 
# 752 "/usr/include/stdlib.h" 3
extern int mkostemp64(char * __template, int __flags) __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); 
# 762 "/usr/include/stdlib.h" 3
extern int mkostemps(char * __template, int __suffixlen, int __flags)
# 763
 __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); 
# 774 "/usr/include/stdlib.h" 3
extern int mkostemps64(char * __template, int __suffixlen, int __flags)
# 775
 __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); 
# 784 "/usr/include/stdlib.h" 3
extern int system(const char * __command) __attribute((__warn_unused_result__)); 
# 790
extern char *canonicalize_file_name(const char * __name) throw()
# 791
 __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); 
# 800 "/usr/include/stdlib.h" 3
extern __attribute((gnu_inline)) inline char *realpath(const char *__restrict__ __name, char *__restrict__ __resolved) throw()
# 801
 __attribute((__warn_unused_result__)); 
# 808
typedef int (*__compar_fn_t)(const void *, const void *); 
# 811
typedef __compar_fn_t comparison_fn_t; 
# 815
typedef int (*__compar_d_fn_t)(const void *, const void *, void *); 
# 820
extern __attribute((gnu_inline)) inline void *bsearch(const void * __key, const void * __base, size_t __nmemb, size_t __size, __compar_fn_t __compar)
# 822
 __attribute((__nonnull__(1, 2, 5))) __attribute((__warn_unused_result__)); 
# 19 "/usr/include/aarch64-linux-gnu/bits/stdlib-bsearch.h" 3
__attribute((__gnu_inline__)) extern inline void *
# 20
bsearch(const void *__key, const void *__base, size_t __nmemb, size_t __size, __compar_fn_t 
# 21
__compar) 
# 22
{ 
# 23
size_t __l, __u, __idx; 
# 24
const void *__p; 
# 25
int __comparison; 
# 27
__l = (0); 
# 28
__u = __nmemb; 
# 29
while (__l < __u) 
# 30
{ 
# 31
__idx = ((__l + __u) / (2)); 
# 32
__p = ((void *)(((const char *)__base) + (__idx * __size))); 
# 33
__comparison = (*__compar)(__key, __p); 
# 34
if (__comparison < 0) { 
# 35
__u = __idx; } else { 
# 36
if (__comparison > 0) { 
# 37
__l = (__idx + (1)); } else { 
# 39
return (void *)__p; }  }  
# 40
}  
# 42
return __null; 
# 43
} 
# 830 "/usr/include/stdlib.h" 3
extern void qsort(void * __base, size_t __nmemb, size_t __size, __compar_fn_t __compar)
# 831
 __attribute((__nonnull__(1, 4))); 
# 833
extern void qsort_r(void * __base, size_t __nmemb, size_t __size, __compar_d_fn_t __compar, void * __arg)
# 835
 __attribute((__nonnull__(1, 4))); 
# 840
extern int abs(int __x) throw() __attribute((const)) __attribute((__warn_unused_result__)); 
# 841
extern long labs(long __x) throw() __attribute((const)) __attribute((__warn_unused_result__)); 
# 844
__extension__ extern long long llabs(long long __x) throw()
# 845
 __attribute((const)) __attribute((__warn_unused_result__)); 
# 852
extern div_t div(int __numer, int __denom) throw()
# 853
 __attribute((const)) __attribute((__warn_unused_result__)); 
# 854
extern ldiv_t ldiv(long __numer, long __denom) throw()
# 855
 __attribute((const)) __attribute((__warn_unused_result__)); 
# 858
__extension__ extern lldiv_t lldiv(long long __numer, long long __denom) throw()
# 860
 __attribute((const)) __attribute((__warn_unused_result__)); 
# 872 "/usr/include/stdlib.h" 3
extern char *ecvt(double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign) throw()
# 873
 __attribute((__nonnull__(3, 4))) __attribute((__warn_unused_result__)); 
# 878
extern char *fcvt(double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign) throw()
# 879
 __attribute((__nonnull__(3, 4))) __attribute((__warn_unused_result__)); 
# 884
extern char *gcvt(double __value, int __ndigit, char * __buf) throw()
# 885
 __attribute((__nonnull__(3))) __attribute((__warn_unused_result__)); 
# 890
extern char *qecvt(long double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign) throw()
# 892
 __attribute((__nonnull__(3, 4))) __attribute((__warn_unused_result__)); 
# 893
extern char *qfcvt(long double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign) throw()
# 895
 __attribute((__nonnull__(3, 4))) __attribute((__warn_unused_result__)); 
# 896
extern char *qgcvt(long double __value, int __ndigit, char * __buf) throw()
# 897
 __attribute((__nonnull__(3))) __attribute((__warn_unused_result__)); 
# 902
extern int ecvt_r(double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign, char *__restrict__ __buf, size_t __len) throw()
# 904
 __attribute((__nonnull__(3, 4, 5))); 
# 905
extern int fcvt_r(double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign, char *__restrict__ __buf, size_t __len) throw()
# 907
 __attribute((__nonnull__(3, 4, 5))); 
# 909
extern int qecvt_r(long double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign, char *__restrict__ __buf, size_t __len) throw()
# 912
 __attribute((__nonnull__(3, 4, 5))); 
# 913
extern int qfcvt_r(long double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign, char *__restrict__ __buf, size_t __len) throw()
# 916
 __attribute((__nonnull__(3, 4, 5))); 
# 922
extern int mblen(const char * __s, size_t __n) throw(); 
# 925
extern int mbtowc(wchar_t *__restrict__ __pwc, const char *__restrict__ __s, size_t __n) throw(); 
# 929
extern __attribute((gnu_inline)) inline int wctomb(char * __s, wchar_t __wchar) throw(); 
# 933
extern __attribute((gnu_inline)) inline size_t mbstowcs(wchar_t *__restrict__ __pwcs, const char *__restrict__ __s, size_t __n) throw(); 
# 936
extern __attribute((gnu_inline)) inline size_t wcstombs(char *__restrict__ __s, const wchar_t *__restrict__ __pwcs, size_t __n) throw(); 
# 946
extern int rpmatch(const char * __response) throw() __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); 
# 957 "/usr/include/stdlib.h" 3
extern int getsubopt(char **__restrict__ __optionp, char *const *__restrict__ __tokens, char **__restrict__ __valuep) throw()
# 960
 __attribute((__nonnull__(1, 2, 3))) __attribute((__warn_unused_result__)); 
# 968
extern int posix_openpt(int __oflag) __attribute((__warn_unused_result__)); 
# 976
extern int grantpt(int __fd) throw(); 
# 980
extern int unlockpt(int __fd) throw(); 
# 985
extern char *ptsname(int __fd) throw() __attribute((__warn_unused_result__)); 
# 992
extern __attribute((gnu_inline)) inline int ptsname_r(int __fd, char * __buf, size_t __buflen) throw()
# 993
 __attribute((__nonnull__(2))); 
# 996
extern int getpt(); 
# 1003
extern int getloadavg(double  __loadavg[], int __nelem) throw()
# 1004
 __attribute((__nonnull__(1))); 
# 24 "/usr/include/aarch64-linux-gnu/bits/stdlib-float.h" 3
__attribute((__gnu_inline__)) extern inline double 
# 25
 __attribute((__leaf__)) atof(const char *__nptr) throw() 
# 26
{ 
# 27
return strtod(__nptr, (char **)__null); 
# 28
} 
# 23 "/usr/include/aarch64-linux-gnu/bits/stdlib.h" 3
extern char *__realpath_chk(const char *__restrict__ __name, char *__restrict__ __resolved, size_t __resolvedlen) throw()
# 25
 __attribute((__warn_unused_result__)); 
# 26
extern char *__realpath_alias(const char *__restrict__ __name, char *__restrict__ __resolved) throw() __asm__("realpath")
# 28
 __attribute((__warn_unused_result__)); 
# 29
extern char *__realpath_chk_warn(const char *__restrict__ __name, char *__restrict__ __resolved, size_t __resolvedlen) throw() __asm__("__realpath_chk")
# 32
 __attribute((__warn_unused_result__))
# 33
 __attribute((__warning__("second argument of realpath must be either NULL or at least PATH_MAX bytes long buffer"))); 
# 36
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) __attribute((__warn_unused_result__)) 
# 37
__attribute((__leaf__)) extern inline char *realpath(const char *__restrict__ __name, char *__restrict__ __resolved) throw() 
# 38
{ 
# 39
if (__builtin_object_size(__resolved, 2 > 1) != ((size_t)(-1))) 
# 40
{ 
# 42
if (__builtin_object_size(__resolved, 2 > 1) < (4096)) { 
# 43
return __realpath_chk_warn(__name, __resolved, __builtin_object_size(__resolved, 2 > 1)); }  
# 45
return __realpath_chk(__name, __resolved, __builtin_object_size(__resolved, 2 > 1)); 
# 46
}  
# 48
return __realpath_alias(__name, __resolved); 
# 49
} 
# 52
extern int __ptsname_r_chk(int __fd, char * __buf, size_t __buflen, size_t __nreal) throw()
# 53
 __attribute((__nonnull__(2))); 
# 54
extern int __ptsname_r_alias(int __fd, char * __buf, size_t __buflen) throw() __asm__("ptsname_r")
# 56
 __attribute((__nonnull__(2))); 
# 57
extern int __ptsname_r_chk_warn(int __fd, char * __buf, size_t __buflen, size_t __nreal) throw() __asm__("__ptsname_r_chk")
# 60
 __attribute((__nonnull__(2))) __attribute((__warning__("ptsname_r called with buflen bigger than size of buf"))); 
# 63
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline int 
# 64
 __attribute((__leaf__)) ptsname_r(int __fd, char *__buf, size_t __buflen) throw() 
# 65
{ 
# 66
if (__builtin_object_size(__buf, 2 > 1) != ((size_t)(-1))) 
# 67
{ 
# 68
if (!(0)) { 
# 69
return __ptsname_r_chk(__fd, __buf, __buflen, __builtin_object_size(__buf, 2 > 1)); }  
# 70
if (__buflen > __builtin_object_size(__buf, 2 > 1)) { 
# 71
return __ptsname_r_chk_warn(__fd, __buf, __buflen, __builtin_object_size(__buf, 2 > 1)); }  
# 72
}  
# 73
return __ptsname_r_alias(__fd, __buf, __buflen); 
# 74
} 
# 77
extern int __wctomb_chk(char * __s, wchar_t __wchar, size_t __buflen) throw()
# 78
 __attribute((__warn_unused_result__)); 
# 79
extern int __wctomb_alias(char * __s, wchar_t __wchar) throw() __asm__("wctomb")
# 80
 __attribute((__warn_unused_result__)); 
# 82
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) __attribute((__warn_unused_result__)) extern inline int 
# 83
 __attribute((__leaf__)) wctomb(char *__s, wchar_t __wchar) throw() 
# 84
{ 
# 92
if ((__builtin_object_size(__s, 2 > 1) != ((size_t)(-1))) && ((16) > __builtin_object_size(__s, 2 > 1))) { 
# 93
return __wctomb_chk(__s, __wchar, __builtin_object_size(__s, 2 > 1)); }  
# 94
return __wctomb_alias(__s, __wchar); 
# 95
} 
# 98
extern size_t __mbstowcs_chk(wchar_t *__restrict__ __dst, const char *__restrict__ __src, size_t __len, size_t __dstlen) throw(); 
# 101
extern size_t __mbstowcs_alias(wchar_t *__restrict__ __dst, const char *__restrict__ __src, size_t __len) throw() __asm__("mbstowcs"); 
# 105
extern size_t __mbstowcs_chk_warn(wchar_t *__restrict__ __dst, const char *__restrict__ __src, size_t __len, size_t __dstlen) throw() __asm__("__mbstowcs_chk")
# 109
 __attribute((__warning__("mbstowcs called with dst buffer smaller than len * sizeof (wchar_t)"))); 
# 112
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline size_t 
# 113
 __attribute((__leaf__)) mbstowcs(wchar_t *__restrict__ __dst, const char *__restrict__ __src, size_t __len) throw() 
# 115
{ 
# 116
if (__builtin_object_size(__dst, 2 > 1) != ((size_t)(-1))) 
# 117
{ 
# 118
if (!(0)) { 
# 119
return __mbstowcs_chk(__dst, __src, __len, __builtin_object_size(__dst, 2 > 1) / sizeof(wchar_t)); }  
# 122
if (__len > (__builtin_object_size(__dst, 2 > 1) / sizeof(wchar_t))) { 
# 123
return __mbstowcs_chk_warn(__dst, __src, __len, __builtin_object_size(__dst, 2 > 1) / sizeof(wchar_t)); }  
# 125
}  
# 126
return __mbstowcs_alias(__dst, __src, __len); 
# 127
} 
# 130
extern size_t __wcstombs_chk(char *__restrict__ __dst, const wchar_t *__restrict__ __src, size_t __len, size_t __dstlen) throw(); 
# 133
extern size_t __wcstombs_alias(char *__restrict__ __dst, const wchar_t *__restrict__ __src, size_t __len) throw() __asm__("wcstombs"); 
# 137
extern size_t __wcstombs_chk_warn(char *__restrict__ __dst, const wchar_t *__restrict__ __src, size_t __len, size_t __dstlen) throw() __asm__("__wcstombs_chk")
# 141
 __attribute((__warning__("wcstombs called with dst buffer smaller than len"))); 
# 143
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline size_t 
# 144
 __attribute((__leaf__)) wcstombs(char *__restrict__ __dst, const wchar_t *__restrict__ __src, size_t __len) throw() 
# 146
{ 
# 147
if (__builtin_object_size(__dst, 2 > 1) != ((size_t)(-1))) 
# 148
{ 
# 149
if (!(0)) { 
# 150
return __wcstombs_chk(__dst, __src, __len, __builtin_object_size(__dst, 2 > 1)); }  
# 151
if (__len > __builtin_object_size(__dst, 2 > 1)) { 
# 152
return __wcstombs_chk_warn(__dst, __src, __len, __builtin_object_size(__dst, 2 > 1)); }  
# 153
}  
# 154
return __wcstombs_alias(__dst, __src, __len); 
# 155
} 
# 1023 "/usr/include/stdlib.h" 3
}
# 46 "/usr/include/c++/9/bits/std_abs.h" 3
extern "C++" {
# 48
namespace std __attribute((__visibility__("default"))) { 
# 52
using ::abs;
# 56
inline long abs(long __i) { return __builtin_labs(__i); } 
# 61
inline long long abs(long long __x) { return __builtin_llabs(__x); } 
# 71 "/usr/include/c++/9/bits/std_abs.h" 3
constexpr double abs(double __x) 
# 72
{ return __builtin_fabs(__x); } 
# 75
constexpr float abs(float __x) 
# 76
{ return __builtin_fabsf(__x); } 
# 79
constexpr long double abs(long double __x) 
# 80
{ return __builtin_fabsl(__x); } 
# 85
constexpr __int128 abs(__int128 __x) { return (__x >= (0)) ? __x : (-__x); } 
# 108 "/usr/include/c++/9/bits/std_abs.h" 3
}
# 109
}
# 77 "/usr/include/c++/9/cmath" 3
extern "C++" {
# 79
namespace std __attribute((__visibility__("default"))) { 
# 83
using ::acos;
# 87
constexpr float acos(float __x) 
# 88
{ return __builtin_acosf(__x); } 
# 91
constexpr long double acos(long double __x) 
# 92
{ return __builtin_acosl(__x); } 
# 95
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 99
acos(_Tp __x) 
# 100
{ return __builtin_acos(__x); } 
# 102
using ::asin;
# 106
constexpr float asin(float __x) 
# 107
{ return __builtin_asinf(__x); } 
# 110
constexpr long double asin(long double __x) 
# 111
{ return __builtin_asinl(__x); } 
# 114
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 118
asin(_Tp __x) 
# 119
{ return __builtin_asin(__x); } 
# 121
using ::atan;
# 125
constexpr float atan(float __x) 
# 126
{ return __builtin_atanf(__x); } 
# 129
constexpr long double atan(long double __x) 
# 130
{ return __builtin_atanl(__x); } 
# 133
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 137
atan(_Tp __x) 
# 138
{ return __builtin_atan(__x); } 
# 140
using ::atan2;
# 144
constexpr float atan2(float __y, float __x) 
# 145
{ return __builtin_atan2f(__y, __x); } 
# 148
constexpr long double atan2(long double __y, long double __x) 
# 149
{ return __builtin_atan2l(__y, __x); } 
# 152
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 155
atan2(_Tp __y, _Up __x) 
# 156
{ 
# 157
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 158
return atan2((__type)__y, (__type)__x); 
# 159
} 
# 161
using ::ceil;
# 165
constexpr float ceil(float __x) 
# 166
{ return __builtin_ceilf(__x); } 
# 169
constexpr long double ceil(long double __x) 
# 170
{ return __builtin_ceill(__x); } 
# 173
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 177
ceil(_Tp __x) 
# 178
{ return __builtin_ceil(__x); } 
# 180
using ::cos;
# 184
constexpr float cos(float __x) 
# 185
{ return __builtin_cosf(__x); } 
# 188
constexpr long double cos(long double __x) 
# 189
{ return __builtin_cosl(__x); } 
# 192
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 196
cos(_Tp __x) 
# 197
{ return __builtin_cos(__x); } 
# 199
using ::cosh;
# 203
constexpr float cosh(float __x) 
# 204
{ return __builtin_coshf(__x); } 
# 207
constexpr long double cosh(long double __x) 
# 208
{ return __builtin_coshl(__x); } 
# 211
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 215
cosh(_Tp __x) 
# 216
{ return __builtin_cosh(__x); } 
# 218
using ::exp;
# 222
constexpr float exp(float __x) 
# 223
{ return __builtin_expf(__x); } 
# 226
constexpr long double exp(long double __x) 
# 227
{ return __builtin_expl(__x); } 
# 230
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 234
exp(_Tp __x) 
# 235
{ return __builtin_exp(__x); } 
# 237
using ::fabs;
# 241
constexpr float fabs(float __x) 
# 242
{ return __builtin_fabsf(__x); } 
# 245
constexpr long double fabs(long double __x) 
# 246
{ return __builtin_fabsl(__x); } 
# 249
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 253
fabs(_Tp __x) 
# 254
{ return __builtin_fabs(__x); } 
# 256
using ::floor;
# 260
constexpr float floor(float __x) 
# 261
{ return __builtin_floorf(__x); } 
# 264
constexpr long double floor(long double __x) 
# 265
{ return __builtin_floorl(__x); } 
# 268
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 272
floor(_Tp __x) 
# 273
{ return __builtin_floor(__x); } 
# 275
using ::fmod;
# 279
constexpr float fmod(float __x, float __y) 
# 280
{ return __builtin_fmodf(__x, __y); } 
# 283
constexpr long double fmod(long double __x, long double __y) 
# 284
{ return __builtin_fmodl(__x, __y); } 
# 287
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 290
fmod(_Tp __x, _Up __y) 
# 291
{ 
# 292
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 293
return fmod((__type)__x, (__type)__y); 
# 294
} 
# 296
using ::frexp;
# 300
inline float frexp(float __x, int *__exp) 
# 301
{ return __builtin_frexpf(__x, __exp); } 
# 304
inline long double frexp(long double __x, int *__exp) 
# 305
{ return __builtin_frexpl(__x, __exp); } 
# 308
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 312
frexp(_Tp __x, int *__exp) 
# 313
{ return __builtin_frexp(__x, __exp); } 
# 315
using ::ldexp;
# 319
constexpr float ldexp(float __x, int __exp) 
# 320
{ return __builtin_ldexpf(__x, __exp); } 
# 323
constexpr long double ldexp(long double __x, int __exp) 
# 324
{ return __builtin_ldexpl(__x, __exp); } 
# 327
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 331
ldexp(_Tp __x, int __exp) 
# 332
{ return __builtin_ldexp(__x, __exp); } 
# 334
using ::log;
# 338
constexpr float log(float __x) 
# 339
{ return __builtin_logf(__x); } 
# 342
constexpr long double log(long double __x) 
# 343
{ return __builtin_logl(__x); } 
# 346
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 350
log(_Tp __x) 
# 351
{ return __builtin_log(__x); } 
# 353
using ::log10;
# 357
constexpr float log10(float __x) 
# 358
{ return __builtin_log10f(__x); } 
# 361
constexpr long double log10(long double __x) 
# 362
{ return __builtin_log10l(__x); } 
# 365
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 369
log10(_Tp __x) 
# 370
{ return __builtin_log10(__x); } 
# 372
using ::modf;
# 376
inline float modf(float __x, float *__iptr) 
# 377
{ return __builtin_modff(__x, __iptr); } 
# 380
inline long double modf(long double __x, long double *__iptr) 
# 381
{ return __builtin_modfl(__x, __iptr); } 
# 384
using ::pow;
# 388
constexpr float pow(float __x, float __y) 
# 389
{ return __builtin_powf(__x, __y); } 
# 392
constexpr long double pow(long double __x, long double __y) 
# 393
{ return __builtin_powl(__x, __y); } 
# 412 "/usr/include/c++/9/cmath" 3
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 415
pow(_Tp __x, _Up __y) 
# 416
{ 
# 417
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 418
return pow((__type)__x, (__type)__y); 
# 419
} 
# 421
using ::sin;
# 425
constexpr float sin(float __x) 
# 426
{ return __builtin_sinf(__x); } 
# 429
constexpr long double sin(long double __x) 
# 430
{ return __builtin_sinl(__x); } 
# 433
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 437
sin(_Tp __x) 
# 438
{ return __builtin_sin(__x); } 
# 440
using ::sinh;
# 444
constexpr float sinh(float __x) 
# 445
{ return __builtin_sinhf(__x); } 
# 448
constexpr long double sinh(long double __x) 
# 449
{ return __builtin_sinhl(__x); } 
# 452
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 456
sinh(_Tp __x) 
# 457
{ return __builtin_sinh(__x); } 
# 459
using ::sqrt;
# 463
constexpr float sqrt(float __x) 
# 464
{ return __builtin_sqrtf(__x); } 
# 467
constexpr long double sqrt(long double __x) 
# 468
{ return __builtin_sqrtl(__x); } 
# 471
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 475
sqrt(_Tp __x) 
# 476
{ return __builtin_sqrt(__x); } 
# 478
using ::tan;
# 482
constexpr float tan(float __x) 
# 483
{ return __builtin_tanf(__x); } 
# 486
constexpr long double tan(long double __x) 
# 487
{ return __builtin_tanl(__x); } 
# 490
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 494
tan(_Tp __x) 
# 495
{ return __builtin_tan(__x); } 
# 497
using ::tanh;
# 501
constexpr float tanh(float __x) 
# 502
{ return __builtin_tanhf(__x); } 
# 505
constexpr long double tanh(long double __x) 
# 506
{ return __builtin_tanhl(__x); } 
# 509
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 513
tanh(_Tp __x) 
# 514
{ return __builtin_tanh(__x); } 
# 537 "/usr/include/c++/9/cmath" 3
constexpr int fpclassify(float __x) 
# 538
{ return __builtin_fpclassify(0, 1, 4, 3, 2, __x); 
# 539
} 
# 542
constexpr int fpclassify(double __x) 
# 543
{ return __builtin_fpclassify(0, 1, 4, 3, 2, __x); 
# 544
} 
# 547
constexpr int fpclassify(long double __x) 
# 548
{ return __builtin_fpclassify(0, 1, 4, 3, 2, __x); 
# 549
} 
# 553
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, int> ::__type 
# 556
fpclassify(_Tp __x) 
# 557
{ return (__x != 0) ? 4 : 2; } 
# 562
constexpr bool isfinite(float __x) 
# 563
{ return __builtin_isfinite(__x); } 
# 566
constexpr bool isfinite(double __x) 
# 567
{ return __builtin_isfinite(__x); } 
# 570
constexpr bool isfinite(long double __x) 
# 571
{ return __builtin_isfinite(__x); } 
# 575
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, bool> ::__type 
# 578
isfinite(_Tp __x) 
# 579
{ return true; } 
# 584
constexpr bool isinf(float __x) 
# 585
{ return __builtin_isinf(__x); } 
# 592
constexpr bool isinf(double __x) 
# 593
{ return __builtin_isinf(__x); } 
# 597
constexpr bool isinf(long double __x) 
# 598
{ return __builtin_isinf(__x); } 
# 602
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, bool> ::__type 
# 605
isinf(_Tp __x) 
# 606
{ return false; } 
# 611
constexpr bool isnan(float __x) 
# 612
{ return __builtin_isnan(__x); } 
# 619
constexpr bool isnan(double __x) 
# 620
{ return __builtin_isnan(__x); } 
# 624
constexpr bool isnan(long double __x) 
# 625
{ return __builtin_isnan(__x); } 
# 629
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, bool> ::__type 
# 632
isnan(_Tp __x) 
# 633
{ return false; } 
# 638
constexpr bool isnormal(float __x) 
# 639
{ return __builtin_isnormal(__x); } 
# 642
constexpr bool isnormal(double __x) 
# 643
{ return __builtin_isnormal(__x); } 
# 646
constexpr bool isnormal(long double __x) 
# 647
{ return __builtin_isnormal(__x); } 
# 651
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, bool> ::__type 
# 654
isnormal(_Tp __x) 
# 655
{ return (__x != 0) ? true : false; } 
# 661
constexpr bool signbit(float __x) 
# 662
{ return __builtin_signbit(__x); } 
# 665
constexpr bool signbit(double __x) 
# 666
{ return __builtin_signbit(__x); } 
# 669
constexpr bool signbit(long double __x) 
# 670
{ return __builtin_signbit(__x); } 
# 674
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, bool> ::__type 
# 677
signbit(_Tp __x) 
# 678
{ return (__x < 0) ? true : false; } 
# 683
constexpr bool isgreater(float __x, float __y) 
# 684
{ return __builtin_isgreater(__x, __y); } 
# 687
constexpr bool isgreater(double __x, double __y) 
# 688
{ return __builtin_isgreater(__x, __y); } 
# 691
constexpr bool isgreater(long double __x, long double __y) 
# 692
{ return __builtin_isgreater(__x, __y); } 
# 696
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value && __is_arithmetic< _Up> ::__value, bool> ::__type 
# 700
isgreater(_Tp __x, _Up __y) 
# 701
{ 
# 702
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 703
return __builtin_isgreater((__type)__x, (__type)__y); 
# 704
} 
# 709
constexpr bool isgreaterequal(float __x, float __y) 
# 710
{ return __builtin_isgreaterequal(__x, __y); } 
# 713
constexpr bool isgreaterequal(double __x, double __y) 
# 714
{ return __builtin_isgreaterequal(__x, __y); } 
# 717
constexpr bool isgreaterequal(long double __x, long double __y) 
# 718
{ return __builtin_isgreaterequal(__x, __y); } 
# 722
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value && __is_arithmetic< _Up> ::__value, bool> ::__type 
# 726
isgreaterequal(_Tp __x, _Up __y) 
# 727
{ 
# 728
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 729
return __builtin_isgreaterequal((__type)__x, (__type)__y); 
# 730
} 
# 735
constexpr bool isless(float __x, float __y) 
# 736
{ return __builtin_isless(__x, __y); } 
# 739
constexpr bool isless(double __x, double __y) 
# 740
{ return __builtin_isless(__x, __y); } 
# 743
constexpr bool isless(long double __x, long double __y) 
# 744
{ return __builtin_isless(__x, __y); } 
# 748
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value && __is_arithmetic< _Up> ::__value, bool> ::__type 
# 752
isless(_Tp __x, _Up __y) 
# 753
{ 
# 754
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 755
return __builtin_isless((__type)__x, (__type)__y); 
# 756
} 
# 761
constexpr bool islessequal(float __x, float __y) 
# 762
{ return __builtin_islessequal(__x, __y); } 
# 765
constexpr bool islessequal(double __x, double __y) 
# 766
{ return __builtin_islessequal(__x, __y); } 
# 769
constexpr bool islessequal(long double __x, long double __y) 
# 770
{ return __builtin_islessequal(__x, __y); } 
# 774
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value && __is_arithmetic< _Up> ::__value, bool> ::__type 
# 778
islessequal(_Tp __x, _Up __y) 
# 779
{ 
# 780
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 781
return __builtin_islessequal((__type)__x, (__type)__y); 
# 782
} 
# 787
constexpr bool islessgreater(float __x, float __y) 
# 788
{ return __builtin_islessgreater(__x, __y); } 
# 791
constexpr bool islessgreater(double __x, double __y) 
# 792
{ return __builtin_islessgreater(__x, __y); } 
# 795
constexpr bool islessgreater(long double __x, long double __y) 
# 796
{ return __builtin_islessgreater(__x, __y); } 
# 800
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value && __is_arithmetic< _Up> ::__value, bool> ::__type 
# 804
islessgreater(_Tp __x, _Up __y) 
# 805
{ 
# 806
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 807
return __builtin_islessgreater((__type)__x, (__type)__y); 
# 808
} 
# 813
constexpr bool isunordered(float __x, float __y) 
# 814
{ return __builtin_isunordered(__x, __y); } 
# 817
constexpr bool isunordered(double __x, double __y) 
# 818
{ return __builtin_isunordered(__x, __y); } 
# 821
constexpr bool isunordered(long double __x, long double __y) 
# 822
{ return __builtin_isunordered(__x, __y); } 
# 826
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value && __is_arithmetic< _Up> ::__value, bool> ::__type 
# 830
isunordered(_Tp __x, _Up __y) 
# 831
{ 
# 832
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 833
return __builtin_isunordered((__type)__x, (__type)__y); 
# 834
} 
# 1065 "/usr/include/c++/9/cmath" 3
using ::double_t;
# 1066
using ::float_t;
# 1069
using ::acosh;
# 1070
using ::acoshf;
# 1071
using ::acoshl;
# 1073
using ::asinh;
# 1074
using ::asinhf;
# 1075
using ::asinhl;
# 1077
using ::atanh;
# 1078
using ::atanhf;
# 1079
using ::atanhl;
# 1081
using ::cbrt;
# 1082
using ::cbrtf;
# 1083
using ::cbrtl;
# 1085
using ::copysign;
# 1086
using ::copysignf;
# 1087
using ::copysignl;
# 1089
using ::erf;
# 1090
using ::erff;
# 1091
using ::erfl;
# 1093
using ::erfc;
# 1094
using ::erfcf;
# 1095
using ::erfcl;
# 1097
using ::exp2;
# 1098
using ::exp2f;
# 1099
using ::exp2l;
# 1101
using ::expm1;
# 1102
using ::expm1f;
# 1103
using ::expm1l;
# 1105
using ::fdim;
# 1106
using ::fdimf;
# 1107
using ::fdiml;
# 1109
using ::fma;
# 1110
using ::fmaf;
# 1111
using ::fmal;
# 1113
using ::fmax;
# 1114
using ::fmaxf;
# 1115
using ::fmaxl;
# 1117
using ::fmin;
# 1118
using ::fminf;
# 1119
using ::fminl;
# 1121
using ::hypot;
# 1122
using ::hypotf;
# 1123
using ::hypotl;
# 1125
using ::ilogb;
# 1126
using ::ilogbf;
# 1127
using ::ilogbl;
# 1129
using ::lgamma;
# 1130
using ::lgammaf;
# 1131
using ::lgammal;
# 1134
using ::llrint;
# 1135
using ::llrintf;
# 1136
using ::llrintl;
# 1138
using ::llround;
# 1139
using ::llroundf;
# 1140
using ::llroundl;
# 1143
using ::log1p;
# 1144
using ::log1pf;
# 1145
using ::log1pl;
# 1147
using ::log2;
# 1148
using ::log2f;
# 1149
using ::log2l;
# 1151
using ::logb;
# 1152
using ::logbf;
# 1153
using ::logbl;
# 1155
using ::lrint;
# 1156
using ::lrintf;
# 1157
using ::lrintl;
# 1159
using ::lround;
# 1160
using ::lroundf;
# 1161
using ::lroundl;
# 1163
using ::nan;
# 1164
using ::nanf;
# 1165
using ::nanl;
# 1167
using ::nearbyint;
# 1168
using ::nearbyintf;
# 1169
using ::nearbyintl;
# 1171
using ::nextafter;
# 1172
using ::nextafterf;
# 1173
using ::nextafterl;
# 1175
using ::nexttoward;
# 1176
using ::nexttowardf;
# 1177
using ::nexttowardl;
# 1179
using ::remainder;
# 1180
using ::remainderf;
# 1181
using ::remainderl;
# 1183
using ::remquo;
# 1184
using ::remquof;
# 1185
using ::remquol;
# 1187
using ::rint;
# 1188
using ::rintf;
# 1189
using ::rintl;
# 1191
using ::round;
# 1192
using ::roundf;
# 1193
using ::roundl;
# 1195
using ::scalbln;
# 1196
using ::scalblnf;
# 1197
using ::scalblnl;
# 1199
using ::scalbn;
# 1200
using ::scalbnf;
# 1201
using ::scalbnl;
# 1203
using ::tgamma;
# 1204
using ::tgammaf;
# 1205
using ::tgammal;
# 1207
using ::trunc;
# 1208
using ::truncf;
# 1209
using ::truncl;
# 1214
constexpr float acosh(float __x) 
# 1215
{ return __builtin_acoshf(__x); } 
# 1218
constexpr long double acosh(long double __x) 
# 1219
{ return __builtin_acoshl(__x); } 
# 1223
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1226
acosh(_Tp __x) 
# 1227
{ return __builtin_acosh(__x); } 
# 1232
constexpr float asinh(float __x) 
# 1233
{ return __builtin_asinhf(__x); } 
# 1236
constexpr long double asinh(long double __x) 
# 1237
{ return __builtin_asinhl(__x); } 
# 1241
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1244
asinh(_Tp __x) 
# 1245
{ return __builtin_asinh(__x); } 
# 1250
constexpr float atanh(float __x) 
# 1251
{ return __builtin_atanhf(__x); } 
# 1254
constexpr long double atanh(long double __x) 
# 1255
{ return __builtin_atanhl(__x); } 
# 1259
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1262
atanh(_Tp __x) 
# 1263
{ return __builtin_atanh(__x); } 
# 1268
constexpr float cbrt(float __x) 
# 1269
{ return __builtin_cbrtf(__x); } 
# 1272
constexpr long double cbrt(long double __x) 
# 1273
{ return __builtin_cbrtl(__x); } 
# 1277
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1280
cbrt(_Tp __x) 
# 1281
{ return __builtin_cbrt(__x); } 
# 1286
constexpr float copysign(float __x, float __y) 
# 1287
{ return __builtin_copysignf(__x, __y); } 
# 1290
constexpr long double copysign(long double __x, long double __y) 
# 1291
{ return __builtin_copysignl(__x, __y); } 
# 1295
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1297
copysign(_Tp __x, _Up __y) 
# 1298
{ 
# 1299
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1300
return copysign((__type)__x, (__type)__y); 
# 1301
} 
# 1306
constexpr float erf(float __x) 
# 1307
{ return __builtin_erff(__x); } 
# 1310
constexpr long double erf(long double __x) 
# 1311
{ return __builtin_erfl(__x); } 
# 1315
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1318
erf(_Tp __x) 
# 1319
{ return __builtin_erf(__x); } 
# 1324
constexpr float erfc(float __x) 
# 1325
{ return __builtin_erfcf(__x); } 
# 1328
constexpr long double erfc(long double __x) 
# 1329
{ return __builtin_erfcl(__x); } 
# 1333
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1336
erfc(_Tp __x) 
# 1337
{ return __builtin_erfc(__x); } 
# 1342
constexpr float exp2(float __x) 
# 1343
{ return __builtin_exp2f(__x); } 
# 1346
constexpr long double exp2(long double __x) 
# 1347
{ return __builtin_exp2l(__x); } 
# 1351
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1354
exp2(_Tp __x) 
# 1355
{ return __builtin_exp2(__x); } 
# 1360
constexpr float expm1(float __x) 
# 1361
{ return __builtin_expm1f(__x); } 
# 1364
constexpr long double expm1(long double __x) 
# 1365
{ return __builtin_expm1l(__x); } 
# 1369
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1372
expm1(_Tp __x) 
# 1373
{ return __builtin_expm1(__x); } 
# 1378
constexpr float fdim(float __x, float __y) 
# 1379
{ return __builtin_fdimf(__x, __y); } 
# 1382
constexpr long double fdim(long double __x, long double __y) 
# 1383
{ return __builtin_fdiml(__x, __y); } 
# 1387
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1389
fdim(_Tp __x, _Up __y) 
# 1390
{ 
# 1391
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1392
return fdim((__type)__x, (__type)__y); 
# 1393
} 
# 1398
constexpr float fma(float __x, float __y, float __z) 
# 1399
{ return __builtin_fmaf(__x, __y, __z); } 
# 1402
constexpr long double fma(long double __x, long double __y, long double __z) 
# 1403
{ return __builtin_fmal(__x, __y, __z); } 
# 1407
template< class _Tp, class _Up, class _Vp> constexpr typename __gnu_cxx::__promote_3< _Tp, _Up, _Vp> ::__type 
# 1409
fma(_Tp __x, _Up __y, _Vp __z) 
# 1410
{ 
# 1411
typedef typename __gnu_cxx::__promote_3< _Tp, _Up, _Vp> ::__type __type; 
# 1412
return fma((__type)__x, (__type)__y, (__type)__z); 
# 1413
} 
# 1418
constexpr float fmax(float __x, float __y) 
# 1419
{ return __builtin_fmaxf(__x, __y); } 
# 1422
constexpr long double fmax(long double __x, long double __y) 
# 1423
{ return __builtin_fmaxl(__x, __y); } 
# 1427
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1429
fmax(_Tp __x, _Up __y) 
# 1430
{ 
# 1431
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1432
return fmax((__type)__x, (__type)__y); 
# 1433
} 
# 1438
constexpr float fmin(float __x, float __y) 
# 1439
{ return __builtin_fminf(__x, __y); } 
# 1442
constexpr long double fmin(long double __x, long double __y) 
# 1443
{ return __builtin_fminl(__x, __y); } 
# 1447
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1449
fmin(_Tp __x, _Up __y) 
# 1450
{ 
# 1451
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1452
return fmin((__type)__x, (__type)__y); 
# 1453
} 
# 1458
constexpr float hypot(float __x, float __y) 
# 1459
{ return __builtin_hypotf(__x, __y); } 
# 1462
constexpr long double hypot(long double __x, long double __y) 
# 1463
{ return __builtin_hypotl(__x, __y); } 
# 1467
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1469
hypot(_Tp __x, _Up __y) 
# 1470
{ 
# 1471
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1472
return hypot((__type)__x, (__type)__y); 
# 1473
} 
# 1478
constexpr int ilogb(float __x) 
# 1479
{ return __builtin_ilogbf(__x); } 
# 1482
constexpr int ilogb(long double __x) 
# 1483
{ return __builtin_ilogbl(__x); } 
# 1487
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, int> ::__type 
# 1491
ilogb(_Tp __x) 
# 1492
{ return __builtin_ilogb(__x); } 
# 1497
constexpr float lgamma(float __x) 
# 1498
{ return __builtin_lgammaf(__x); } 
# 1501
constexpr long double lgamma(long double __x) 
# 1502
{ return __builtin_lgammal(__x); } 
# 1506
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1509
lgamma(_Tp __x) 
# 1510
{ return __builtin_lgamma(__x); } 
# 1515
constexpr long long llrint(float __x) 
# 1516
{ return __builtin_llrintf(__x); } 
# 1519
constexpr long long llrint(long double __x) 
# 1520
{ return __builtin_llrintl(__x); } 
# 1524
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, long long> ::__type 
# 1527
llrint(_Tp __x) 
# 1528
{ return __builtin_llrint(__x); } 
# 1533
constexpr long long llround(float __x) 
# 1534
{ return __builtin_llroundf(__x); } 
# 1537
constexpr long long llround(long double __x) 
# 1538
{ return __builtin_llroundl(__x); } 
# 1542
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, long long> ::__type 
# 1545
llround(_Tp __x) 
# 1546
{ return __builtin_llround(__x); } 
# 1551
constexpr float log1p(float __x) 
# 1552
{ return __builtin_log1pf(__x); } 
# 1555
constexpr long double log1p(long double __x) 
# 1556
{ return __builtin_log1pl(__x); } 
# 1560
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1563
log1p(_Tp __x) 
# 1564
{ return __builtin_log1p(__x); } 
# 1570
constexpr float log2(float __x) 
# 1571
{ return __builtin_log2f(__x); } 
# 1574
constexpr long double log2(long double __x) 
# 1575
{ return __builtin_log2l(__x); } 
# 1579
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1582
log2(_Tp __x) 
# 1583
{ return __builtin_log2(__x); } 
# 1588
constexpr float logb(float __x) 
# 1589
{ return __builtin_logbf(__x); } 
# 1592
constexpr long double logb(long double __x) 
# 1593
{ return __builtin_logbl(__x); } 
# 1597
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1600
logb(_Tp __x) 
# 1601
{ return __builtin_logb(__x); } 
# 1606
constexpr long lrint(float __x) 
# 1607
{ return __builtin_lrintf(__x); } 
# 1610
constexpr long lrint(long double __x) 
# 1611
{ return __builtin_lrintl(__x); } 
# 1615
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, long> ::__type 
# 1618
lrint(_Tp __x) 
# 1619
{ return __builtin_lrint(__x); } 
# 1624
constexpr long lround(float __x) 
# 1625
{ return __builtin_lroundf(__x); } 
# 1628
constexpr long lround(long double __x) 
# 1629
{ return __builtin_lroundl(__x); } 
# 1633
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, long> ::__type 
# 1636
lround(_Tp __x) 
# 1637
{ return __builtin_lround(__x); } 
# 1642
constexpr float nearbyint(float __x) 
# 1643
{ return __builtin_nearbyintf(__x); } 
# 1646
constexpr long double nearbyint(long double __x) 
# 1647
{ return __builtin_nearbyintl(__x); } 
# 1651
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1654
nearbyint(_Tp __x) 
# 1655
{ return __builtin_nearbyint(__x); } 
# 1660
constexpr float nextafter(float __x, float __y) 
# 1661
{ return __builtin_nextafterf(__x, __y); } 
# 1664
constexpr long double nextafter(long double __x, long double __y) 
# 1665
{ return __builtin_nextafterl(__x, __y); } 
# 1669
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1671
nextafter(_Tp __x, _Up __y) 
# 1672
{ 
# 1673
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1674
return nextafter((__type)__x, (__type)__y); 
# 1675
} 
# 1680
constexpr float nexttoward(float __x, long double __y) 
# 1681
{ return __builtin_nexttowardf(__x, __y); } 
# 1684
constexpr long double nexttoward(long double __x, long double __y) 
# 1685
{ return __builtin_nexttowardl(__x, __y); } 
# 1689
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1692
nexttoward(_Tp __x, long double __y) 
# 1693
{ return __builtin_nexttoward(__x, __y); } 
# 1698
constexpr float remainder(float __x, float __y) 
# 1699
{ return __builtin_remainderf(__x, __y); } 
# 1702
constexpr long double remainder(long double __x, long double __y) 
# 1703
{ return __builtin_remainderl(__x, __y); } 
# 1707
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1709
remainder(_Tp __x, _Up __y) 
# 1710
{ 
# 1711
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1712
return remainder((__type)__x, (__type)__y); 
# 1713
} 
# 1718
inline float remquo(float __x, float __y, int *__pquo) 
# 1719
{ return __builtin_remquof(__x, __y, __pquo); } 
# 1722
inline long double remquo(long double __x, long double __y, int *__pquo) 
# 1723
{ return __builtin_remquol(__x, __y, __pquo); } 
# 1727
template< class _Tp, class _Up> inline typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1729
remquo(_Tp __x, _Up __y, int *__pquo) 
# 1730
{ 
# 1731
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1732
return remquo((__type)__x, (__type)__y, __pquo); 
# 1733
} 
# 1738
constexpr float rint(float __x) 
# 1739
{ return __builtin_rintf(__x); } 
# 1742
constexpr long double rint(long double __x) 
# 1743
{ return __builtin_rintl(__x); } 
# 1747
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1750
rint(_Tp __x) 
# 1751
{ return __builtin_rint(__x); } 
# 1756
constexpr float round(float __x) 
# 1757
{ return __builtin_roundf(__x); } 
# 1760
constexpr long double round(long double __x) 
# 1761
{ return __builtin_roundl(__x); } 
# 1765
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1768
round(_Tp __x) 
# 1769
{ return __builtin_round(__x); } 
# 1774
constexpr float scalbln(float __x, long __ex) 
# 1775
{ return __builtin_scalblnf(__x, __ex); } 
# 1778
constexpr long double scalbln(long double __x, long __ex) 
# 1779
{ return __builtin_scalblnl(__x, __ex); } 
# 1783
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1786
scalbln(_Tp __x, long __ex) 
# 1787
{ return __builtin_scalbln(__x, __ex); } 
# 1792
constexpr float scalbn(float __x, int __ex) 
# 1793
{ return __builtin_scalbnf(__x, __ex); } 
# 1796
constexpr long double scalbn(long double __x, int __ex) 
# 1797
{ return __builtin_scalbnl(__x, __ex); } 
# 1801
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1804
scalbn(_Tp __x, int __ex) 
# 1805
{ return __builtin_scalbn(__x, __ex); } 
# 1810
constexpr float tgamma(float __x) 
# 1811
{ return __builtin_tgammaf(__x); } 
# 1814
constexpr long double tgamma(long double __x) 
# 1815
{ return __builtin_tgammal(__x); } 
# 1819
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1822
tgamma(_Tp __x) 
# 1823
{ return __builtin_tgamma(__x); } 
# 1828
constexpr float trunc(float __x) 
# 1829
{ return __builtin_truncf(__x); } 
# 1832
constexpr long double trunc(long double __x) 
# 1833
{ return __builtin_truncl(__x); } 
# 1837
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1840
trunc(_Tp __x) 
# 1841
{ return __builtin_trunc(__x); } 
# 1924 "/usr/include/c++/9/cmath" 3
}
# 1930
}
# 38 "/usr/include/c++/9/math.h" 3
using std::abs;
# 39
using std::acos;
# 40
using std::asin;
# 41
using std::atan;
# 42
using std::atan2;
# 43
using std::cos;
# 44
using std::sin;
# 45
using std::tan;
# 46
using std::cosh;
# 47
using std::sinh;
# 48
using std::tanh;
# 49
using std::exp;
# 50
using std::frexp;
# 51
using std::ldexp;
# 52
using std::log;
# 53
using std::log10;
# 54
using std::modf;
# 55
using std::pow;
# 56
using std::sqrt;
# 57
using std::ceil;
# 58
using std::fabs;
# 59
using std::floor;
# 60
using std::fmod;
# 63
using std::fpclassify;
# 64
using std::isfinite;
# 65
using std::isinf;
# 66
using std::isnan;
# 67
using std::isnormal;
# 68
using std::signbit;
# 69
using std::isgreater;
# 70
using std::isgreaterequal;
# 71
using std::isless;
# 72
using std::islessequal;
# 73
using std::islessgreater;
# 74
using std::isunordered;
# 78
using std::acosh;
# 79
using std::asinh;
# 80
using std::atanh;
# 81
using std::cbrt;
# 82
using std::copysign;
# 83
using std::erf;
# 84
using std::erfc;
# 85
using std::exp2;
# 86
using std::expm1;
# 87
using std::fdim;
# 88
using std::fma;
# 89
using std::fmax;
# 90
using std::fmin;
# 91
using std::hypot;
# 92
using std::ilogb;
# 93
using std::lgamma;
# 94
using std::llrint;
# 95
using std::llround;
# 96
using std::log1p;
# 97
using std::log2;
# 98
using std::logb;
# 99
using std::lrint;
# 100
using std::lround;
# 101
using std::nearbyint;
# 102
using std::nextafter;
# 103
using std::nexttoward;
# 104
using std::remainder;
# 105
using std::remquo;
# 106
using std::rint;
# 107
using std::round;
# 108
using std::scalbln;
# 109
using std::scalbn;
# 110
using std::tgamma;
# 111
using std::trunc;
# 121 "/usr/include/c++/9/cstdlib" 3
extern "C++" {
# 123
namespace std __attribute((__visibility__("default"))) { 
# 127
using ::div_t;
# 128
using ::ldiv_t;
# 130
using ::abort;
# 134
using ::atexit;
# 137
using ::at_quick_exit;
# 140
using ::atof;
# 141
using ::atoi;
# 142
using ::atol;
# 143
using ::bsearch;
# 144
using ::calloc;
# 145
using ::div;
# 146
using ::exit;
# 147
using ::free;
# 148
using ::getenv;
# 149
using ::labs;
# 150
using ::ldiv;
# 151
using ::malloc;
# 153
using ::mblen;
# 154
using ::mbstowcs;
# 155
using ::mbtowc;
# 157
using ::qsort;
# 160
using ::quick_exit;
# 163
using ::rand;
# 164
using ::realloc;
# 165
using ::srand;
# 166
using ::strtod;
# 167
using ::strtol;
# 168
using ::strtoul;
# 169
using ::system;
# 171
using ::wcstombs;
# 172
using ::wctomb;
# 177
inline ldiv_t div(long __i, long __j) { return ldiv(__i, __j); } 
# 182
}
# 195 "/usr/include/c++/9/cstdlib" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 200
using ::lldiv_t;
# 206
using ::_Exit;
# 210
using ::llabs;
# 213
inline lldiv_t div(long long __n, long long __d) 
# 214
{ lldiv_t __q; (__q.quot) = (__n / __d); (__q.rem) = (__n % __d); return __q; } 
# 216
using ::lldiv;
# 227 "/usr/include/c++/9/cstdlib" 3
using ::atoll;
# 228
using ::strtoll;
# 229
using ::strtoull;
# 231
using ::strtof;
# 232
using ::strtold;
# 235
}
# 237
namespace std { 
# 240
using __gnu_cxx::lldiv_t;
# 242
using __gnu_cxx::_Exit;
# 244
using __gnu_cxx::llabs;
# 245
using __gnu_cxx::div;
# 246
using __gnu_cxx::lldiv;
# 248
using __gnu_cxx::atoll;
# 249
using __gnu_cxx::strtof;
# 250
using __gnu_cxx::strtoll;
# 251
using __gnu_cxx::strtoull;
# 252
using __gnu_cxx::strtold;
# 253
}
# 257
}
# 38 "/usr/include/c++/9/stdlib.h" 3
using std::abort;
# 39
using std::atexit;
# 40
using std::exit;
# 43
using std::at_quick_exit;
# 46
using std::quick_exit;
# 54
using std::abs;
# 55
using std::atof;
# 56
using std::atoi;
# 57
using std::atol;
# 58
using std::bsearch;
# 59
using std::calloc;
# 60
using std::div;
# 61
using std::free;
# 62
using std::getenv;
# 63
using std::labs;
# 64
using std::ldiv;
# 65
using std::malloc;
# 67
using std::mblen;
# 68
using std::mbstowcs;
# 69
using std::mbtowc;
# 71
using std::qsort;
# 72
using std::rand;
# 73
using std::realloc;
# 74
using std::srand;
# 75
using std::strtod;
# 76
using std::strtol;
# 77
using std::strtoul;
# 78
using std::system;
# 80
using std::wcstombs;
# 81
using std::wctomb;
# 10622 "/usr/local/cuda/include/crt/math_functions.h"
namespace std { 
# 10623
constexpr bool signbit(float x); 
# 10624
constexpr bool signbit(double x); 
# 10625
constexpr bool signbit(long double x); 
# 10626
constexpr bool isfinite(float x); 
# 10627
constexpr bool isfinite(double x); 
# 10628
constexpr bool isfinite(long double x); 
# 10629
constexpr bool isnan(float x); 
# 10634
constexpr bool isnan(double x); 
# 10636
constexpr bool isnan(long double x); 
# 10637
constexpr bool isinf(float x); 
# 10642
constexpr bool isinf(double x); 
# 10644
constexpr bool isinf(long double x); 
# 10645
}
# 10798 "/usr/local/cuda/include/crt/math_functions.h"
namespace std { 
# 10800
template< class T> extern T __pow_helper(T, int); 
# 10801
template< class T> extern T __cmath_power(T, unsigned); 
# 10802
}
# 10804
using std::abs;
# 10805
using std::fabs;
# 10806
using std::ceil;
# 10807
using std::floor;
# 10808
using std::sqrt;
# 10810
using std::pow;
# 10812
using std::log;
# 10813
using std::log10;
# 10814
using std::fmod;
# 10815
using std::modf;
# 10816
using std::exp;
# 10817
using std::frexp;
# 10818
using std::ldexp;
# 10819
using std::asin;
# 10820
using std::sin;
# 10821
using std::sinh;
# 10822
using std::acos;
# 10823
using std::cos;
# 10824
using std::cosh;
# 10825
using std::atan;
# 10826
using std::atan2;
# 10827
using std::tan;
# 10828
using std::tanh;
# 11199 "/usr/local/cuda/include/crt/math_functions.h"
namespace std { 
# 11208 "/usr/local/cuda/include/crt/math_functions.h"
extern inline long long abs(long long); 
# 11218 "/usr/local/cuda/include/crt/math_functions.h"
extern inline long abs(long); 
# 11219
extern constexpr float abs(float); 
# 11220
extern constexpr double abs(double); 
# 11221
extern constexpr float fabs(float); 
# 11222
extern constexpr float ceil(float); 
# 11223
extern constexpr float floor(float); 
# 11224
extern constexpr float sqrt(float); 
# 11225
extern constexpr float pow(float, float); 
# 11230
template< class _Tp, class _Up> extern constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type pow(_Tp, _Up); 
# 11240
extern constexpr float log(float); 
# 11241
extern constexpr float log10(float); 
# 11242
extern constexpr float fmod(float, float); 
# 11243
extern inline float modf(float, float *); 
# 11244
extern constexpr float exp(float); 
# 11245
extern inline float frexp(float, int *); 
# 11246
extern constexpr float ldexp(float, int); 
# 11247
extern constexpr float asin(float); 
# 11248
extern constexpr float sin(float); 
# 11249
extern constexpr float sinh(float); 
# 11250
extern constexpr float acos(float); 
# 11251
extern constexpr float cos(float); 
# 11252
extern constexpr float cosh(float); 
# 11253
extern constexpr float atan(float); 
# 11254
extern constexpr float atan2(float, float); 
# 11255
extern constexpr float tan(float); 
# 11256
extern constexpr float tanh(float); 
# 11335 "/usr/local/cuda/include/crt/math_functions.h"
}
# 11441 "/usr/local/cuda/include/crt/math_functions.h"
namespace std { 
# 11442
constexpr float logb(float a); 
# 11443
constexpr int ilogb(float a); 
# 11444
constexpr float scalbn(float a, int b); 
# 11445
constexpr float scalbln(float a, long b); 
# 11446
constexpr float exp2(float a); 
# 11447
constexpr float expm1(float a); 
# 11448
constexpr float log2(float a); 
# 11449
constexpr float log1p(float a); 
# 11450
constexpr float acosh(float a); 
# 11451
constexpr float asinh(float a); 
# 11452
constexpr float atanh(float a); 
# 11453
constexpr float hypot(float a, float b); 
# 11454
constexpr float cbrt(float a); 
# 11455
constexpr float erf(float a); 
# 11456
constexpr float erfc(float a); 
# 11457
constexpr float lgamma(float a); 
# 11458
constexpr float tgamma(float a); 
# 11459
constexpr float copysign(float a, float b); 
# 11460
constexpr float nextafter(float a, float b); 
# 11461
constexpr float remainder(float a, float b); 
# 11462
inline float remquo(float a, float b, int * quo); 
# 11463
constexpr float round(float a); 
# 11464
constexpr long lround(float a); 
# 11465
constexpr long long llround(float a); 
# 11466
constexpr float trunc(float a); 
# 11467
constexpr float rint(float a); 
# 11468
constexpr long lrint(float a); 
# 11469
constexpr long long llrint(float a); 
# 11470
constexpr float nearbyint(float a); 
# 11471
constexpr float fdim(float a, float b); 
# 11472
constexpr float fma(float a, float b, float c); 
# 11473
constexpr float fmax(float a, float b); 
# 11474
constexpr float fmin(float a, float b); 
# 11475
}
# 11580 "/usr/local/cuda/include/crt/math_functions.h"
static inline float exp10(const float a); 
# 11582
static inline float rsqrt(const float a); 
# 11584
static inline float rcbrt(const float a); 
# 11586
static inline float sinpi(const float a); 
# 11588
static inline float cospi(const float a); 
# 11590
static inline void sincospi(const float a, float *const sptr, float *const cptr); 
# 11592
static inline void sincos(const float a, float *const sptr, float *const cptr); 
# 11594
static inline float j0(const float a); 
# 11596
static inline float j1(const float a); 
# 11598
static inline float jn(const int n, const float a); 
# 11600
static inline float y0(const float a); 
# 11602
static inline float y1(const float a); 
# 11604
static inline float yn(const int n, const float a); 
# 11606
__attribute__((unused)) static inline float cyl_bessel_i0(const float a); 
# 11608
__attribute__((unused)) static inline float cyl_bessel_i1(const float a); 
# 11610
static inline float erfinv(const float a); 
# 11612
static inline float erfcinv(const float a); 
# 11614
static inline float normcdfinv(const float a); 
# 11616
static inline float normcdf(const float a); 
# 11618
static inline float erfcx(const float a); 
# 11620
static inline double copysign(const double a, const float b); 
# 11622
static inline double copysign(const float a, const double b); 
# 11630
static inline unsigned min(const unsigned a, const unsigned b); 
# 11638
static inline unsigned min(const int a, const unsigned b); 
# 11646
static inline unsigned min(const unsigned a, const int b); 
# 11654
static inline long min(const long a, const long b); 
# 11662
static inline unsigned long min(const unsigned long a, const unsigned long b); 
# 11670
static inline unsigned long min(const long a, const unsigned long b); 
# 11678
static inline unsigned long min(const unsigned long a, const long b); 
# 11686
static inline long long min(const long long a, const long long b); 
# 11694
static inline unsigned long long min(const unsigned long long a, const unsigned long long b); 
# 11702
static inline unsigned long long min(const long long a, const unsigned long long b); 
# 11710
static inline unsigned long long min(const unsigned long long a, const long long b); 
# 11721 "/usr/local/cuda/include/crt/math_functions.h"
static inline float min(const float a, const float b); 
# 11732 "/usr/local/cuda/include/crt/math_functions.h"
static inline double min(const double a, const double b); 
# 11742 "/usr/local/cuda/include/crt/math_functions.h"
static inline double min(const float a, const double b); 
# 11752 "/usr/local/cuda/include/crt/math_functions.h"
static inline double min(const double a, const float b); 
# 11760
static inline unsigned max(const unsigned a, const unsigned b); 
# 11768
static inline unsigned max(const int a, const unsigned b); 
# 11776
static inline unsigned max(const unsigned a, const int b); 
# 11784
static inline long max(const long a, const long b); 
# 11792
static inline unsigned long max(const unsigned long a, const unsigned long b); 
# 11800
static inline unsigned long max(const long a, const unsigned long b); 
# 11808
static inline unsigned long max(const unsigned long a, const long b); 
# 11816
static inline long long max(const long long a, const long long b); 
# 11824
static inline unsigned long long max(const unsigned long long a, const unsigned long long b); 
# 11832
static inline unsigned long long max(const long long a, const unsigned long long b); 
# 11840
static inline unsigned long long max(const unsigned long long a, const long long b); 
# 11851 "/usr/local/cuda/include/crt/math_functions.h"
static inline float max(const float a, const float b); 
# 11862 "/usr/local/cuda/include/crt/math_functions.h"
static inline double max(const double a, const double b); 
# 11872 "/usr/local/cuda/include/crt/math_functions.h"
static inline double max(const float a, const double b); 
# 11882 "/usr/local/cuda/include/crt/math_functions.h"
static inline double max(const double a, const float b); 
# 11893 "/usr/local/cuda/include/crt/math_functions.h"
extern "C" {
# 11894
__attribute__((unused)) inline void *__nv_aligned_device_malloc(size_t size, size_t align) 
# 11895
{int volatile ___ = 1;(void)size;(void)align;
# 11898
::exit(___);}
#if 0
# 11895
{ 
# 11896
__attribute__((unused)) void *__nv_aligned_device_malloc_impl(size_t, size_t); 
# 11897
return __nv_aligned_device_malloc_impl(size, align); 
# 11898
} 
#endif
# 11899 "/usr/local/cuda/include/crt/math_functions.h"
}
# 758 "/usr/local/cuda/include/crt/math_functions.hpp"
static inline float exp10(const float a) 
# 759
{ 
# 760
return exp10f(a); 
# 761
} 
# 763
static inline float rsqrt(const float a) 
# 764
{ 
# 765
return rsqrtf(a); 
# 766
} 
# 768
static inline float rcbrt(const float a) 
# 769
{ 
# 770
return rcbrtf(a); 
# 771
} 
# 773
static inline float sinpi(const float a) 
# 774
{ 
# 775
return sinpif(a); 
# 776
} 
# 778
static inline float cospi(const float a) 
# 779
{ 
# 780
return cospif(a); 
# 781
} 
# 783
static inline void sincospi(const float a, float *const sptr, float *const cptr) 
# 784
{ 
# 785
sincospif(a, sptr, cptr); 
# 786
} 
# 788
static inline void sincos(const float a, float *const sptr, float *const cptr) 
# 789
{ 
# 790
sincosf(a, sptr, cptr); 
# 791
} 
# 793
static inline float j0(const float a) 
# 794
{ 
# 795
return j0f(a); 
# 796
} 
# 798
static inline float j1(const float a) 
# 799
{ 
# 800
return j1f(a); 
# 801
} 
# 803
static inline float jn(const int n, const float a) 
# 804
{ 
# 805
return jnf(n, a); 
# 806
} 
# 808
static inline float y0(const float a) 
# 809
{ 
# 810
return y0f(a); 
# 811
} 
# 813
static inline float y1(const float a) 
# 814
{ 
# 815
return y1f(a); 
# 816
} 
# 818
static inline float yn(const int n, const float a) 
# 819
{ 
# 820
return ynf(n, a); 
# 821
} 
# 823
__attribute__((unused)) static inline float cyl_bessel_i0(const float a) 
# 824
{int volatile ___ = 1;(void)a;
# 826
::exit(___);}
#if 0
# 824
{ 
# 825
return cyl_bessel_i0f(a); 
# 826
} 
#endif
# 828 "/usr/local/cuda/include/crt/math_functions.hpp"
__attribute__((unused)) static inline float cyl_bessel_i1(const float a) 
# 829
{int volatile ___ = 1;(void)a;
# 831
::exit(___);}
#if 0
# 829
{ 
# 830
return cyl_bessel_i1f(a); 
# 831
} 
#endif
# 833 "/usr/local/cuda/include/crt/math_functions.hpp"
static inline float erfinv(const float a) 
# 834
{ 
# 835
return erfinvf(a); 
# 836
} 
# 838
static inline float erfcinv(const float a) 
# 839
{ 
# 840
return erfcinvf(a); 
# 841
} 
# 843
static inline float normcdfinv(const float a) 
# 844
{ 
# 845
return normcdfinvf(a); 
# 846
} 
# 848
static inline float normcdf(const float a) 
# 849
{ 
# 850
return normcdff(a); 
# 851
} 
# 853
static inline float erfcx(const float a) 
# 854
{ 
# 855
return erfcxf(a); 
# 856
} 
# 858
static inline double copysign(const double a, const float b) 
# 859
{ 
# 860
return copysign(a, static_cast< double>(b)); 
# 861
} 
# 863
static inline double copysign(const float a, const double b) 
# 864
{ 
# 865
return copysign(static_cast< double>(a), b); 
# 866
} 
# 868
static inline unsigned min(const unsigned a, const unsigned b) 
# 869
{ 
# 870
return umin(a, b); 
# 871
} 
# 873
static inline unsigned min(const int a, const unsigned b) 
# 874
{ 
# 875
return umin(static_cast< unsigned>(a), b); 
# 876
} 
# 878
static inline unsigned min(const unsigned a, const int b) 
# 879
{ 
# 880
return umin(a, static_cast< unsigned>(b)); 
# 881
} 
# 883
static inline long min(const long a, const long b) 
# 884
{ 
# 885
long retval; 
# 891
if (sizeof(long) == sizeof(int)) { 
# 895
retval = (static_cast< long>(min(static_cast< int>(a), static_cast< int>(b)))); 
# 896
} else { 
# 897
retval = (static_cast< long>(llmin(static_cast< long long>(a), static_cast< long long>(b)))); 
# 898
}  
# 899
return retval; 
# 900
} 
# 902
static inline unsigned long min(const unsigned long a, const unsigned long b) 
# 903
{ 
# 904
unsigned long retval; 
# 908
if (sizeof(unsigned long) == sizeof(unsigned)) { 
# 912
retval = (static_cast< unsigned long>(umin(static_cast< unsigned>(a), static_cast< unsigned>(b)))); 
# 913
} else { 
# 914
retval = (static_cast< unsigned long>(ullmin(static_cast< unsigned long long>(a), static_cast< unsigned long long>(b)))); 
# 915
}  
# 916
return retval; 
# 917
} 
# 919
static inline unsigned long min(const long a, const unsigned long b) 
# 920
{ 
# 921
unsigned long retval; 
# 925
if (sizeof(unsigned long) == sizeof(unsigned)) { 
# 929
retval = (static_cast< unsigned long>(umin(static_cast< unsigned>(a), static_cast< unsigned>(b)))); 
# 930
} else { 
# 931
retval = (static_cast< unsigned long>(ullmin(static_cast< unsigned long long>(a), static_cast< unsigned long long>(b)))); 
# 932
}  
# 933
return retval; 
# 934
} 
# 936
static inline unsigned long min(const unsigned long a, const long b) 
# 937
{ 
# 938
unsigned long retval; 
# 942
if (sizeof(unsigned long) == sizeof(unsigned)) { 
# 946
retval = (static_cast< unsigned long>(umin(static_cast< unsigned>(a), static_cast< unsigned>(b)))); 
# 947
} else { 
# 948
retval = (static_cast< unsigned long>(ullmin(static_cast< unsigned long long>(a), static_cast< unsigned long long>(b)))); 
# 949
}  
# 950
return retval; 
# 951
} 
# 953
static inline long long min(const long long a, const long long b) 
# 954
{ 
# 955
return llmin(a, b); 
# 956
} 
# 958
static inline unsigned long long min(const unsigned long long a, const unsigned long long b) 
# 959
{ 
# 960
return ullmin(a, b); 
# 961
} 
# 963
static inline unsigned long long min(const long long a, const unsigned long long b) 
# 964
{ 
# 965
return ullmin(static_cast< unsigned long long>(a), b); 
# 966
} 
# 968
static inline unsigned long long min(const unsigned long long a, const long long b) 
# 969
{ 
# 970
return ullmin(a, static_cast< unsigned long long>(b)); 
# 971
} 
# 973
static inline float min(const float a, const float b) 
# 974
{ 
# 975
return fminf(a, b); 
# 976
} 
# 978
static inline double min(const double a, const double b) 
# 979
{ 
# 980
return fmin(a, b); 
# 981
} 
# 983
static inline double min(const float a, const double b) 
# 984
{ 
# 985
return fmin(static_cast< double>(a), b); 
# 986
} 
# 988
static inline double min(const double a, const float b) 
# 989
{ 
# 990
return fmin(a, static_cast< double>(b)); 
# 991
} 
# 993
static inline unsigned max(const unsigned a, const unsigned b) 
# 994
{ 
# 995
return umax(a, b); 
# 996
} 
# 998
static inline unsigned max(const int a, const unsigned b) 
# 999
{ 
# 1000
return umax(static_cast< unsigned>(a), b); 
# 1001
} 
# 1003
static inline unsigned max(const unsigned a, const int b) 
# 1004
{ 
# 1005
return umax(a, static_cast< unsigned>(b)); 
# 1006
} 
# 1008
static inline long max(const long a, const long b) 
# 1009
{ 
# 1010
long retval; 
# 1015
if (sizeof(long) == sizeof(int)) { 
# 1019
retval = (static_cast< long>(max(static_cast< int>(a), static_cast< int>(b)))); 
# 1020
} else { 
# 1021
retval = (static_cast< long>(llmax(static_cast< long long>(a), static_cast< long long>(b)))); 
# 1022
}  
# 1023
return retval; 
# 1024
} 
# 1026
static inline unsigned long max(const unsigned long a, const unsigned long b) 
# 1027
{ 
# 1028
unsigned long retval; 
# 1032
if (sizeof(unsigned long) == sizeof(unsigned)) { 
# 1036
retval = (static_cast< unsigned long>(umax(static_cast< unsigned>(a), static_cast< unsigned>(b)))); 
# 1037
} else { 
# 1038
retval = (static_cast< unsigned long>(ullmax(static_cast< unsigned long long>(a), static_cast< unsigned long long>(b)))); 
# 1039
}  
# 1040
return retval; 
# 1041
} 
# 1043
static inline unsigned long max(const long a, const unsigned long b) 
# 1044
{ 
# 1045
unsigned long retval; 
# 1049
if (sizeof(unsigned long) == sizeof(unsigned)) { 
# 1053
retval = (static_cast< unsigned long>(umax(static_cast< unsigned>(a), static_cast< unsigned>(b)))); 
# 1054
} else { 
# 1055
retval = (static_cast< unsigned long>(ullmax(static_cast< unsigned long long>(a), static_cast< unsigned long long>(b)))); 
# 1056
}  
# 1057
return retval; 
# 1058
} 
# 1060
static inline unsigned long max(const unsigned long a, const long b) 
# 1061
{ 
# 1062
unsigned long retval; 
# 1066
if (sizeof(unsigned long) == sizeof(unsigned)) { 
# 1070
retval = (static_cast< unsigned long>(umax(static_cast< unsigned>(a), static_cast< unsigned>(b)))); 
# 1071
} else { 
# 1072
retval = (static_cast< unsigned long>(ullmax(static_cast< unsigned long long>(a), static_cast< unsigned long long>(b)))); 
# 1073
}  
# 1074
return retval; 
# 1075
} 
# 1077
static inline long long max(const long long a, const long long b) 
# 1078
{ 
# 1079
return llmax(a, b); 
# 1080
} 
# 1082
static inline unsigned long long max(const unsigned long long a, const unsigned long long b) 
# 1083
{ 
# 1084
return ullmax(a, b); 
# 1085
} 
# 1087
static inline unsigned long long max(const long long a, const unsigned long long b) 
# 1088
{ 
# 1089
return ullmax(static_cast< unsigned long long>(a), b); 
# 1090
} 
# 1092
static inline unsigned long long max(const unsigned long long a, const long long b) 
# 1093
{ 
# 1094
return ullmax(a, static_cast< unsigned long long>(b)); 
# 1095
} 
# 1097
static inline float max(const float a, const float b) 
# 1098
{ 
# 1099
return fmaxf(a, b); 
# 1100
} 
# 1102
static inline double max(const double a, const double b) 
# 1103
{ 
# 1104
return fmax(a, b); 
# 1105
} 
# 1107
static inline double max(const float a, const double b) 
# 1108
{ 
# 1109
return fmax(static_cast< double>(a), b); 
# 1110
} 
# 1112
static inline double max(const double a, const float b) 
# 1113
{ 
# 1114
return fmax(a, static_cast< double>(b)); 
# 1115
} 
# 1126 "/usr/local/cuda/include/crt/math_functions.hpp"
inline int min(const int a, const int b) 
# 1127
{ 
# 1128
return (a < b) ? a : b; 
# 1129
} 
# 1131
inline unsigned umin(const unsigned a, const unsigned b) 
# 1132
{ 
# 1133
return (a < b) ? a : b; 
# 1134
} 
# 1136
inline long long llmin(const long long a, const long long b) 
# 1137
{ 
# 1138
return (a < b) ? a : b; 
# 1139
} 
# 1141
inline unsigned long long ullmin(const unsigned long long a, const unsigned long long 
# 1142
b) 
# 1143
{ 
# 1144
return (a < b) ? a : b; 
# 1145
} 
# 1147
inline int max(const int a, const int b) 
# 1148
{ 
# 1149
return (a > b) ? a : b; 
# 1150
} 
# 1152
inline unsigned umax(const unsigned a, const unsigned b) 
# 1153
{ 
# 1154
return (a > b) ? a : b; 
# 1155
} 
# 1157
inline long long llmax(const long long a, const long long b) 
# 1158
{ 
# 1159
return (a > b) ? a : b; 
# 1160
} 
# 1162
inline unsigned long long ullmax(const unsigned long long a, const unsigned long long 
# 1163
b) 
# 1164
{ 
# 1165
return (a > b) ? a : b; 
# 1166
} 
# 74 "/usr/local/cuda/include/cuda_surface_types.h"
template< class T, int dim = 1> 
# 75
struct surface : public surfaceReference { 
# 78
surface() 
# 79
{ 
# 80
(channelDesc) = cudaCreateChannelDesc< T> (); 
# 81
} 
# 83
surface(cudaChannelFormatDesc desc) 
# 84
{ 
# 85
(channelDesc) = desc; 
# 86
} 
# 88
}; 
# 90
template< int dim> 
# 91
struct surface< void, dim>  : public surfaceReference { 
# 94
surface() 
# 95
{ 
# 96
(channelDesc) = cudaCreateChannelDesc< void> (); 
# 97
} 
# 99
}; 
# 74 "/usr/local/cuda/include/cuda_texture_types.h"
template< class T, int texType = 1, cudaTextureReadMode mode = cudaReadModeElementType> 
# 75
struct texture : public textureReference { 
# 78
texture(int norm = 0, cudaTextureFilterMode 
# 79
fMode = cudaFilterModePoint, cudaTextureAddressMode 
# 80
aMode = cudaAddressModeClamp) 
# 81
{ 
# 82
(normalized) = norm; 
# 83
(filterMode) = fMode; 
# 84
((addressMode)[0]) = aMode; 
# 85
((addressMode)[1]) = aMode; 
# 86
((addressMode)[2]) = aMode; 
# 87
(channelDesc) = cudaCreateChannelDesc< T> (); 
# 88
(sRGB) = 0; 
# 89
} 
# 91
texture(int norm, cudaTextureFilterMode 
# 92
fMode, cudaTextureAddressMode 
# 93
aMode, cudaChannelFormatDesc 
# 94
desc) 
# 95
{ 
# 96
(normalized) = norm; 
# 97
(filterMode) = fMode; 
# 98
((addressMode)[0]) = aMode; 
# 99
((addressMode)[1]) = aMode; 
# 100
((addressMode)[2]) = aMode; 
# 101
(channelDesc) = desc; 
# 102
(sRGB) = 0; 
# 103
} 
# 105
}; 
# 89 "/usr/local/cuda/include/crt/device_functions.h"
extern "C" {
# 3207 "/usr/local/cuda/include/crt/device_functions.h"
}
# 3215
__attribute__((unused)) static inline int mulhi(const int a, const int b); 
# 3217
__attribute__((unused)) static inline unsigned mulhi(const unsigned a, const unsigned b); 
# 3219
__attribute__((unused)) static inline unsigned mulhi(const int a, const unsigned b); 
# 3221
__attribute__((unused)) static inline unsigned mulhi(const unsigned a, const int b); 
# 3223
__attribute__((unused)) static inline long long mul64hi(const long long a, const long long b); 
# 3225
__attribute__((unused)) static inline unsigned long long mul64hi(const unsigned long long a, const unsigned long long b); 
# 3227
__attribute__((unused)) static inline unsigned long long mul64hi(const long long a, const unsigned long long b); 
# 3229
__attribute__((unused)) static inline unsigned long long mul64hi(const unsigned long long a, const long long b); 
# 3231
__attribute__((unused)) static inline int float_as_int(const float a); 
# 3233
__attribute__((unused)) static inline float int_as_float(const int a); 
# 3235
__attribute__((unused)) static inline unsigned float_as_uint(const float a); 
# 3237
__attribute__((unused)) static inline float uint_as_float(const unsigned a); 
# 3239
__attribute__((unused)) static inline float saturate(const float a); 
# 3241
__attribute__((unused)) static inline int mul24(const int a, const int b); 
# 3243
__attribute__((unused)) static inline unsigned umul24(const unsigned a, const unsigned b); 
# 3245
__attribute__((unused)) static inline int float2int(const float a, const cudaRoundMode mode = cudaRoundZero); 
# 3247
__attribute__((unused)) static inline unsigned float2uint(const float a, const cudaRoundMode mode = cudaRoundZero); 
# 3249
__attribute__((unused)) static inline float int2float(const int a, const cudaRoundMode mode = cudaRoundNearest); 
# 3251
__attribute__((unused)) static inline float uint2float(const unsigned a, const cudaRoundMode mode = cudaRoundNearest); 
# 90 "/usr/local/cuda/include/crt/device_functions.hpp"
__attribute__((unused)) static inline int mulhi(const int a, const int b) 
# 91
{int volatile ___ = 1;(void)a;(void)b;
# 93
::exit(___);}
#if 0
# 91
{ 
# 92
return __mulhi(a, b); 
# 93
} 
#endif
# 95 "/usr/local/cuda/include/crt/device_functions.hpp"
__attribute__((unused)) static inline unsigned mulhi(const unsigned a, const unsigned b) 
# 96
{int volatile ___ = 1;(void)a;(void)b;
# 98
::exit(___);}
#if 0
# 96
{ 
# 97
return __umulhi(a, b); 
# 98
} 
#endif
# 100 "/usr/local/cuda/include/crt/device_functions.hpp"
__attribute__((unused)) static inline unsigned mulhi(const int a, const unsigned b) 
# 101
{int volatile ___ = 1;(void)a;(void)b;
# 103
::exit(___);}
#if 0
# 101
{ 
# 102
return __umulhi(static_cast< unsigned>(a), b); 
# 103
} 
#endif
# 105 "/usr/local/cuda/include/crt/device_functions.hpp"
__attribute__((unused)) static inline unsigned mulhi(const unsigned a, const int b) 
# 106
{int volatile ___ = 1;(void)a;(void)b;
# 108
::exit(___);}
#if 0
# 106
{ 
# 107
return __umulhi(a, static_cast< unsigned>(b)); 
# 108
} 
#endif
# 110 "/usr/local/cuda/include/crt/device_functions.hpp"
__attribute__((unused)) static inline long long mul64hi(const long long a, const long long b) 
# 111
{int volatile ___ = 1;(void)a;(void)b;
# 113
::exit(___);}
#if 0
# 111
{ 
# 112
return __mul64hi(a, b); 
# 113
} 
#endif
# 115 "/usr/local/cuda/include/crt/device_functions.hpp"
__attribute__((unused)) static inline unsigned long long mul64hi(const unsigned long long a, const unsigned long long b) 
# 116
{int volatile ___ = 1;(void)a;(void)b;
# 118
::exit(___);}
#if 0
# 116
{ 
# 117
return __umul64hi(a, b); 
# 118
} 
#endif
# 120 "/usr/local/cuda/include/crt/device_functions.hpp"
__attribute__((unused)) static inline unsigned long long mul64hi(const long long a, const unsigned long long b) 
# 121
{int volatile ___ = 1;(void)a;(void)b;
# 123
::exit(___);}
#if 0
# 121
{ 
# 122
return __umul64hi(static_cast< unsigned long long>(a), b); 
# 123
} 
#endif
# 125 "/usr/local/cuda/include/crt/device_functions.hpp"
__attribute__((unused)) static inline unsigned long long mul64hi(const unsigned long long a, const long long b) 
# 126
{int volatile ___ = 1;(void)a;(void)b;
# 128
::exit(___);}
#if 0
# 126
{ 
# 127
return __umul64hi(a, static_cast< unsigned long long>(b)); 
# 128
} 
#endif
# 130 "/usr/local/cuda/include/crt/device_functions.hpp"
__attribute__((unused)) static inline int float_as_int(const float a) 
# 131
{int volatile ___ = 1;(void)a;
# 133
::exit(___);}
#if 0
# 131
{ 
# 132
return __float_as_int(a); 
# 133
} 
#endif
# 135 "/usr/local/cuda/include/crt/device_functions.hpp"
__attribute__((unused)) static inline float int_as_float(const int a) 
# 136
{int volatile ___ = 1;(void)a;
# 138
::exit(___);}
#if 0
# 136
{ 
# 137
return __int_as_float(a); 
# 138
} 
#endif
# 140 "/usr/local/cuda/include/crt/device_functions.hpp"
__attribute__((unused)) static inline unsigned float_as_uint(const float a) 
# 141
{int volatile ___ = 1;(void)a;
# 143
::exit(___);}
#if 0
# 141
{ 
# 142
return __float_as_uint(a); 
# 143
} 
#endif
# 145 "/usr/local/cuda/include/crt/device_functions.hpp"
__attribute__((unused)) static inline float uint_as_float(const unsigned a) 
# 146
{int volatile ___ = 1;(void)a;
# 148
::exit(___);}
#if 0
# 146
{ 
# 147
return __uint_as_float(a); 
# 148
} 
#endif
# 149 "/usr/local/cuda/include/crt/device_functions.hpp"
__attribute__((unused)) static inline float saturate(const float a) 
# 150
{int volatile ___ = 1;(void)a;
# 152
::exit(___);}
#if 0
# 150
{ 
# 151
return __saturatef(a); 
# 152
} 
#endif
# 154 "/usr/local/cuda/include/crt/device_functions.hpp"
__attribute__((unused)) static inline int mul24(const int a, const int b) 
# 155
{int volatile ___ = 1;(void)a;(void)b;
# 157
::exit(___);}
#if 0
# 155
{ 
# 156
return __mul24(a, b); 
# 157
} 
#endif
# 159 "/usr/local/cuda/include/crt/device_functions.hpp"
__attribute__((unused)) static inline unsigned umul24(const unsigned a, const unsigned b) 
# 160
{int volatile ___ = 1;(void)a;(void)b;
# 162
::exit(___);}
#if 0
# 160
{ 
# 161
return __umul24(a, b); 
# 162
} 
#endif
# 164 "/usr/local/cuda/include/crt/device_functions.hpp"
__attribute__((unused)) static inline int float2int(const float a, const cudaRoundMode mode) 
# 165
{int volatile ___ = 1;(void)a;(void)mode;
# 170
::exit(___);}
#if 0
# 165
{ 
# 166
return (mode == (cudaRoundNearest)) ? __float2int_rn(a) : ((mode == (cudaRoundPosInf)) ? __float2int_ru(a) : ((mode == (cudaRoundMinInf)) ? __float2int_rd(a) : __float2int_rz(a))); 
# 170
} 
#endif
# 172 "/usr/local/cuda/include/crt/device_functions.hpp"
__attribute__((unused)) static inline unsigned float2uint(const float a, const cudaRoundMode mode) 
# 173
{int volatile ___ = 1;(void)a;(void)mode;
# 178
::exit(___);}
#if 0
# 173
{ 
# 174
return (mode == (cudaRoundNearest)) ? __float2uint_rn(a) : ((mode == (cudaRoundPosInf)) ? __float2uint_ru(a) : ((mode == (cudaRoundMinInf)) ? __float2uint_rd(a) : __float2uint_rz(a))); 
# 178
} 
#endif
# 180 "/usr/local/cuda/include/crt/device_functions.hpp"
__attribute__((unused)) static inline float int2float(const int a, const cudaRoundMode mode) 
# 181
{int volatile ___ = 1;(void)a;(void)mode;
# 186
::exit(___);}
#if 0
# 181
{ 
# 182
return (mode == (cudaRoundZero)) ? __int2float_rz(a) : ((mode == (cudaRoundPosInf)) ? __int2float_ru(a) : ((mode == (cudaRoundMinInf)) ? __int2float_rd(a) : __int2float_rn(a))); 
# 186
} 
#endif
# 188 "/usr/local/cuda/include/crt/device_functions.hpp"
__attribute__((unused)) static inline float uint2float(const unsigned a, const cudaRoundMode mode) 
# 189
{int volatile ___ = 1;(void)a;(void)mode;
# 194
::exit(___);}
#if 0
# 189
{ 
# 190
return (mode == (cudaRoundZero)) ? __uint2float_rz(a) : ((mode == (cudaRoundPosInf)) ? __uint2float_ru(a) : ((mode == (cudaRoundMinInf)) ? __uint2float_rd(a) : __uint2float_rn(a))); 
# 194
} 
#endif
# 106 "/usr/local/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicAdd(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 106
{ } 
#endif
# 108 "/usr/local/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicAdd(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 108
{ } 
#endif
# 110 "/usr/local/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicSub(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 110
{ } 
#endif
# 112 "/usr/local/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicSub(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 112
{ } 
#endif
# 114 "/usr/local/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicExch(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 114
{ } 
#endif
# 116 "/usr/local/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicExch(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 116
{ } 
#endif
# 118 "/usr/local/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline float atomicExch(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 118
{ } 
#endif
# 120 "/usr/local/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicMin(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 120
{ } 
#endif
# 122 "/usr/local/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicMin(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 122
{ } 
#endif
# 124 "/usr/local/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicMax(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 124
{ } 
#endif
# 126 "/usr/local/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicMax(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 126
{ } 
#endif
# 128 "/usr/local/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicInc(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 128
{ } 
#endif
# 130 "/usr/local/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicDec(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 130
{ } 
#endif
# 132 "/usr/local/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicAnd(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 132
{ } 
#endif
# 134 "/usr/local/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicAnd(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 134
{ } 
#endif
# 136 "/usr/local/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicOr(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 136
{ } 
#endif
# 138 "/usr/local/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicOr(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 138
{ } 
#endif
# 140 "/usr/local/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicXor(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 140
{ } 
#endif
# 142 "/usr/local/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicXor(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 142
{ } 
#endif
# 144 "/usr/local/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicCAS(int *address, int compare, int val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 144
{ } 
#endif
# 146 "/usr/local/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicCAS(unsigned *address, unsigned compare, unsigned val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 146
{ } 
#endif
# 171 "/usr/local/cuda/include/device_atomic_functions.h"
extern "C" {
# 180
}
# 189 "/usr/local/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicAdd(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 189
{ } 
#endif
# 191 "/usr/local/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicExch(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 191
{ } 
#endif
# 193 "/usr/local/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicCAS(unsigned long long *address, unsigned long long compare, unsigned long long val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 193
{ } 
#endif
# 195 "/usr/local/cuda/include/device_atomic_functions.h"
__attribute((deprecated("__any() is deprecated in favor of __any_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppr" "ess this warning)."))) __attribute__((unused)) static inline bool any(bool cond) {int volatile ___ = 1;(void)cond;::exit(___);}
#if 0
# 195
{ } 
#endif
# 197 "/usr/local/cuda/include/device_atomic_functions.h"
__attribute((deprecated("__all() is deprecated in favor of __all_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppr" "ess this warning)."))) __attribute__((unused)) static inline bool all(bool cond) {int volatile ___ = 1;(void)cond;::exit(___);}
#if 0
# 197
{ } 
#endif
# 87 "/usr/local/cuda/include/crt/device_double_functions.h"
extern "C" {
# 1139 "/usr/local/cuda/include/crt/device_double_functions.h"
}
# 1147
__attribute__((unused)) static inline double fma(double a, double b, double c, cudaRoundMode mode); 
# 1149
__attribute__((unused)) static inline double dmul(double a, double b, cudaRoundMode mode = cudaRoundNearest); 
# 1151
__attribute__((unused)) static inline double dadd(double a, double b, cudaRoundMode mode = cudaRoundNearest); 
# 1153
__attribute__((unused)) static inline double dsub(double a, double b, cudaRoundMode mode = cudaRoundNearest); 
# 1155
__attribute__((unused)) static inline int double2int(double a, cudaRoundMode mode = cudaRoundZero); 
# 1157
__attribute__((unused)) static inline unsigned double2uint(double a, cudaRoundMode mode = cudaRoundZero); 
# 1159
__attribute__((unused)) static inline long long double2ll(double a, cudaRoundMode mode = cudaRoundZero); 
# 1161
__attribute__((unused)) static inline unsigned long long double2ull(double a, cudaRoundMode mode = cudaRoundZero); 
# 1163
__attribute__((unused)) static inline double ll2double(long long a, cudaRoundMode mode = cudaRoundNearest); 
# 1165
__attribute__((unused)) static inline double ull2double(unsigned long long a, cudaRoundMode mode = cudaRoundNearest); 
# 1167
__attribute__((unused)) static inline double int2double(int a, cudaRoundMode mode = cudaRoundNearest); 
# 1169
__attribute__((unused)) static inline double uint2double(unsigned a, cudaRoundMode mode = cudaRoundNearest); 
# 1171
__attribute__((unused)) static inline double float2double(float a, cudaRoundMode mode = cudaRoundNearest); 
# 93 "/usr/local/cuda/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline double fma(double a, double b, double c, cudaRoundMode mode) 
# 94
{int volatile ___ = 1;(void)a;(void)b;(void)c;(void)mode;
# 99
::exit(___);}
#if 0
# 94
{ 
# 95
return (mode == (cudaRoundZero)) ? __fma_rz(a, b, c) : ((mode == (cudaRoundPosInf)) ? __fma_ru(a, b, c) : ((mode == (cudaRoundMinInf)) ? __fma_rd(a, b, c) : __fma_rn(a, b, c))); 
# 99
} 
#endif
# 101 "/usr/local/cuda/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline double dmul(double a, double b, cudaRoundMode mode) 
# 102
{int volatile ___ = 1;(void)a;(void)b;(void)mode;
# 107
::exit(___);}
#if 0
# 102
{ 
# 103
return (mode == (cudaRoundZero)) ? __dmul_rz(a, b) : ((mode == (cudaRoundPosInf)) ? __dmul_ru(a, b) : ((mode == (cudaRoundMinInf)) ? __dmul_rd(a, b) : __dmul_rn(a, b))); 
# 107
} 
#endif
# 109 "/usr/local/cuda/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline double dadd(double a, double b, cudaRoundMode mode) 
# 110
{int volatile ___ = 1;(void)a;(void)b;(void)mode;
# 115
::exit(___);}
#if 0
# 110
{ 
# 111
return (mode == (cudaRoundZero)) ? __dadd_rz(a, b) : ((mode == (cudaRoundPosInf)) ? __dadd_ru(a, b) : ((mode == (cudaRoundMinInf)) ? __dadd_rd(a, b) : __dadd_rn(a, b))); 
# 115
} 
#endif
# 117 "/usr/local/cuda/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline double dsub(double a, double b, cudaRoundMode mode) 
# 118
{int volatile ___ = 1;(void)a;(void)b;(void)mode;
# 123
::exit(___);}
#if 0
# 118
{ 
# 119
return (mode == (cudaRoundZero)) ? __dsub_rz(a, b) : ((mode == (cudaRoundPosInf)) ? __dsub_ru(a, b) : ((mode == (cudaRoundMinInf)) ? __dsub_rd(a, b) : __dsub_rn(a, b))); 
# 123
} 
#endif
# 125 "/usr/local/cuda/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline int double2int(double a, cudaRoundMode mode) 
# 126
{int volatile ___ = 1;(void)a;(void)mode;
# 131
::exit(___);}
#if 0
# 126
{ 
# 127
return (mode == (cudaRoundNearest)) ? __double2int_rn(a) : ((mode == (cudaRoundPosInf)) ? __double2int_ru(a) : ((mode == (cudaRoundMinInf)) ? __double2int_rd(a) : __double2int_rz(a))); 
# 131
} 
#endif
# 133 "/usr/local/cuda/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline unsigned double2uint(double a, cudaRoundMode mode) 
# 134
{int volatile ___ = 1;(void)a;(void)mode;
# 139
::exit(___);}
#if 0
# 134
{ 
# 135
return (mode == (cudaRoundNearest)) ? __double2uint_rn(a) : ((mode == (cudaRoundPosInf)) ? __double2uint_ru(a) : ((mode == (cudaRoundMinInf)) ? __double2uint_rd(a) : __double2uint_rz(a))); 
# 139
} 
#endif
# 141 "/usr/local/cuda/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline long long double2ll(double a, cudaRoundMode mode) 
# 142
{int volatile ___ = 1;(void)a;(void)mode;
# 147
::exit(___);}
#if 0
# 142
{ 
# 143
return (mode == (cudaRoundNearest)) ? __double2ll_rn(a) : ((mode == (cudaRoundPosInf)) ? __double2ll_ru(a) : ((mode == (cudaRoundMinInf)) ? __double2ll_rd(a) : __double2ll_rz(a))); 
# 147
} 
#endif
# 149 "/usr/local/cuda/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline unsigned long long double2ull(double a, cudaRoundMode mode) 
# 150
{int volatile ___ = 1;(void)a;(void)mode;
# 155
::exit(___);}
#if 0
# 150
{ 
# 151
return (mode == (cudaRoundNearest)) ? __double2ull_rn(a) : ((mode == (cudaRoundPosInf)) ? __double2ull_ru(a) : ((mode == (cudaRoundMinInf)) ? __double2ull_rd(a) : __double2ull_rz(a))); 
# 155
} 
#endif
# 157 "/usr/local/cuda/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline double ll2double(long long a, cudaRoundMode mode) 
# 158
{int volatile ___ = 1;(void)a;(void)mode;
# 163
::exit(___);}
#if 0
# 158
{ 
# 159
return (mode == (cudaRoundZero)) ? __ll2double_rz(a) : ((mode == (cudaRoundPosInf)) ? __ll2double_ru(a) : ((mode == (cudaRoundMinInf)) ? __ll2double_rd(a) : __ll2double_rn(a))); 
# 163
} 
#endif
# 165 "/usr/local/cuda/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline double ull2double(unsigned long long a, cudaRoundMode mode) 
# 166
{int volatile ___ = 1;(void)a;(void)mode;
# 171
::exit(___);}
#if 0
# 166
{ 
# 167
return (mode == (cudaRoundZero)) ? __ull2double_rz(a) : ((mode == (cudaRoundPosInf)) ? __ull2double_ru(a) : ((mode == (cudaRoundMinInf)) ? __ull2double_rd(a) : __ull2double_rn(a))); 
# 171
} 
#endif
# 173 "/usr/local/cuda/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline double int2double(int a, cudaRoundMode mode) 
# 174
{int volatile ___ = 1;(void)a;(void)mode;
# 176
::exit(___);}
#if 0
# 174
{ 
# 175
return (double)a; 
# 176
} 
#endif
# 178 "/usr/local/cuda/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline double uint2double(unsigned a, cudaRoundMode mode) 
# 179
{int volatile ___ = 1;(void)a;(void)mode;
# 181
::exit(___);}
#if 0
# 179
{ 
# 180
return (double)a; 
# 181
} 
#endif
# 183 "/usr/local/cuda/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline double float2double(float a, cudaRoundMode mode) 
# 184
{int volatile ___ = 1;(void)a;(void)mode;
# 186
::exit(___);}
#if 0
# 184
{ 
# 185
return (double)a; 
# 186
} 
#endif
# 89 "/usr/local/cuda/include/sm_20_atomic_functions.h"
__attribute__((unused)) static inline float atomicAdd(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 89
{ } 
#endif
# 100 "/usr/local/cuda/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline long long atomicMin(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 100
{ } 
#endif
# 102 "/usr/local/cuda/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline long long atomicMax(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 102
{ } 
#endif
# 104 "/usr/local/cuda/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline long long atomicAnd(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 104
{ } 
#endif
# 106 "/usr/local/cuda/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline long long atomicOr(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 106
{ } 
#endif
# 108 "/usr/local/cuda/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline long long atomicXor(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 108
{ } 
#endif
# 110 "/usr/local/cuda/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicMin(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 110
{ } 
#endif
# 112 "/usr/local/cuda/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicMax(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 112
{ } 
#endif
# 114 "/usr/local/cuda/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicAnd(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 114
{ } 
#endif
# 116 "/usr/local/cuda/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicOr(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 116
{ } 
#endif
# 118 "/usr/local/cuda/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicXor(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 118
{ } 
#endif
# 303 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline double atomicAdd(double *address, double val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 303
{ } 
#endif
# 306 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicAdd_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 306
{ } 
#endif
# 309 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicAdd_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 309
{ } 
#endif
# 312 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicAdd_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 312
{ } 
#endif
# 315 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicAdd_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 315
{ } 
#endif
# 318 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicAdd_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 318
{ } 
#endif
# 321 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicAdd_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 321
{ } 
#endif
# 324 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline float atomicAdd_block(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 324
{ } 
#endif
# 327 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline float atomicAdd_system(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 327
{ } 
#endif
# 330 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline double atomicAdd_block(double *address, double val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 330
{ } 
#endif
# 333 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline double atomicAdd_system(double *address, double val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 333
{ } 
#endif
# 336 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicSub_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 336
{ } 
#endif
# 339 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicSub_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 339
{ } 
#endif
# 342 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicSub_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 342
{ } 
#endif
# 345 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicSub_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 345
{ } 
#endif
# 348 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicExch_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 348
{ } 
#endif
# 351 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicExch_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 351
{ } 
#endif
# 354 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicExch_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 354
{ } 
#endif
# 357 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicExch_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 357
{ } 
#endif
# 360 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicExch_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 360
{ } 
#endif
# 363 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicExch_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 363
{ } 
#endif
# 366 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline float atomicExch_block(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 366
{ } 
#endif
# 369 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline float atomicExch_system(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 369
{ } 
#endif
# 372 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicMin_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 372
{ } 
#endif
# 375 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicMin_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 375
{ } 
#endif
# 378 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicMin_block(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 378
{ } 
#endif
# 381 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicMin_system(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 381
{ } 
#endif
# 384 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicMin_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 384
{ } 
#endif
# 387 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicMin_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 387
{ } 
#endif
# 390 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicMin_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 390
{ } 
#endif
# 393 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicMin_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 393
{ } 
#endif
# 396 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicMax_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 396
{ } 
#endif
# 399 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicMax_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 399
{ } 
#endif
# 402 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicMax_block(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 402
{ } 
#endif
# 405 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicMax_system(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 405
{ } 
#endif
# 408 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicMax_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 408
{ } 
#endif
# 411 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicMax_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 411
{ } 
#endif
# 414 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicMax_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 414
{ } 
#endif
# 417 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicMax_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 417
{ } 
#endif
# 420 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicInc_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 420
{ } 
#endif
# 423 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicInc_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 423
{ } 
#endif
# 426 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicDec_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 426
{ } 
#endif
# 429 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicDec_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 429
{ } 
#endif
# 432 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicCAS_block(int *address, int compare, int val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 432
{ } 
#endif
# 435 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicCAS_system(int *address, int compare, int val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 435
{ } 
#endif
# 438 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicCAS_block(unsigned *address, unsigned compare, unsigned 
# 439
val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 439
{ } 
#endif
# 442 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicCAS_system(unsigned *address, unsigned compare, unsigned 
# 443
val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 443
{ } 
#endif
# 446 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicCAS_block(unsigned long long *address, unsigned long long 
# 447
compare, unsigned long long 
# 448
val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 448
{ } 
#endif
# 451 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicCAS_system(unsigned long long *address, unsigned long long 
# 452
compare, unsigned long long 
# 453
val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 453
{ } 
#endif
# 456 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicAnd_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 456
{ } 
#endif
# 459 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicAnd_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 459
{ } 
#endif
# 462 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicAnd_block(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 462
{ } 
#endif
# 465 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicAnd_system(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 465
{ } 
#endif
# 468 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicAnd_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 468
{ } 
#endif
# 471 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicAnd_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 471
{ } 
#endif
# 474 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicAnd_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 474
{ } 
#endif
# 477 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicAnd_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 477
{ } 
#endif
# 480 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicOr_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 480
{ } 
#endif
# 483 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicOr_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 483
{ } 
#endif
# 486 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicOr_block(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 486
{ } 
#endif
# 489 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicOr_system(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 489
{ } 
#endif
# 492 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicOr_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 492
{ } 
#endif
# 495 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicOr_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 495
{ } 
#endif
# 498 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicOr_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 498
{ } 
#endif
# 501 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicOr_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 501
{ } 
#endif
# 504 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicXor_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 504
{ } 
#endif
# 507 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicXor_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 507
{ } 
#endif
# 510 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicXor_block(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 510
{ } 
#endif
# 513 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicXor_system(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 513
{ } 
#endif
# 516 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicXor_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 516
{ } 
#endif
# 519 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicXor_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 519
{ } 
#endif
# 522 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicXor_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 522
{ } 
#endif
# 525 "/usr/local/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicXor_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 525
{ } 
#endif
# 90 "/usr/local/cuda/include/sm_20_intrinsics.h"
extern "C" {
# 1503 "/usr/local/cuda/include/sm_20_intrinsics.h"
}
# 1510
__attribute((deprecated("__ballot() is deprecated in favor of __ballot_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to" " suppress this warning)."))) __attribute__((unused)) static inline unsigned ballot(bool pred) {int volatile ___ = 1;(void)pred;::exit(___);}
#if 0
# 1510
{ } 
#endif
# 1512 "/usr/local/cuda/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline int syncthreads_count(bool pred) {int volatile ___ = 1;(void)pred;::exit(___);}
#if 0
# 1512
{ } 
#endif
# 1514 "/usr/local/cuda/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline bool syncthreads_and(bool pred) {int volatile ___ = 1;(void)pred;::exit(___);}
#if 0
# 1514
{ } 
#endif
# 1516 "/usr/local/cuda/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline bool syncthreads_or(bool pred) {int volatile ___ = 1;(void)pred;::exit(___);}
#if 0
# 1516
{ } 
#endif
# 1521 "/usr/local/cuda/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline unsigned __isGlobal(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1521
{ } 
#endif
# 1522 "/usr/local/cuda/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline unsigned __isShared(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1522
{ } 
#endif
# 1523 "/usr/local/cuda/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline unsigned __isConstant(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1523
{ } 
#endif
# 1524 "/usr/local/cuda/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline unsigned __isLocal(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1524
{ } 
#endif
# 1526 "/usr/local/cuda/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline size_t __cvta_generic_to_global(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1526
{ } 
#endif
# 1527 "/usr/local/cuda/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline size_t __cvta_generic_to_shared(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1527
{ } 
#endif
# 1528 "/usr/local/cuda/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline size_t __cvta_generic_to_constant(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1528
{ } 
#endif
# 1529 "/usr/local/cuda/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline size_t __cvta_generic_to_local(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1529
{ } 
#endif
# 1531 "/usr/local/cuda/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline void *__cvta_global_to_generic(size_t rawbits) {int volatile ___ = 1;(void)rawbits;::exit(___);}
#if 0
# 1531
{ } 
#endif
# 1532 "/usr/local/cuda/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline void *__cvta_shared_to_generic(size_t rawbits) {int volatile ___ = 1;(void)rawbits;::exit(___);}
#if 0
# 1532
{ } 
#endif
# 1533 "/usr/local/cuda/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline void *__cvta_constant_to_generic(size_t rawbits) {int volatile ___ = 1;(void)rawbits;::exit(___);}
#if 0
# 1533
{ } 
#endif
# 1534 "/usr/local/cuda/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline void *__cvta_local_to_generic(size_t rawbits) {int volatile ___ = 1;(void)rawbits;::exit(___);}
#if 0
# 1534
{ } 
#endif
# 102 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned __fns(unsigned mask, unsigned base, int offset) {int volatile ___ = 1;(void)mask;(void)base;(void)offset;::exit(___);}
#if 0
# 102
{ } 
#endif
# 103 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline void __barrier_sync(unsigned id) {int volatile ___ = 1;(void)id;::exit(___);}
#if 0
# 103
{ } 
#endif
# 104 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline void __barrier_sync_count(unsigned id, unsigned cnt) {int volatile ___ = 1;(void)id;(void)cnt;::exit(___);}
#if 0
# 104
{ } 
#endif
# 105 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline void __syncwarp(unsigned mask = 4294967295U) {int volatile ___ = 1;(void)mask;::exit(___);}
#if 0
# 105
{ } 
#endif
# 106 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline int __all_sync(unsigned mask, int pred) {int volatile ___ = 1;(void)mask;(void)pred;::exit(___);}
#if 0
# 106
{ } 
#endif
# 107 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline int __any_sync(unsigned mask, int pred) {int volatile ___ = 1;(void)mask;(void)pred;::exit(___);}
#if 0
# 107
{ } 
#endif
# 108 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline int __uni_sync(unsigned mask, int pred) {int volatile ___ = 1;(void)mask;(void)pred;::exit(___);}
#if 0
# 108
{ } 
#endif
# 109 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned __ballot_sync(unsigned mask, int pred) {int volatile ___ = 1;(void)mask;(void)pred;::exit(___);}
#if 0
# 109
{ } 
#endif
# 110 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned __activemask() {int volatile ___ = 1;::exit(___);}
#if 0
# 110
{ } 
#endif
# 119 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline int __shfl(int var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 119
{ } 
#endif
# 120 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline unsigned __shfl(unsigned var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 120
{ } 
#endif
# 121 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline int __shfl_up(int var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 121
{ } 
#endif
# 122 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline unsigned __shfl_up(unsigned var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 122
{ } 
#endif
# 123 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline int __shfl_down(int var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 123
{ } 
#endif
# 124 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline unsigned __shfl_down(unsigned var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 124
{ } 
#endif
# 125 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline int __shfl_xor(int var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 125
{ } 
#endif
# 126 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline unsigned __shfl_xor(unsigned var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 126
{ } 
#endif
# 127 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline float __shfl(float var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 127
{ } 
#endif
# 128 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline float __shfl_up(float var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 128
{ } 
#endif
# 129 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline float __shfl_down(float var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 129
{ } 
#endif
# 130 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline float __shfl_xor(float var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 130
{ } 
#endif
# 133 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline int __shfl_sync(unsigned mask, int var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 133
{ } 
#endif
# 134 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned __shfl_sync(unsigned mask, unsigned var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 134
{ } 
#endif
# 135 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline int __shfl_up_sync(unsigned mask, int var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 135
{ } 
#endif
# 136 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned __shfl_up_sync(unsigned mask, unsigned var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 136
{ } 
#endif
# 137 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline int __shfl_down_sync(unsigned mask, int var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 137
{ } 
#endif
# 138 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned __shfl_down_sync(unsigned mask, unsigned var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 138
{ } 
#endif
# 139 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline int __shfl_xor_sync(unsigned mask, int var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 139
{ } 
#endif
# 140 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned __shfl_xor_sync(unsigned mask, unsigned var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 140
{ } 
#endif
# 141 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline float __shfl_sync(unsigned mask, float var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 141
{ } 
#endif
# 142 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline float __shfl_up_sync(unsigned mask, float var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 142
{ } 
#endif
# 143 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline float __shfl_down_sync(unsigned mask, float var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 143
{ } 
#endif
# 144 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline float __shfl_xor_sync(unsigned mask, float var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 144
{ } 
#endif
# 148 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline unsigned long long __shfl(unsigned long long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 148
{ } 
#endif
# 149 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline long long __shfl(long long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 149
{ } 
#endif
# 150 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline long long __shfl_up(long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 150
{ } 
#endif
# 151 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline unsigned long long __shfl_up(unsigned long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 151
{ } 
#endif
# 152 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline long long __shfl_down(long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 152
{ } 
#endif
# 153 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline unsigned long long __shfl_down(unsigned long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 153
{ } 
#endif
# 154 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline long long __shfl_xor(long long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 154
{ } 
#endif
# 155 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline unsigned long long __shfl_xor(unsigned long long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 155
{ } 
#endif
# 156 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline double __shfl(double var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 156
{ } 
#endif
# 157 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline double __shfl_up(double var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 157
{ } 
#endif
# 158 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline double __shfl_down(double var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 158
{ } 
#endif
# 159 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline double __shfl_xor(double var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 159
{ } 
#endif
# 162 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long long __shfl_sync(unsigned mask, long long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 162
{ } 
#endif
# 163 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __shfl_sync(unsigned mask, unsigned long long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 163
{ } 
#endif
# 164 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long long __shfl_up_sync(unsigned mask, long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 164
{ } 
#endif
# 165 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __shfl_up_sync(unsigned mask, unsigned long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 165
{ } 
#endif
# 166 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long long __shfl_down_sync(unsigned mask, long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 166
{ } 
#endif
# 167 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __shfl_down_sync(unsigned mask, unsigned long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 167
{ } 
#endif
# 168 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long long __shfl_xor_sync(unsigned mask, long long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 168
{ } 
#endif
# 169 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __shfl_xor_sync(unsigned mask, unsigned long long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 169
{ } 
#endif
# 170 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline double __shfl_sync(unsigned mask, double var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 170
{ } 
#endif
# 171 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline double __shfl_up_sync(unsigned mask, double var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 171
{ } 
#endif
# 172 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline double __shfl_down_sync(unsigned mask, double var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 172
{ } 
#endif
# 173 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline double __shfl_xor_sync(unsigned mask, double var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 173
{ } 
#endif
# 177 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline long __shfl(long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 177
{ } 
#endif
# 178 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline unsigned long __shfl(unsigned long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 178
{ } 
#endif
# 179 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline long __shfl_up(long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 179
{ } 
#endif
# 180 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline unsigned long __shfl_up(unsigned long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 180
{ } 
#endif
# 181 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline long __shfl_down(long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 181
{ } 
#endif
# 182 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline unsigned long __shfl_down(unsigned long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 182
{ } 
#endif
# 183 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline long __shfl_xor(long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 183
{ } 
#endif
# 184 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline unsigned long __shfl_xor(unsigned long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 184
{ } 
#endif
# 187 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long __shfl_sync(unsigned mask, long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 187
{ } 
#endif
# 188 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long __shfl_sync(unsigned mask, unsigned long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 188
{ } 
#endif
# 189 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long __shfl_up_sync(unsigned mask, long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 189
{ } 
#endif
# 190 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long __shfl_up_sync(unsigned mask, unsigned long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 190
{ } 
#endif
# 191 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long __shfl_down_sync(unsigned mask, long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 191
{ } 
#endif
# 192 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long __shfl_down_sync(unsigned mask, unsigned long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 192
{ } 
#endif
# 193 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long __shfl_xor_sync(unsigned mask, long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 193
{ } 
#endif
# 194 "/usr/local/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long __shfl_xor_sync(unsigned mask, unsigned long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 194
{ } 
#endif
# 87 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long __ldg(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 87
{ } 
#endif
# 88 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long __ldg(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 88
{ } 
#endif
# 90 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char __ldg(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 90
{ } 
#endif
# 91 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline signed char __ldg(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 91
{ } 
#endif
# 92 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short __ldg(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 92
{ } 
#endif
# 93 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int __ldg(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 93
{ } 
#endif
# 94 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long long __ldg(const long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 94
{ } 
#endif
# 95 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char2 __ldg(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 95
{ } 
#endif
# 96 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char4 __ldg(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 96
{ } 
#endif
# 97 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short2 __ldg(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 97
{ } 
#endif
# 98 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short4 __ldg(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 98
{ } 
#endif
# 99 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int2 __ldg(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 99
{ } 
#endif
# 100 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int4 __ldg(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 100
{ } 
#endif
# 101 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline longlong2 __ldg(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 101
{ } 
#endif
# 103 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned char __ldg(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 103
{ } 
#endif
# 104 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned short __ldg(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 104
{ } 
#endif
# 105 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __ldg(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 105
{ } 
#endif
# 106 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __ldg(const unsigned long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 106
{ } 
#endif
# 107 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar2 __ldg(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 107
{ } 
#endif
# 108 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar4 __ldg(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 108
{ } 
#endif
# 109 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort2 __ldg(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 109
{ } 
#endif
# 110 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort4 __ldg(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 110
{ } 
#endif
# 111 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint2 __ldg(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 111
{ } 
#endif
# 112 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint4 __ldg(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 112
{ } 
#endif
# 113 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ulonglong2 __ldg(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 113
{ } 
#endif
# 115 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float __ldg(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 115
{ } 
#endif
# 116 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double __ldg(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 116
{ } 
#endif
# 117 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float2 __ldg(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 117
{ } 
#endif
# 118 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float4 __ldg(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 118
{ } 
#endif
# 119 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double2 __ldg(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 119
{ } 
#endif
# 123 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long __ldcg(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 123
{ } 
#endif
# 124 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long __ldcg(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 124
{ } 
#endif
# 126 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char __ldcg(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 126
{ } 
#endif
# 127 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline signed char __ldcg(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 127
{ } 
#endif
# 128 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short __ldcg(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 128
{ } 
#endif
# 129 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int __ldcg(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 129
{ } 
#endif
# 130 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long long __ldcg(const long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 130
{ } 
#endif
# 131 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char2 __ldcg(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 131
{ } 
#endif
# 132 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char4 __ldcg(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 132
{ } 
#endif
# 133 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short2 __ldcg(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 133
{ } 
#endif
# 134 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short4 __ldcg(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 134
{ } 
#endif
# 135 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int2 __ldcg(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 135
{ } 
#endif
# 136 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int4 __ldcg(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 136
{ } 
#endif
# 137 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline longlong2 __ldcg(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 137
{ } 
#endif
# 139 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned char __ldcg(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 139
{ } 
#endif
# 140 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned short __ldcg(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 140
{ } 
#endif
# 141 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __ldcg(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 141
{ } 
#endif
# 142 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __ldcg(const unsigned long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 142
{ } 
#endif
# 143 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar2 __ldcg(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 143
{ } 
#endif
# 144 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar4 __ldcg(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 144
{ } 
#endif
# 145 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort2 __ldcg(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 145
{ } 
#endif
# 146 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort4 __ldcg(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 146
{ } 
#endif
# 147 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint2 __ldcg(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 147
{ } 
#endif
# 148 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint4 __ldcg(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 148
{ } 
#endif
# 149 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ulonglong2 __ldcg(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 149
{ } 
#endif
# 151 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float __ldcg(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 151
{ } 
#endif
# 152 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double __ldcg(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 152
{ } 
#endif
# 153 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float2 __ldcg(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 153
{ } 
#endif
# 154 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float4 __ldcg(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 154
{ } 
#endif
# 155 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double2 __ldcg(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 155
{ } 
#endif
# 159 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long __ldca(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 159
{ } 
#endif
# 160 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long __ldca(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 160
{ } 
#endif
# 162 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char __ldca(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 162
{ } 
#endif
# 163 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline signed char __ldca(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 163
{ } 
#endif
# 164 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short __ldca(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 164
{ } 
#endif
# 165 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int __ldca(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 165
{ } 
#endif
# 166 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long long __ldca(const long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 166
{ } 
#endif
# 167 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char2 __ldca(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 167
{ } 
#endif
# 168 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char4 __ldca(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 168
{ } 
#endif
# 169 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short2 __ldca(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 169
{ } 
#endif
# 170 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short4 __ldca(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 170
{ } 
#endif
# 171 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int2 __ldca(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 171
{ } 
#endif
# 172 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int4 __ldca(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 172
{ } 
#endif
# 173 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline longlong2 __ldca(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 173
{ } 
#endif
# 175 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned char __ldca(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 175
{ } 
#endif
# 176 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned short __ldca(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 176
{ } 
#endif
# 177 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __ldca(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 177
{ } 
#endif
# 178 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __ldca(const unsigned long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 178
{ } 
#endif
# 179 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar2 __ldca(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 179
{ } 
#endif
# 180 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar4 __ldca(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 180
{ } 
#endif
# 181 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort2 __ldca(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 181
{ } 
#endif
# 182 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort4 __ldca(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 182
{ } 
#endif
# 183 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint2 __ldca(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 183
{ } 
#endif
# 184 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint4 __ldca(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 184
{ } 
#endif
# 185 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ulonglong2 __ldca(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 185
{ } 
#endif
# 187 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float __ldca(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 187
{ } 
#endif
# 188 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double __ldca(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 188
{ } 
#endif
# 189 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float2 __ldca(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 189
{ } 
#endif
# 190 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float4 __ldca(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 190
{ } 
#endif
# 191 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double2 __ldca(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 191
{ } 
#endif
# 195 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long __ldcs(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 195
{ } 
#endif
# 196 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long __ldcs(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 196
{ } 
#endif
# 198 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char __ldcs(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 198
{ } 
#endif
# 199 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline signed char __ldcs(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 199
{ } 
#endif
# 200 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short __ldcs(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 200
{ } 
#endif
# 201 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int __ldcs(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 201
{ } 
#endif
# 202 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long long __ldcs(const long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 202
{ } 
#endif
# 203 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char2 __ldcs(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 203
{ } 
#endif
# 204 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char4 __ldcs(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 204
{ } 
#endif
# 205 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short2 __ldcs(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 205
{ } 
#endif
# 206 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short4 __ldcs(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 206
{ } 
#endif
# 207 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int2 __ldcs(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 207
{ } 
#endif
# 208 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int4 __ldcs(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 208
{ } 
#endif
# 209 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline longlong2 __ldcs(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 209
{ } 
#endif
# 211 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned char __ldcs(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 211
{ } 
#endif
# 212 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned short __ldcs(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 212
{ } 
#endif
# 213 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __ldcs(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 213
{ } 
#endif
# 214 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __ldcs(const unsigned long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 214
{ } 
#endif
# 215 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar2 __ldcs(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 215
{ } 
#endif
# 216 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar4 __ldcs(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 216
{ } 
#endif
# 217 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort2 __ldcs(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 217
{ } 
#endif
# 218 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort4 __ldcs(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 218
{ } 
#endif
# 219 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint2 __ldcs(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 219
{ } 
#endif
# 220 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint4 __ldcs(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 220
{ } 
#endif
# 221 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ulonglong2 __ldcs(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 221
{ } 
#endif
# 223 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float __ldcs(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 223
{ } 
#endif
# 224 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double __ldcs(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 224
{ } 
#endif
# 225 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float2 __ldcs(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 225
{ } 
#endif
# 226 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float4 __ldcs(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 226
{ } 
#endif
# 227 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double2 __ldcs(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 227
{ } 
#endif
# 231 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long __ldlu(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 231
{ } 
#endif
# 232 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long __ldlu(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 232
{ } 
#endif
# 234 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char __ldlu(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 234
{ } 
#endif
# 235 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline signed char __ldlu(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 235
{ } 
#endif
# 236 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short __ldlu(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 236
{ } 
#endif
# 237 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int __ldlu(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 237
{ } 
#endif
# 238 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long long __ldlu(const long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 238
{ } 
#endif
# 239 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char2 __ldlu(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 239
{ } 
#endif
# 240 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char4 __ldlu(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 240
{ } 
#endif
# 241 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short2 __ldlu(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 241
{ } 
#endif
# 242 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short4 __ldlu(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 242
{ } 
#endif
# 243 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int2 __ldlu(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 243
{ } 
#endif
# 244 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int4 __ldlu(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 244
{ } 
#endif
# 245 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline longlong2 __ldlu(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 245
{ } 
#endif
# 247 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned char __ldlu(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 247
{ } 
#endif
# 248 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned short __ldlu(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 248
{ } 
#endif
# 249 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __ldlu(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 249
{ } 
#endif
# 250 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __ldlu(const unsigned long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 250
{ } 
#endif
# 251 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar2 __ldlu(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 251
{ } 
#endif
# 252 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar4 __ldlu(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 252
{ } 
#endif
# 253 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort2 __ldlu(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 253
{ } 
#endif
# 254 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort4 __ldlu(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 254
{ } 
#endif
# 255 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint2 __ldlu(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 255
{ } 
#endif
# 256 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint4 __ldlu(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 256
{ } 
#endif
# 257 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ulonglong2 __ldlu(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 257
{ } 
#endif
# 259 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float __ldlu(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 259
{ } 
#endif
# 260 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double __ldlu(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 260
{ } 
#endif
# 261 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float2 __ldlu(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 261
{ } 
#endif
# 262 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float4 __ldlu(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 262
{ } 
#endif
# 263 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double2 __ldlu(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 263
{ } 
#endif
# 267 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long __ldcv(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 267
{ } 
#endif
# 268 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long __ldcv(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 268
{ } 
#endif
# 270 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char __ldcv(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 270
{ } 
#endif
# 271 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline signed char __ldcv(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 271
{ } 
#endif
# 272 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short __ldcv(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 272
{ } 
#endif
# 273 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int __ldcv(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 273
{ } 
#endif
# 274 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long long __ldcv(const long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 274
{ } 
#endif
# 275 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char2 __ldcv(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 275
{ } 
#endif
# 276 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char4 __ldcv(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 276
{ } 
#endif
# 277 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short2 __ldcv(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 277
{ } 
#endif
# 278 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short4 __ldcv(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 278
{ } 
#endif
# 279 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int2 __ldcv(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 279
{ } 
#endif
# 280 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int4 __ldcv(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 280
{ } 
#endif
# 281 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline longlong2 __ldcv(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 281
{ } 
#endif
# 283 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned char __ldcv(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 283
{ } 
#endif
# 284 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned short __ldcv(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 284
{ } 
#endif
# 285 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __ldcv(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 285
{ } 
#endif
# 286 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __ldcv(const unsigned long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 286
{ } 
#endif
# 287 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar2 __ldcv(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 287
{ } 
#endif
# 288 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar4 __ldcv(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 288
{ } 
#endif
# 289 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort2 __ldcv(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 289
{ } 
#endif
# 290 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort4 __ldcv(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 290
{ } 
#endif
# 291 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint2 __ldcv(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 291
{ } 
#endif
# 292 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint4 __ldcv(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 292
{ } 
#endif
# 293 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ulonglong2 __ldcv(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 293
{ } 
#endif
# 295 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float __ldcv(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 295
{ } 
#endif
# 296 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double __ldcv(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 296
{ } 
#endif
# 297 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float2 __ldcv(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 297
{ } 
#endif
# 298 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float4 __ldcv(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 298
{ } 
#endif
# 299 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double2 __ldcv(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 299
{ } 
#endif
# 303 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(long *ptr, long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 303
{ } 
#endif
# 304 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(unsigned long *ptr, unsigned long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 304
{ } 
#endif
# 306 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(char *ptr, char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 306
{ } 
#endif
# 307 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(signed char *ptr, signed char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 307
{ } 
#endif
# 308 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(short *ptr, short value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 308
{ } 
#endif
# 309 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(int *ptr, int value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 309
{ } 
#endif
# 310 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(long long *ptr, long long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 310
{ } 
#endif
# 311 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(char2 *ptr, char2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 311
{ } 
#endif
# 312 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(char4 *ptr, char4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 312
{ } 
#endif
# 313 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(short2 *ptr, short2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 313
{ } 
#endif
# 314 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(short4 *ptr, short4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 314
{ } 
#endif
# 315 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(int2 *ptr, int2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 315
{ } 
#endif
# 316 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(int4 *ptr, int4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 316
{ } 
#endif
# 317 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(longlong2 *ptr, longlong2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 317
{ } 
#endif
# 319 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(unsigned char *ptr, unsigned char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 319
{ } 
#endif
# 320 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(unsigned short *ptr, unsigned short value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 320
{ } 
#endif
# 321 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(unsigned *ptr, unsigned value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 321
{ } 
#endif
# 322 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(unsigned long long *ptr, unsigned long long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 322
{ } 
#endif
# 323 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(uchar2 *ptr, uchar2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 323
{ } 
#endif
# 324 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(uchar4 *ptr, uchar4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 324
{ } 
#endif
# 325 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(ushort2 *ptr, ushort2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 325
{ } 
#endif
# 326 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(ushort4 *ptr, ushort4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 326
{ } 
#endif
# 327 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(uint2 *ptr, uint2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 327
{ } 
#endif
# 328 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(uint4 *ptr, uint4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 328
{ } 
#endif
# 329 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(ulonglong2 *ptr, ulonglong2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 329
{ } 
#endif
# 331 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(float *ptr, float value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 331
{ } 
#endif
# 332 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(double *ptr, double value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 332
{ } 
#endif
# 333 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(float2 *ptr, float2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 333
{ } 
#endif
# 334 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(float4 *ptr, float4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 334
{ } 
#endif
# 335 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(double2 *ptr, double2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 335
{ } 
#endif
# 339 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(long *ptr, long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 339
{ } 
#endif
# 340 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(unsigned long *ptr, unsigned long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 340
{ } 
#endif
# 342 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(char *ptr, char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 342
{ } 
#endif
# 343 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(signed char *ptr, signed char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 343
{ } 
#endif
# 344 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(short *ptr, short value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 344
{ } 
#endif
# 345 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(int *ptr, int value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 345
{ } 
#endif
# 346 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(long long *ptr, long long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 346
{ } 
#endif
# 347 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(char2 *ptr, char2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 347
{ } 
#endif
# 348 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(char4 *ptr, char4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 348
{ } 
#endif
# 349 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(short2 *ptr, short2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 349
{ } 
#endif
# 350 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(short4 *ptr, short4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 350
{ } 
#endif
# 351 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(int2 *ptr, int2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 351
{ } 
#endif
# 352 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(int4 *ptr, int4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 352
{ } 
#endif
# 353 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(longlong2 *ptr, longlong2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 353
{ } 
#endif
# 355 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(unsigned char *ptr, unsigned char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 355
{ } 
#endif
# 356 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(unsigned short *ptr, unsigned short value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 356
{ } 
#endif
# 357 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(unsigned *ptr, unsigned value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 357
{ } 
#endif
# 358 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(unsigned long long *ptr, unsigned long long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 358
{ } 
#endif
# 359 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(uchar2 *ptr, uchar2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 359
{ } 
#endif
# 360 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(uchar4 *ptr, uchar4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 360
{ } 
#endif
# 361 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(ushort2 *ptr, ushort2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 361
{ } 
#endif
# 362 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(ushort4 *ptr, ushort4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 362
{ } 
#endif
# 363 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(uint2 *ptr, uint2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 363
{ } 
#endif
# 364 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(uint4 *ptr, uint4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 364
{ } 
#endif
# 365 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(ulonglong2 *ptr, ulonglong2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 365
{ } 
#endif
# 367 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(float *ptr, float value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 367
{ } 
#endif
# 368 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(double *ptr, double value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 368
{ } 
#endif
# 369 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(float2 *ptr, float2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 369
{ } 
#endif
# 370 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(float4 *ptr, float4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 370
{ } 
#endif
# 371 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(double2 *ptr, double2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 371
{ } 
#endif
# 375 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(long *ptr, long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 375
{ } 
#endif
# 376 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(unsigned long *ptr, unsigned long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 376
{ } 
#endif
# 378 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(char *ptr, char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 378
{ } 
#endif
# 379 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(signed char *ptr, signed char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 379
{ } 
#endif
# 380 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(short *ptr, short value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 380
{ } 
#endif
# 381 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(int *ptr, int value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 381
{ } 
#endif
# 382 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(long long *ptr, long long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 382
{ } 
#endif
# 383 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(char2 *ptr, char2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 383
{ } 
#endif
# 384 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(char4 *ptr, char4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 384
{ } 
#endif
# 385 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(short2 *ptr, short2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 385
{ } 
#endif
# 386 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(short4 *ptr, short4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 386
{ } 
#endif
# 387 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(int2 *ptr, int2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 387
{ } 
#endif
# 388 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(int4 *ptr, int4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 388
{ } 
#endif
# 389 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(longlong2 *ptr, longlong2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 389
{ } 
#endif
# 391 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(unsigned char *ptr, unsigned char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 391
{ } 
#endif
# 392 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(unsigned short *ptr, unsigned short value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 392
{ } 
#endif
# 393 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(unsigned *ptr, unsigned value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 393
{ } 
#endif
# 394 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(unsigned long long *ptr, unsigned long long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 394
{ } 
#endif
# 395 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(uchar2 *ptr, uchar2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 395
{ } 
#endif
# 396 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(uchar4 *ptr, uchar4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 396
{ } 
#endif
# 397 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(ushort2 *ptr, ushort2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 397
{ } 
#endif
# 398 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(ushort4 *ptr, ushort4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 398
{ } 
#endif
# 399 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(uint2 *ptr, uint2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 399
{ } 
#endif
# 400 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(uint4 *ptr, uint4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 400
{ } 
#endif
# 401 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(ulonglong2 *ptr, ulonglong2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 401
{ } 
#endif
# 403 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(float *ptr, float value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 403
{ } 
#endif
# 404 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(double *ptr, double value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 404
{ } 
#endif
# 405 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(float2 *ptr, float2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 405
{ } 
#endif
# 406 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(float4 *ptr, float4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 406
{ } 
#endif
# 407 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(double2 *ptr, double2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 407
{ } 
#endif
# 411 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(long *ptr, long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 411
{ } 
#endif
# 412 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(unsigned long *ptr, unsigned long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 412
{ } 
#endif
# 414 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(char *ptr, char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 414
{ } 
#endif
# 415 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(signed char *ptr, signed char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 415
{ } 
#endif
# 416 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(short *ptr, short value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 416
{ } 
#endif
# 417 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(int *ptr, int value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 417
{ } 
#endif
# 418 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(long long *ptr, long long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 418
{ } 
#endif
# 419 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(char2 *ptr, char2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 419
{ } 
#endif
# 420 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(char4 *ptr, char4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 420
{ } 
#endif
# 421 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(short2 *ptr, short2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 421
{ } 
#endif
# 422 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(short4 *ptr, short4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 422
{ } 
#endif
# 423 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(int2 *ptr, int2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 423
{ } 
#endif
# 424 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(int4 *ptr, int4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 424
{ } 
#endif
# 425 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(longlong2 *ptr, longlong2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 425
{ } 
#endif
# 427 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(unsigned char *ptr, unsigned char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 427
{ } 
#endif
# 428 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(unsigned short *ptr, unsigned short value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 428
{ } 
#endif
# 429 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(unsigned *ptr, unsigned value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 429
{ } 
#endif
# 430 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(unsigned long long *ptr, unsigned long long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 430
{ } 
#endif
# 431 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(uchar2 *ptr, uchar2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 431
{ } 
#endif
# 432 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(uchar4 *ptr, uchar4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 432
{ } 
#endif
# 433 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(ushort2 *ptr, ushort2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 433
{ } 
#endif
# 434 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(ushort4 *ptr, ushort4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 434
{ } 
#endif
# 435 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(uint2 *ptr, uint2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 435
{ } 
#endif
# 436 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(uint4 *ptr, uint4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 436
{ } 
#endif
# 437 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(ulonglong2 *ptr, ulonglong2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 437
{ } 
#endif
# 439 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(float *ptr, float value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 439
{ } 
#endif
# 440 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(double *ptr, double value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 440
{ } 
#endif
# 441 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(float2 *ptr, float2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 441
{ } 
#endif
# 442 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(float4 *ptr, float4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 442
{ } 
#endif
# 443 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(double2 *ptr, double2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 443
{ } 
#endif
# 460 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __funnelshift_l(unsigned lo, unsigned hi, unsigned shift) {int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}
#if 0
# 460
{ } 
#endif
# 472 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __funnelshift_lc(unsigned lo, unsigned hi, unsigned shift) {int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}
#if 0
# 472
{ } 
#endif
# 485 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __funnelshift_r(unsigned lo, unsigned hi, unsigned shift) {int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}
#if 0
# 485
{ } 
#endif
# 497 "/usr/local/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __funnelshift_rc(unsigned lo, unsigned hi, unsigned shift) {int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}
#if 0
# 497
{ } 
#endif
# 89 "/usr/local/cuda/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline int __dp2a_lo(int srcA, int srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 89
{ } 
#endif
# 90 "/usr/local/cuda/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline unsigned __dp2a_lo(unsigned srcA, unsigned srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 90
{ } 
#endif
# 92 "/usr/local/cuda/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline int __dp2a_lo(short2 srcA, char4 srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 92
{ } 
#endif
# 93 "/usr/local/cuda/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline unsigned __dp2a_lo(ushort2 srcA, uchar4 srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 93
{ } 
#endif
# 95 "/usr/local/cuda/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline int __dp2a_hi(int srcA, int srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 95
{ } 
#endif
# 96 "/usr/local/cuda/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline unsigned __dp2a_hi(unsigned srcA, unsigned srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 96
{ } 
#endif
# 98 "/usr/local/cuda/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline int __dp2a_hi(short2 srcA, char4 srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 98
{ } 
#endif
# 99 "/usr/local/cuda/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline unsigned __dp2a_hi(ushort2 srcA, uchar4 srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 99
{ } 
#endif
# 106 "/usr/local/cuda/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline int __dp4a(int srcA, int srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 106
{ } 
#endif
# 107 "/usr/local/cuda/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline unsigned __dp4a(unsigned srcA, unsigned srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 107
{ } 
#endif
# 109 "/usr/local/cuda/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline int __dp4a(char4 srcA, char4 srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 109
{ } 
#endif
# 110 "/usr/local/cuda/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline unsigned __dp4a(uchar4 srcA, uchar4 srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 110
{ } 
#endif
# 93 "/usr/local/cuda/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, unsigned value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 93
{ } 
#endif
# 94 "/usr/local/cuda/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, int value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 94
{ } 
#endif
# 95 "/usr/local/cuda/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, unsigned long value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 95
{ } 
#endif
# 96 "/usr/local/cuda/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, long value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 96
{ } 
#endif
# 97 "/usr/local/cuda/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, unsigned long long value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 97
{ } 
#endif
# 98 "/usr/local/cuda/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, long long value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 98
{ } 
#endif
# 99 "/usr/local/cuda/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, float value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 99
{ } 
#endif
# 100 "/usr/local/cuda/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, double value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 100
{ } 
#endif
# 102 "/usr/local/cuda/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, unsigned value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 102
{ } 
#endif
# 103 "/usr/local/cuda/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, int value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 103
{ } 
#endif
# 104 "/usr/local/cuda/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, unsigned long value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 104
{ } 
#endif
# 105 "/usr/local/cuda/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, long value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 105
{ } 
#endif
# 106 "/usr/local/cuda/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, unsigned long long value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 106
{ } 
#endif
# 107 "/usr/local/cuda/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, long long value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 107
{ } 
#endif
# 108 "/usr/local/cuda/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, float value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 108
{ } 
#endif
# 109 "/usr/local/cuda/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, double value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 109
{ } 
#endif
# 111 "/usr/local/cuda/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline void __nanosleep(unsigned ns) {int volatile ___ = 1;(void)ns;::exit(___);}
#if 0
# 111
{ } 
#endif
# 113 "/usr/local/cuda/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned short atomicCAS(unsigned short *address, unsigned short compare, unsigned short val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 113
{ } 
#endif
# 93 "/usr/local/cuda/include/crt/sm_80_rt.h"
__attribute__((unused)) static inline unsigned __reduce_add_sync(unsigned mask, unsigned value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 93
{ } 
#endif
# 94 "/usr/local/cuda/include/crt/sm_80_rt.h"
__attribute__((unused)) static inline unsigned __reduce_min_sync(unsigned mask, unsigned value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 94
{ } 
#endif
# 95 "/usr/local/cuda/include/crt/sm_80_rt.h"
__attribute__((unused)) static inline unsigned __reduce_max_sync(unsigned mask, unsigned value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 95
{ } 
#endif
# 97 "/usr/local/cuda/include/crt/sm_80_rt.h"
__attribute__((unused)) static inline int __reduce_add_sync(unsigned mask, int value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 97
{ } 
#endif
# 98 "/usr/local/cuda/include/crt/sm_80_rt.h"
__attribute__((unused)) static inline int __reduce_min_sync(unsigned mask, int value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 98
{ } 
#endif
# 99 "/usr/local/cuda/include/crt/sm_80_rt.h"
__attribute__((unused)) static inline int __reduce_max_sync(unsigned mask, int value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 99
{ } 
#endif
# 101 "/usr/local/cuda/include/crt/sm_80_rt.h"
__attribute__((unused)) static inline unsigned __reduce_and_sync(unsigned mask, unsigned value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 101
{ } 
#endif
# 102 "/usr/local/cuda/include/crt/sm_80_rt.h"
__attribute__((unused)) static inline unsigned __reduce_or_sync(unsigned mask, unsigned value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 102
{ } 
#endif
# 103 "/usr/local/cuda/include/crt/sm_80_rt.h"
__attribute__((unused)) static inline unsigned __reduce_xor_sync(unsigned mask, unsigned value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 103
{ } 
#endif
# 106 "/usr/local/cuda/include/crt/sm_80_rt.h"
extern "C" {
# 107
__attribute__((unused)) inline void *__nv_associate_access_property(const void *ptr, unsigned 
# 108
policy) {int volatile ___ = 1;(void)ptr;(void)policy;::exit(___);}
#if 0
# 108
{ } 
#endif
# 109 "/usr/local/cuda/include/crt/sm_80_rt.h"
__attribute__((unused)) inline void __nv_memcpy_async_shared_global_4(void *dst, const void *src, unsigned 
# 110
src_size) {int volatile ___ = 1;(void)dst;(void)src;(void)src_size;::exit(___);}
#if 0
# 110
{ } 
#endif
# 111 "/usr/local/cuda/include/crt/sm_80_rt.h"
__attribute__((unused)) inline void __nv_memcpy_async_shared_global_8(void *dst, const void *src, unsigned 
# 112
src_size) {int volatile ___ = 1;(void)dst;(void)src;(void)src_size;::exit(___);}
#if 0
# 112
{ } 
#endif
# 113 "/usr/local/cuda/include/crt/sm_80_rt.h"
__attribute__((unused)) inline void __nv_memcpy_async_shared_global_16(void *dst, const void *src, unsigned 
# 114
src_size) {int volatile ___ = 1;(void)dst;(void)src;(void)src_size;::exit(___);}
#if 0
# 114
{ } 
#endif
# 115 "/usr/local/cuda/include/crt/sm_80_rt.h"
}
# 122 "/usr/local/cuda/include/surface_functions.h"
template< class T> 
# 123
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(T *res, surface< void, 1>  surf, int x, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 124
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)s;(void)mode;
# 128
::exit(___);}
#if 0
# 124
{ 
# 128
} 
#endif
# 130 "/usr/local/cuda/include/surface_functions.h"
template< class T> 
# 131
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline T surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 132
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 138
::exit(___);}
#if 0
# 132
{ 
# 138
} 
#endif
# 140 "/usr/local/cuda/include/surface_functions.h"
template< class T> 
# 141
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(T *res, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 142
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)mode;
# 146
::exit(___);}
#if 0
# 142
{ 
# 146
} 
#endif
# 149 "/usr/local/cuda/include/surface_functions.h"
template< class T> 
# 150
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(T *res, surface< void, 2>  surf, int x, int y, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 151
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)s;(void)mode;
# 155
::exit(___);}
#if 0
# 151
{ 
# 155
} 
#endif
# 157 "/usr/local/cuda/include/surface_functions.h"
template< class T> 
# 158
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline T surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 159
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 165
::exit(___);}
#if 0
# 159
{ 
# 165
} 
#endif
# 167 "/usr/local/cuda/include/surface_functions.h"
template< class T> 
# 168
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(T *res, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 169
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)mode;
# 173
::exit(___);}
#if 0
# 169
{ 
# 173
} 
#endif
# 176 "/usr/local/cuda/include/surface_functions.h"
template< class T> 
# 177
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(T *res, surface< void, 3>  surf, int x, int y, int z, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 178
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)z;(void)s;(void)mode;
# 182
::exit(___);}
#if 0
# 178
{ 
# 182
} 
#endif
# 184 "/usr/local/cuda/include/surface_functions.h"
template< class T> 
# 185
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline T surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 186
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 192
::exit(___);}
#if 0
# 186
{ 
# 192
} 
#endif
# 194 "/usr/local/cuda/include/surface_functions.h"
template< class T> 
# 195
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(T *res, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 196
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 200
::exit(___);}
#if 0
# 196
{ 
# 200
} 
#endif
# 204 "/usr/local/cuda/include/surface_functions.h"
template< class T> 
# 205
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(T *res, surface< void, 241>  surf, int x, int layer, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 206
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)layer;(void)s;(void)mode;
# 210
::exit(___);}
#if 0
# 206
{ 
# 210
} 
#endif
# 212 "/usr/local/cuda/include/surface_functions.h"
template< class T> 
# 213
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline T surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 214
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 220
::exit(___);}
#if 0
# 214
{ 
# 220
} 
#endif
# 223 "/usr/local/cuda/include/surface_functions.h"
template< class T> 
# 224
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(T *res, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 225
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)layer;(void)mode;
# 229
::exit(___);}
#if 0
# 225
{ 
# 229
} 
#endif
# 232 "/usr/local/cuda/include/surface_functions.h"
template< class T> 
# 233
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(T *res, surface< void, 242>  surf, int x, int y, int layer, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 234
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)layer;(void)s;(void)mode;
# 238
::exit(___);}
#if 0
# 234
{ 
# 238
} 
#endif
# 240 "/usr/local/cuda/include/surface_functions.h"
template< class T> 
# 241
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline T surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 242
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 248
::exit(___);}
#if 0
# 242
{ 
# 248
} 
#endif
# 251 "/usr/local/cuda/include/surface_functions.h"
template< class T> 
# 252
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(T *res, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 253
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 257
::exit(___);}
#if 0
# 253
{ 
# 257
} 
#endif
# 260 "/usr/local/cuda/include/surface_functions.h"
template< class T> 
# 261
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(T *res, surface< void, 12>  surf, int x, int y, int face, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 262
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)face;(void)s;(void)mode;
# 266
::exit(___);}
#if 0
# 262
{ 
# 266
} 
#endif
# 268 "/usr/local/cuda/include/surface_functions.h"
template< class T> 
# 269
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline T surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 270
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 277
::exit(___);}
#if 0
# 270
{ 
# 277
} 
#endif
# 279 "/usr/local/cuda/include/surface_functions.h"
template< class T> 
# 280
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(T *res, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 281
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 285
::exit(___);}
#if 0
# 281
{ 
# 285
} 
#endif
# 288 "/usr/local/cuda/include/surface_functions.h"
template< class T> 
# 289
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(T *res, surface< void, 252>  surf, int x, int y, int layerFace, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 290
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)layerFace;(void)s;(void)mode;
# 294
::exit(___);}
#if 0
# 290
{ 
# 294
} 
#endif
# 296 "/usr/local/cuda/include/surface_functions.h"
template< class T> 
# 297
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline T surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 298
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 304
::exit(___);}
#if 0
# 298
{ 
# 304
} 
#endif
# 306 "/usr/local/cuda/include/surface_functions.h"
template< class T> 
# 307
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(T *res, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 308
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 312
::exit(___);}
#if 0
# 308
{ 
# 312
} 
#endif
# 315 "/usr/local/cuda/include/surface_functions.h"
template< class T> 
# 316
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(T val, surface< void, 1>  surf, int x, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 317
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)s;(void)mode;
# 321
::exit(___);}
#if 0
# 317
{ 
# 321
} 
#endif
# 323 "/usr/local/cuda/include/surface_functions.h"
template< class T> 
# 324
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(T val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 325
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 329
::exit(___);}
#if 0
# 325
{ 
# 329
} 
#endif
# 333 "/usr/local/cuda/include/surface_functions.h"
template< class T> 
# 334
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(T val, surface< void, 2>  surf, int x, int y, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 335
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)s;(void)mode;
# 339
::exit(___);}
#if 0
# 335
{ 
# 339
} 
#endif
# 341 "/usr/local/cuda/include/surface_functions.h"
template< class T> 
# 342
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(T val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 343
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 347
::exit(___);}
#if 0
# 343
{ 
# 347
} 
#endif
# 350 "/usr/local/cuda/include/surface_functions.h"
template< class T> 
# 351
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(T val, surface< void, 3>  surf, int x, int y, int z, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 352
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)s;(void)mode;
# 356
::exit(___);}
#if 0
# 352
{ 
# 356
} 
#endif
# 358 "/usr/local/cuda/include/surface_functions.h"
template< class T> 
# 359
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(T val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 360
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 364
::exit(___);}
#if 0
# 360
{ 
# 364
} 
#endif
# 367 "/usr/local/cuda/include/surface_functions.h"
template< class T> 
# 368
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(T val, surface< void, 241>  surf, int x, int layer, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 369
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)s;(void)mode;
# 373
::exit(___);}
#if 0
# 369
{ 
# 373
} 
#endif
# 375 "/usr/local/cuda/include/surface_functions.h"
template< class T> 
# 376
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(T val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 377
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 381
::exit(___);}
#if 0
# 377
{ 
# 381
} 
#endif
# 384 "/usr/local/cuda/include/surface_functions.h"
template< class T> 
# 385
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(T val, surface< void, 242>  surf, int x, int y, int layer, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 386
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)s;(void)mode;
# 390
::exit(___);}
#if 0
# 386
{ 
# 390
} 
#endif
# 392 "/usr/local/cuda/include/surface_functions.h"
template< class T> 
# 393
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(T val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 394
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 398
::exit(___);}
#if 0
# 394
{ 
# 398
} 
#endif
# 401 "/usr/local/cuda/include/surface_functions.h"
template< class T> 
# 402
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(T val, surface< void, 12>  surf, int x, int y, int face, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 403
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)s;(void)mode;
# 407
::exit(___);}
#if 0
# 403
{ 
# 407
} 
#endif
# 409 "/usr/local/cuda/include/surface_functions.h"
template< class T> 
# 410
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(T val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 411
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 415
::exit(___);}
#if 0
# 411
{ 
# 415
} 
#endif
# 419 "/usr/local/cuda/include/surface_functions.h"
template< class T> 
# 420
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(T val, surface< void, 252>  surf, int x, int y, int layerFace, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 421
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)s;(void)mode;
# 425
::exit(___);}
#if 0
# 421
{ 
# 425
} 
#endif
# 427 "/usr/local/cuda/include/surface_functions.h"
template< class T> 
# 428
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(T val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 429
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 433
::exit(___);}
#if 0
# 429
{ 
# 433
} 
#endif
# 72 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> 
# 73
struct __nv_tex_rmet_ret { }; 
# 75
template<> struct __nv_tex_rmet_ret< char>  { typedef char type; }; 
# 76
template<> struct __nv_tex_rmet_ret< signed char>  { typedef signed char type; }; 
# 77
template<> struct __nv_tex_rmet_ret< unsigned char>  { typedef unsigned char type; }; 
# 78
template<> struct __nv_tex_rmet_ret< char1>  { typedef char1 type; }; 
# 79
template<> struct __nv_tex_rmet_ret< uchar1>  { typedef uchar1 type; }; 
# 80
template<> struct __nv_tex_rmet_ret< char2>  { typedef char2 type; }; 
# 81
template<> struct __nv_tex_rmet_ret< uchar2>  { typedef uchar2 type; }; 
# 82
template<> struct __nv_tex_rmet_ret< char4>  { typedef char4 type; }; 
# 83
template<> struct __nv_tex_rmet_ret< uchar4>  { typedef uchar4 type; }; 
# 85
template<> struct __nv_tex_rmet_ret< short>  { typedef short type; }; 
# 86
template<> struct __nv_tex_rmet_ret< unsigned short>  { typedef unsigned short type; }; 
# 87
template<> struct __nv_tex_rmet_ret< short1>  { typedef short1 type; }; 
# 88
template<> struct __nv_tex_rmet_ret< ushort1>  { typedef ushort1 type; }; 
# 89
template<> struct __nv_tex_rmet_ret< short2>  { typedef short2 type; }; 
# 90
template<> struct __nv_tex_rmet_ret< ushort2>  { typedef ushort2 type; }; 
# 91
template<> struct __nv_tex_rmet_ret< short4>  { typedef short4 type; }; 
# 92
template<> struct __nv_tex_rmet_ret< ushort4>  { typedef ushort4 type; }; 
# 94
template<> struct __nv_tex_rmet_ret< int>  { typedef int type; }; 
# 95
template<> struct __nv_tex_rmet_ret< unsigned>  { typedef unsigned type; }; 
# 96
template<> struct __nv_tex_rmet_ret< int1>  { typedef int1 type; }; 
# 97
template<> struct __nv_tex_rmet_ret< uint1>  { typedef uint1 type; }; 
# 98
template<> struct __nv_tex_rmet_ret< int2>  { typedef int2 type; }; 
# 99
template<> struct __nv_tex_rmet_ret< uint2>  { typedef uint2 type; }; 
# 100
template<> struct __nv_tex_rmet_ret< int4>  { typedef int4 type; }; 
# 101
template<> struct __nv_tex_rmet_ret< uint4>  { typedef uint4 type; }; 
# 113 "/usr/local/cuda/include/texture_fetch_functions.h"
template<> struct __nv_tex_rmet_ret< float>  { typedef float type; }; 
# 114
template<> struct __nv_tex_rmet_ret< float1>  { typedef float1 type; }; 
# 115
template<> struct __nv_tex_rmet_ret< float2>  { typedef float2 type; }; 
# 116
template<> struct __nv_tex_rmet_ret< float4>  { typedef float4 type; }; 
# 119
template< class T> struct __nv_tex_rmet_cast { typedef T *type; }; 
# 131 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> 
# 132
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex1Dfetch(texture< T, 1, cudaReadModeElementType>  t, int x) 
# 133
{int volatile ___ = 1;(void)t;(void)x;
# 139
::exit(___);}
#if 0
# 133
{ 
# 139
} 
#endif
# 141 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> 
# 142
struct __nv_tex_rmnf_ret { }; 
# 144
template<> struct __nv_tex_rmnf_ret< char>  { typedef float type; }; 
# 145
template<> struct __nv_tex_rmnf_ret< signed char>  { typedef float type; }; 
# 146
template<> struct __nv_tex_rmnf_ret< unsigned char>  { typedef float type; }; 
# 147
template<> struct __nv_tex_rmnf_ret< short>  { typedef float type; }; 
# 148
template<> struct __nv_tex_rmnf_ret< unsigned short>  { typedef float type; }; 
# 149
template<> struct __nv_tex_rmnf_ret< char1>  { typedef float1 type; }; 
# 150
template<> struct __nv_tex_rmnf_ret< uchar1>  { typedef float1 type; }; 
# 151
template<> struct __nv_tex_rmnf_ret< short1>  { typedef float1 type; }; 
# 152
template<> struct __nv_tex_rmnf_ret< ushort1>  { typedef float1 type; }; 
# 153
template<> struct __nv_tex_rmnf_ret< char2>  { typedef float2 type; }; 
# 154
template<> struct __nv_tex_rmnf_ret< uchar2>  { typedef float2 type; }; 
# 155
template<> struct __nv_tex_rmnf_ret< short2>  { typedef float2 type; }; 
# 156
template<> struct __nv_tex_rmnf_ret< ushort2>  { typedef float2 type; }; 
# 157
template<> struct __nv_tex_rmnf_ret< char4>  { typedef float4 type; }; 
# 158
template<> struct __nv_tex_rmnf_ret< uchar4>  { typedef float4 type; }; 
# 159
template<> struct __nv_tex_rmnf_ret< short4>  { typedef float4 type; }; 
# 160
template<> struct __nv_tex_rmnf_ret< ushort4>  { typedef float4 type; }; 
# 162
template< class T> 
# 163
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex1Dfetch(texture< T, 1, cudaReadModeNormalizedFloat>  t, int x) 
# 164
{int volatile ___ = 1;(void)t;(void)x;
# 171
::exit(___);}
#if 0
# 164
{ 
# 171
} 
#endif
# 174 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> 
# 175
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex1D(texture< T, 1, cudaReadModeElementType>  t, float x) 
# 176
{int volatile ___ = 1;(void)t;(void)x;
# 182
::exit(___);}
#if 0
# 176
{ 
# 182
} 
#endif
# 184 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> 
# 185
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex1D(texture< T, 1, cudaReadModeNormalizedFloat>  t, float x) 
# 186
{int volatile ___ = 1;(void)t;(void)x;
# 193
::exit(___);}
#if 0
# 186
{ 
# 193
} 
#endif
# 197 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> 
# 198
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex2D(texture< T, 2, cudaReadModeElementType>  t, float x, float y) 
# 199
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 206
::exit(___);}
#if 0
# 199
{ 
# 206
} 
#endif
# 208 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> 
# 209
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex2D(texture< T, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
# 210
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 217
::exit(___);}
#if 0
# 210
{ 
# 217
} 
#endif
# 221 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> 
# 222
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex1DLayered(texture< T, 241, cudaReadModeElementType>  t, float x, int layer) 
# 223
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 229
::exit(___);}
#if 0
# 223
{ 
# 229
} 
#endif
# 231 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> 
# 232
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex1DLayered(texture< T, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
# 233
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 240
::exit(___);}
#if 0
# 233
{ 
# 240
} 
#endif
# 244 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> 
# 245
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex2DLayered(texture< T, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 246
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 252
::exit(___);}
#if 0
# 246
{ 
# 252
} 
#endif
# 254 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> 
# 255
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex2DLayered(texture< T, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
# 256
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 263
::exit(___);}
#if 0
# 256
{ 
# 263
} 
#endif
# 266 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> 
# 267
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex3D(texture< T, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 268
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 274
::exit(___);}
#if 0
# 268
{ 
# 274
} 
#endif
# 276 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> 
# 277
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex3D(texture< T, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 278
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 285
::exit(___);}
#if 0
# 278
{ 
# 285
} 
#endif
# 288 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> 
# 289
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type texCubemap(texture< T, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 290
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 296
::exit(___);}
#if 0
# 290
{ 
# 296
} 
#endif
# 298 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> 
# 299
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type texCubemap(texture< T, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 300
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 307
::exit(___);}
#if 0
# 300
{ 
# 307
} 
#endif
# 310 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> 
# 311
struct __nv_tex2dgather_ret { }; 
# 312
template<> struct __nv_tex2dgather_ret< char>  { typedef char4 type; }; 
# 313
template<> struct __nv_tex2dgather_ret< signed char>  { typedef char4 type; }; 
# 314
template<> struct __nv_tex2dgather_ret< char1>  { typedef char4 type; }; 
# 315
template<> struct __nv_tex2dgather_ret< char2>  { typedef char4 type; }; 
# 316
template<> struct __nv_tex2dgather_ret< char3>  { typedef char4 type; }; 
# 317
template<> struct __nv_tex2dgather_ret< char4>  { typedef char4 type; }; 
# 318
template<> struct __nv_tex2dgather_ret< unsigned char>  { typedef uchar4 type; }; 
# 319
template<> struct __nv_tex2dgather_ret< uchar1>  { typedef uchar4 type; }; 
# 320
template<> struct __nv_tex2dgather_ret< uchar2>  { typedef uchar4 type; }; 
# 321
template<> struct __nv_tex2dgather_ret< uchar3>  { typedef uchar4 type; }; 
# 322
template<> struct __nv_tex2dgather_ret< uchar4>  { typedef uchar4 type; }; 
# 324
template<> struct __nv_tex2dgather_ret< short>  { typedef short4 type; }; 
# 325
template<> struct __nv_tex2dgather_ret< short1>  { typedef short4 type; }; 
# 326
template<> struct __nv_tex2dgather_ret< short2>  { typedef short4 type; }; 
# 327
template<> struct __nv_tex2dgather_ret< short3>  { typedef short4 type; }; 
# 328
template<> struct __nv_tex2dgather_ret< short4>  { typedef short4 type; }; 
# 329
template<> struct __nv_tex2dgather_ret< unsigned short>  { typedef ushort4 type; }; 
# 330
template<> struct __nv_tex2dgather_ret< ushort1>  { typedef ushort4 type; }; 
# 331
template<> struct __nv_tex2dgather_ret< ushort2>  { typedef ushort4 type; }; 
# 332
template<> struct __nv_tex2dgather_ret< ushort3>  { typedef ushort4 type; }; 
# 333
template<> struct __nv_tex2dgather_ret< ushort4>  { typedef ushort4 type; }; 
# 335
template<> struct __nv_tex2dgather_ret< int>  { typedef int4 type; }; 
# 336
template<> struct __nv_tex2dgather_ret< int1>  { typedef int4 type; }; 
# 337
template<> struct __nv_tex2dgather_ret< int2>  { typedef int4 type; }; 
# 338
template<> struct __nv_tex2dgather_ret< int3>  { typedef int4 type; }; 
# 339
template<> struct __nv_tex2dgather_ret< int4>  { typedef int4 type; }; 
# 340
template<> struct __nv_tex2dgather_ret< unsigned>  { typedef uint4 type; }; 
# 341
template<> struct __nv_tex2dgather_ret< uint1>  { typedef uint4 type; }; 
# 342
template<> struct __nv_tex2dgather_ret< uint2>  { typedef uint4 type; }; 
# 343
template<> struct __nv_tex2dgather_ret< uint3>  { typedef uint4 type; }; 
# 344
template<> struct __nv_tex2dgather_ret< uint4>  { typedef uint4 type; }; 
# 346
template<> struct __nv_tex2dgather_ret< float>  { typedef float4 type; }; 
# 347
template<> struct __nv_tex2dgather_ret< float1>  { typedef float4 type; }; 
# 348
template<> struct __nv_tex2dgather_ret< float2>  { typedef float4 type; }; 
# 349
template<> struct __nv_tex2dgather_ret< float3>  { typedef float4 type; }; 
# 350
template<> struct __nv_tex2dgather_ret< float4>  { typedef float4 type; }; 
# 352
template< class T> 
# 353
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex2dgather_ret< T> ::type tex2Dgather(texture< T, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0) 
# 354
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 361
::exit(___);}
#if 0
# 354
{ 
# 361
} 
#endif
# 364 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> struct __nv_tex2dgather_rmnf_ret { }; 
# 365
template<> struct __nv_tex2dgather_rmnf_ret< char>  { typedef float4 type; }; 
# 366
template<> struct __nv_tex2dgather_rmnf_ret< signed char>  { typedef float4 type; }; 
# 367
template<> struct __nv_tex2dgather_rmnf_ret< unsigned char>  { typedef float4 type; }; 
# 368
template<> struct __nv_tex2dgather_rmnf_ret< char1>  { typedef float4 type; }; 
# 369
template<> struct __nv_tex2dgather_rmnf_ret< uchar1>  { typedef float4 type; }; 
# 370
template<> struct __nv_tex2dgather_rmnf_ret< char2>  { typedef float4 type; }; 
# 371
template<> struct __nv_tex2dgather_rmnf_ret< uchar2>  { typedef float4 type; }; 
# 372
template<> struct __nv_tex2dgather_rmnf_ret< char3>  { typedef float4 type; }; 
# 373
template<> struct __nv_tex2dgather_rmnf_ret< uchar3>  { typedef float4 type; }; 
# 374
template<> struct __nv_tex2dgather_rmnf_ret< char4>  { typedef float4 type; }; 
# 375
template<> struct __nv_tex2dgather_rmnf_ret< uchar4>  { typedef float4 type; }; 
# 376
template<> struct __nv_tex2dgather_rmnf_ret< signed short>  { typedef float4 type; }; 
# 377
template<> struct __nv_tex2dgather_rmnf_ret< unsigned short>  { typedef float4 type; }; 
# 378
template<> struct __nv_tex2dgather_rmnf_ret< short1>  { typedef float4 type; }; 
# 379
template<> struct __nv_tex2dgather_rmnf_ret< ushort1>  { typedef float4 type; }; 
# 380
template<> struct __nv_tex2dgather_rmnf_ret< short2>  { typedef float4 type; }; 
# 381
template<> struct __nv_tex2dgather_rmnf_ret< ushort2>  { typedef float4 type; }; 
# 382
template<> struct __nv_tex2dgather_rmnf_ret< short3>  { typedef float4 type; }; 
# 383
template<> struct __nv_tex2dgather_rmnf_ret< ushort3>  { typedef float4 type; }; 
# 384
template<> struct __nv_tex2dgather_rmnf_ret< short4>  { typedef float4 type; }; 
# 385
template<> struct __nv_tex2dgather_rmnf_ret< ushort4>  { typedef float4 type; }; 
# 387
template< class T> 
# 388
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex2dgather_rmnf_ret< T> ::type tex2Dgather(texture< T, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = 0) 
# 389
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 396
::exit(___);}
#if 0
# 389
{ 
# 396
} 
#endif
# 400 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> 
# 401
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex1DLod(texture< T, 1, cudaReadModeElementType>  t, float x, float level) 
# 402
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 408
::exit(___);}
#if 0
# 402
{ 
# 408
} 
#endif
# 410 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> 
# 411
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex1DLod(texture< T, 1, cudaReadModeNormalizedFloat>  t, float x, float level) 
# 412
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 419
::exit(___);}
#if 0
# 412
{ 
# 419
} 
#endif
# 422 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> 
# 423
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex2DLod(texture< T, 2, cudaReadModeElementType>  t, float x, float y, float level) 
# 424
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 430
::exit(___);}
#if 0
# 424
{ 
# 430
} 
#endif
# 432 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> 
# 433
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex2DLod(texture< T, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level) 
# 434
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 441
::exit(___);}
#if 0
# 434
{ 
# 441
} 
#endif
# 444 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> 
# 445
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex1DLayeredLod(texture< T, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
# 446
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 452
::exit(___);}
#if 0
# 446
{ 
# 452
} 
#endif
# 454 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> 
# 455
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex1DLayeredLod(texture< T, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level) 
# 456
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 463
::exit(___);}
#if 0
# 456
{ 
# 463
} 
#endif
# 466 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> 
# 467
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex2DLayeredLod(texture< T, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
# 468
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 474
::exit(___);}
#if 0
# 468
{ 
# 474
} 
#endif
# 476 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> 
# 477
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex2DLayeredLod(texture< T, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level) 
# 478
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 485
::exit(___);}
#if 0
# 478
{ 
# 485
} 
#endif
# 488 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> 
# 489
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex3DLod(texture< T, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 490
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 496
::exit(___);}
#if 0
# 490
{ 
# 496
} 
#endif
# 498 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> 
# 499
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex3DLod(texture< T, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 500
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 507
::exit(___);}
#if 0
# 500
{ 
# 507
} 
#endif
# 510 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> 
# 511
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type texCubemapLod(texture< T, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 512
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 518
::exit(___);}
#if 0
# 512
{ 
# 518
} 
#endif
# 520 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> 
# 521
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type texCubemapLod(texture< T, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 522
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 529
::exit(___);}
#if 0
# 522
{ 
# 529
} 
#endif
# 533 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> 
# 534
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type texCubemapLayered(texture< T, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 535
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 541
::exit(___);}
#if 0
# 535
{ 
# 541
} 
#endif
# 543 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> 
# 544
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type texCubemapLayered(texture< T, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
# 545
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 552
::exit(___);}
#if 0
# 545
{ 
# 552
} 
#endif
# 556 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> 
# 557
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type texCubemapLayeredLod(texture< T, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
# 558
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 564
::exit(___);}
#if 0
# 558
{ 
# 564
} 
#endif
# 566 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> 
# 567
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type texCubemapLayeredLod(texture< T, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level) 
# 568
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 575
::exit(___);}
#if 0
# 568
{ 
# 575
} 
#endif
# 579 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> 
# 580
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type texCubemapGrad(texture< T, 12, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 581
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 587
::exit(___);}
#if 0
# 581
{ 
# 587
} 
#endif
# 589 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> 
# 590
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type texCubemapGrad(texture< T, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 591
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 598
::exit(___);}
#if 0
# 591
{ 
# 598
} 
#endif
# 602 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> 
# 603
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type texCubemapLayeredGrad(texture< T, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float4 dPdx, float4 dPdy) 
# 604
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)dPdx;(void)dPdy;
# 610
::exit(___);}
#if 0
# 604
{ 
# 610
} 
#endif
# 612 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> 
# 613
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type texCubemapLayeredGrad(texture< T, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float4 dPdx, float4 dPdy) 
# 614
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)dPdx;(void)dPdy;
# 621
::exit(___);}
#if 0
# 614
{ 
# 621
} 
#endif
# 625 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> 
# 626
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex1DGrad(texture< T, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
# 627
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 633
::exit(___);}
#if 0
# 627
{ 
# 633
} 
#endif
# 635 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> 
# 636
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex1DGrad(texture< T, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy) 
# 637
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 644
::exit(___);}
#if 0
# 637
{ 
# 644
} 
#endif
# 648 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> 
# 649
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex2DGrad(texture< T, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 650
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 656
::exit(___);}
#if 0
# 650
{ 
# 656
} 
#endif
# 658 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> 
# 659
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex2DGrad(texture< T, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 660
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 667
::exit(___);}
#if 0
# 660
{ 
# 667
} 
#endif
# 670 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> 
# 671
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex1DLayeredGrad(texture< T, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
# 672
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 678
::exit(___);}
#if 0
# 672
{ 
# 678
} 
#endif
# 680 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> 
# 681
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex1DLayeredGrad(texture< T, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy) 
# 682
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 689
::exit(___);}
#if 0
# 682
{ 
# 689
} 
#endif
# 692 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> 
# 693
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex2DLayeredGrad(texture< T, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 694
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 700
::exit(___);}
#if 0
# 694
{ 
# 700
} 
#endif
# 702 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> 
# 703
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex2DLayeredGrad(texture< T, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 704
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 711
::exit(___);}
#if 0
# 704
{ 
# 711
} 
#endif
# 714 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> 
# 715
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex3DGrad(texture< T, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 716
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 722
::exit(___);}
#if 0
# 716
{ 
# 722
} 
#endif
# 724 "/usr/local/cuda/include/texture_fetch_functions.h"
template< class T> 
# 725
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex3DGrad(texture< T, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 726
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 733
::exit(___);}
#if 0
# 726
{ 
# 733
} 
#endif
# 64 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> struct __nv_itex_trait { }; 
# 65
template<> struct __nv_itex_trait< char>  { typedef void type; }; 
# 66
template<> struct __nv_itex_trait< signed char>  { typedef void type; }; 
# 67
template<> struct __nv_itex_trait< char1>  { typedef void type; }; 
# 68
template<> struct __nv_itex_trait< char2>  { typedef void type; }; 
# 69
template<> struct __nv_itex_trait< char4>  { typedef void type; }; 
# 70
template<> struct __nv_itex_trait< unsigned char>  { typedef void type; }; 
# 71
template<> struct __nv_itex_trait< uchar1>  { typedef void type; }; 
# 72
template<> struct __nv_itex_trait< uchar2>  { typedef void type; }; 
# 73
template<> struct __nv_itex_trait< uchar4>  { typedef void type; }; 
# 74
template<> struct __nv_itex_trait< short>  { typedef void type; }; 
# 75
template<> struct __nv_itex_trait< short1>  { typedef void type; }; 
# 76
template<> struct __nv_itex_trait< short2>  { typedef void type; }; 
# 77
template<> struct __nv_itex_trait< short4>  { typedef void type; }; 
# 78
template<> struct __nv_itex_trait< unsigned short>  { typedef void type; }; 
# 79
template<> struct __nv_itex_trait< ushort1>  { typedef void type; }; 
# 80
template<> struct __nv_itex_trait< ushort2>  { typedef void type; }; 
# 81
template<> struct __nv_itex_trait< ushort4>  { typedef void type; }; 
# 82
template<> struct __nv_itex_trait< int>  { typedef void type; }; 
# 83
template<> struct __nv_itex_trait< int1>  { typedef void type; }; 
# 84
template<> struct __nv_itex_trait< int2>  { typedef void type; }; 
# 85
template<> struct __nv_itex_trait< int4>  { typedef void type; }; 
# 86
template<> struct __nv_itex_trait< unsigned>  { typedef void type; }; 
# 87
template<> struct __nv_itex_trait< uint1>  { typedef void type; }; 
# 88
template<> struct __nv_itex_trait< uint2>  { typedef void type; }; 
# 89
template<> struct __nv_itex_trait< uint4>  { typedef void type; }; 
# 100 "/usr/local/cuda/include/texture_indirect_functions.h"
template<> struct __nv_itex_trait< float>  { typedef void type; }; 
# 101
template<> struct __nv_itex_trait< float1>  { typedef void type; }; 
# 102
template<> struct __nv_itex_trait< float2>  { typedef void type; }; 
# 103
template<> struct __nv_itex_trait< float4>  { typedef void type; }; 
# 107
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 108
tex1Dfetch(T *ptr, cudaTextureObject_t obj, int x) 
# 109
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;
# 113
::exit(___);}
#if 0
# 109
{ 
# 113
} 
#endif
# 115 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 116
tex1Dfetch(cudaTextureObject_t texObject, int x) 
# 117
{int volatile ___ = 1;(void)texObject;(void)x;
# 123
::exit(___);}
#if 0
# 117
{ 
# 123
} 
#endif
# 125 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 126
tex1D(T *ptr, cudaTextureObject_t obj, float x) 
# 127
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;
# 131
::exit(___);}
#if 0
# 127
{ 
# 131
} 
#endif
# 134 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 135
tex1D(cudaTextureObject_t texObject, float x) 
# 136
{int volatile ___ = 1;(void)texObject;(void)x;
# 142
::exit(___);}
#if 0
# 136
{ 
# 142
} 
#endif
# 145 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 146
tex2D(T *ptr, cudaTextureObject_t obj, float x, float y) 
# 147
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;
# 151
::exit(___);}
#if 0
# 147
{ 
# 151
} 
#endif
# 153 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 154
tex2D(cudaTextureObject_t texObject, float x, float y) 
# 155
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;
# 161
::exit(___);}
#if 0
# 155
{ 
# 161
} 
#endif
# 164 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 165
tex2D(T *ptr, cudaTextureObject_t obj, float x, float y, bool *
# 166
isResident) 
# 167
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)isResident;
# 173
::exit(___);}
#if 0
# 167
{ 
# 173
} 
#endif
# 175 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 176
tex2D(cudaTextureObject_t texObject, float x, float y, bool *isResident) 
# 177
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)isResident;
# 183
::exit(___);}
#if 0
# 177
{ 
# 183
} 
#endif
# 188 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 189
tex3D(T *ptr, cudaTextureObject_t obj, float x, float y, float z) 
# 190
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;
# 194
::exit(___);}
#if 0
# 190
{ 
# 194
} 
#endif
# 196 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 197
tex3D(cudaTextureObject_t texObject, float x, float y, float z) 
# 198
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;
# 204
::exit(___);}
#if 0
# 198
{ 
# 204
} 
#endif
# 207 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 208
tex3D(T *ptr, cudaTextureObject_t obj, float x, float y, float z, bool *
# 209
isResident) 
# 210
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)isResident;
# 216
::exit(___);}
#if 0
# 210
{ 
# 216
} 
#endif
# 218 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 219
tex3D(cudaTextureObject_t texObject, float x, float y, float z, bool *isResident) 
# 220
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)isResident;
# 226
::exit(___);}
#if 0
# 220
{ 
# 226
} 
#endif
# 230 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 231
tex1DLayered(T *ptr, cudaTextureObject_t obj, float x, int layer) 
# 232
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)layer;
# 236
::exit(___);}
#if 0
# 232
{ 
# 236
} 
#endif
# 238 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 239
tex1DLayered(cudaTextureObject_t texObject, float x, int layer) 
# 240
{int volatile ___ = 1;(void)texObject;(void)x;(void)layer;
# 246
::exit(___);}
#if 0
# 240
{ 
# 246
} 
#endif
# 248 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 249
tex2DLayered(T *ptr, cudaTextureObject_t obj, float x, float y, int layer) 
# 250
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;
# 254
::exit(___);}
#if 0
# 250
{ 
# 254
} 
#endif
# 256 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 257
tex2DLayered(cudaTextureObject_t texObject, float x, float y, int layer) 
# 258
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;
# 264
::exit(___);}
#if 0
# 258
{ 
# 264
} 
#endif
# 267 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 268
tex2DLayered(T *ptr, cudaTextureObject_t obj, float x, float y, int layer, bool *isResident) 
# 269
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;(void)isResident;
# 275
::exit(___);}
#if 0
# 269
{ 
# 275
} 
#endif
# 277 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 278
tex2DLayered(cudaTextureObject_t texObject, float x, float y, int layer, bool *isResident) 
# 279
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)isResident;
# 285
::exit(___);}
#if 0
# 279
{ 
# 285
} 
#endif
# 289 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 290
texCubemap(T *ptr, cudaTextureObject_t obj, float x, float y, float z) 
# 291
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;
# 295
::exit(___);}
#if 0
# 291
{ 
# 295
} 
#endif
# 298 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 299
texCubemap(cudaTextureObject_t texObject, float x, float y, float z) 
# 300
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;
# 306
::exit(___);}
#if 0
# 300
{ 
# 306
} 
#endif
# 309 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 310
texCubemapLayered(T *ptr, cudaTextureObject_t obj, float x, float y, float z, int layer) 
# 311
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)layer;
# 315
::exit(___);}
#if 0
# 311
{ 
# 315
} 
#endif
# 317 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 318
texCubemapLayered(cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 319
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 325
::exit(___);}
#if 0
# 319
{ 
# 325
} 
#endif
# 327 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 328
tex2Dgather(T *ptr, cudaTextureObject_t obj, float x, float y, int comp = 0) 
# 329
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)comp;
# 333
::exit(___);}
#if 0
# 329
{ 
# 333
} 
#endif
# 335 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 336
tex2Dgather(cudaTextureObject_t to, float x, float y, int comp = 0) 
# 337
{int volatile ___ = 1;(void)to;(void)x;(void)y;(void)comp;
# 343
::exit(___);}
#if 0
# 337
{ 
# 343
} 
#endif
# 346 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 347
tex2Dgather(T *ptr, cudaTextureObject_t obj, float x, float y, bool *isResident, int comp = 0) 
# 348
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)isResident;(void)comp;
# 354
::exit(___);}
#if 0
# 348
{ 
# 354
} 
#endif
# 356 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 357
tex2Dgather(cudaTextureObject_t to, float x, float y, bool *isResident, int comp = 0) 
# 358
{int volatile ___ = 1;(void)to;(void)x;(void)y;(void)isResident;(void)comp;
# 364
::exit(___);}
#if 0
# 358
{ 
# 364
} 
#endif
# 368 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 369
tex1DLod(T *ptr, cudaTextureObject_t obj, float x, float level) 
# 370
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)level;
# 374
::exit(___);}
#if 0
# 370
{ 
# 374
} 
#endif
# 376 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 377
tex1DLod(cudaTextureObject_t texObject, float x, float level) 
# 378
{int volatile ___ = 1;(void)texObject;(void)x;(void)level;
# 384
::exit(___);}
#if 0
# 378
{ 
# 384
} 
#endif
# 387 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 388
tex2DLod(T *ptr, cudaTextureObject_t obj, float x, float y, float level) 
# 389
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)level;
# 393
::exit(___);}
#if 0
# 389
{ 
# 393
} 
#endif
# 395 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 396
tex2DLod(cudaTextureObject_t texObject, float x, float y, float level) 
# 397
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)level;
# 403
::exit(___);}
#if 0
# 397
{ 
# 403
} 
#endif
# 407 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 408
tex2DLod(T *ptr, cudaTextureObject_t obj, float x, float y, float level, bool *isResident) 
# 409
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)level;(void)isResident;
# 415
::exit(___);}
#if 0
# 409
{ 
# 415
} 
#endif
# 417 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 418
tex2DLod(cudaTextureObject_t texObject, float x, float y, float level, bool *isResident) 
# 419
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)level;(void)isResident;
# 425
::exit(___);}
#if 0
# 419
{ 
# 425
} 
#endif
# 430 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 431
tex3DLod(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float level) 
# 432
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)level;
# 436
::exit(___);}
#if 0
# 432
{ 
# 436
} 
#endif
# 438 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 439
tex3DLod(cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 440
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 446
::exit(___);}
#if 0
# 440
{ 
# 446
} 
#endif
# 449 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 450
tex3DLod(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float level, bool *isResident) 
# 451
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)level;(void)isResident;
# 457
::exit(___);}
#if 0
# 451
{ 
# 457
} 
#endif
# 459 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 460
tex3DLod(cudaTextureObject_t texObject, float x, float y, float z, float level, bool *isResident) 
# 461
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)level;(void)isResident;
# 467
::exit(___);}
#if 0
# 461
{ 
# 467
} 
#endif
# 472 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 473
tex1DLayeredLod(T *ptr, cudaTextureObject_t obj, float x, int layer, float level) 
# 474
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)layer;(void)level;
# 478
::exit(___);}
#if 0
# 474
{ 
# 478
} 
#endif
# 480 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 481
tex1DLayeredLod(cudaTextureObject_t texObject, float x, int layer, float level) 
# 482
{int volatile ___ = 1;(void)texObject;(void)x;(void)layer;(void)level;
# 488
::exit(___);}
#if 0
# 482
{ 
# 488
} 
#endif
# 491 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 492
tex2DLayeredLod(T *ptr, cudaTextureObject_t obj, float x, float y, int layer, float level) 
# 493
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;(void)level;
# 497
::exit(___);}
#if 0
# 493
{ 
# 497
} 
#endif
# 499 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 500
tex2DLayeredLod(cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 501
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 507
::exit(___);}
#if 0
# 501
{ 
# 507
} 
#endif
# 510 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 511
tex2DLayeredLod(T *ptr, cudaTextureObject_t obj, float x, float y, int layer, float level, bool *isResident) 
# 512
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;(void)level;(void)isResident;
# 518
::exit(___);}
#if 0
# 512
{ 
# 518
} 
#endif
# 520 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 521
tex2DLayeredLod(cudaTextureObject_t texObject, float x, float y, int layer, float level, bool *isResident) 
# 522
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)level;(void)isResident;
# 528
::exit(___);}
#if 0
# 522
{ 
# 528
} 
#endif
# 531 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 532
texCubemapLod(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float level) 
# 533
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)level;
# 537
::exit(___);}
#if 0
# 533
{ 
# 537
} 
#endif
# 539 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 540
texCubemapLod(cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 541
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 547
::exit(___);}
#if 0
# 541
{ 
# 547
} 
#endif
# 550 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 551
texCubemapGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 552
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 556
::exit(___);}
#if 0
# 552
{ 
# 556
} 
#endif
# 558 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 559
texCubemapGrad(cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 560
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 566
::exit(___);}
#if 0
# 560
{ 
# 566
} 
#endif
# 568 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 569
texCubemapLayeredLod(T *ptr, cudaTextureObject_t obj, float x, float y, float z, int layer, float level) 
# 570
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 574
::exit(___);}
#if 0
# 570
{ 
# 574
} 
#endif
# 576 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 577
texCubemapLayeredLod(cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 578
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 584
::exit(___);}
#if 0
# 578
{ 
# 584
} 
#endif
# 586 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 587
tex1DGrad(T *ptr, cudaTextureObject_t obj, float x, float dPdx, float dPdy) 
# 588
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)dPdx;(void)dPdy;
# 592
::exit(___);}
#if 0
# 588
{ 
# 592
} 
#endif
# 594 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 595
tex1DGrad(cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 596
{int volatile ___ = 1;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 602
::exit(___);}
#if 0
# 596
{ 
# 602
} 
#endif
# 605 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 606
tex2DGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float2 dPdx, float2 dPdy) 
# 607
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 612
::exit(___);}
#if 0
# 607
{ 
# 612
} 
#endif
# 614 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 615
tex2DGrad(cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 616
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 622
::exit(___);}
#if 0
# 616
{ 
# 622
} 
#endif
# 625 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 626
tex2DGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float2 dPdx, float2 dPdy, bool *isResident) 
# 627
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)dPdx;(void)dPdy;(void)isResident;
# 634
::exit(___);}
#if 0
# 627
{ 
# 634
} 
#endif
# 636 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 637
tex2DGrad(cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy, bool *isResident) 
# 638
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;(void)isResident;
# 644
::exit(___);}
#if 0
# 638
{ 
# 644
} 
#endif
# 648 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 649
tex3DGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 650
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 654
::exit(___);}
#if 0
# 650
{ 
# 654
} 
#endif
# 656 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 657
tex3DGrad(cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 658
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 664
::exit(___);}
#if 0
# 658
{ 
# 664
} 
#endif
# 667 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 668
tex3DGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float4 dPdx, float4 dPdy, bool *isResident) 
# 669
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;(void)isResident;
# 675
::exit(___);}
#if 0
# 669
{ 
# 675
} 
#endif
# 677 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 678
tex3DGrad(cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy, bool *isResident) 
# 679
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;(void)isResident;
# 685
::exit(___);}
#if 0
# 679
{ 
# 685
} 
#endif
# 690 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 691
tex1DLayeredGrad(T *ptr, cudaTextureObject_t obj, float x, int layer, float dPdx, float dPdy) 
# 692
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 696
::exit(___);}
#if 0
# 692
{ 
# 696
} 
#endif
# 698 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 699
tex1DLayeredGrad(cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 700
{int volatile ___ = 1;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 706
::exit(___);}
#if 0
# 700
{ 
# 706
} 
#endif
# 709 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 710
tex2DLayeredGrad(T *ptr, cudaTextureObject_t obj, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 711
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 715
::exit(___);}
#if 0
# 711
{ 
# 715
} 
#endif
# 717 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 718
tex2DLayeredGrad(cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 719
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 725
::exit(___);}
#if 0
# 719
{ 
# 725
} 
#endif
# 728 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 729
tex2DLayeredGrad(T *ptr, cudaTextureObject_t obj, float x, float y, int layer, float2 dPdx, float2 dPdy, bool *isResident) 
# 730
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;(void)isResident;
# 736
::exit(___);}
#if 0
# 730
{ 
# 736
} 
#endif
# 738 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 739
tex2DLayeredGrad(cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy, bool *isResident) 
# 740
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;(void)isResident;
# 746
::exit(___);}
#if 0
# 740
{ 
# 746
} 
#endif
# 750 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 751
texCubemapLayeredGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float z, int layer, float4 dPdx, float4 dPdy) 
# 752
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)layer;(void)dPdx;(void)dPdy;
# 756
::exit(___);}
#if 0
# 752
{ 
# 756
} 
#endif
# 758 "/usr/local/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 759
texCubemapLayeredGrad(cudaTextureObject_t texObject, float x, float y, float z, int layer, float4 dPdx, float4 dPdy) 
# 760
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)dPdx;(void)dPdy;
# 766
::exit(___);}
#if 0
# 760
{ 
# 766
} 
#endif
# 59 "/usr/local/cuda/include/surface_indirect_functions.h"
template< class T> struct __nv_isurf_trait { }; 
# 60
template<> struct __nv_isurf_trait< char>  { typedef void type; }; 
# 61
template<> struct __nv_isurf_trait< signed char>  { typedef void type; }; 
# 62
template<> struct __nv_isurf_trait< char1>  { typedef void type; }; 
# 63
template<> struct __nv_isurf_trait< unsigned char>  { typedef void type; }; 
# 64
template<> struct __nv_isurf_trait< uchar1>  { typedef void type; }; 
# 65
template<> struct __nv_isurf_trait< short>  { typedef void type; }; 
# 66
template<> struct __nv_isurf_trait< short1>  { typedef void type; }; 
# 67
template<> struct __nv_isurf_trait< unsigned short>  { typedef void type; }; 
# 68
template<> struct __nv_isurf_trait< ushort1>  { typedef void type; }; 
# 69
template<> struct __nv_isurf_trait< int>  { typedef void type; }; 
# 70
template<> struct __nv_isurf_trait< int1>  { typedef void type; }; 
# 71
template<> struct __nv_isurf_trait< unsigned>  { typedef void type; }; 
# 72
template<> struct __nv_isurf_trait< uint1>  { typedef void type; }; 
# 73
template<> struct __nv_isurf_trait< long long>  { typedef void type; }; 
# 74
template<> struct __nv_isurf_trait< longlong1>  { typedef void type; }; 
# 75
template<> struct __nv_isurf_trait< unsigned long long>  { typedef void type; }; 
# 76
template<> struct __nv_isurf_trait< ulonglong1>  { typedef void type; }; 
# 77
template<> struct __nv_isurf_trait< float>  { typedef void type; }; 
# 78
template<> struct __nv_isurf_trait< float1>  { typedef void type; }; 
# 80
template<> struct __nv_isurf_trait< char2>  { typedef void type; }; 
# 81
template<> struct __nv_isurf_trait< uchar2>  { typedef void type; }; 
# 82
template<> struct __nv_isurf_trait< short2>  { typedef void type; }; 
# 83
template<> struct __nv_isurf_trait< ushort2>  { typedef void type; }; 
# 84
template<> struct __nv_isurf_trait< int2>  { typedef void type; }; 
# 85
template<> struct __nv_isurf_trait< uint2>  { typedef void type; }; 
# 86
template<> struct __nv_isurf_trait< longlong2>  { typedef void type; }; 
# 87
template<> struct __nv_isurf_trait< ulonglong2>  { typedef void type; }; 
# 88
template<> struct __nv_isurf_trait< float2>  { typedef void type; }; 
# 90
template<> struct __nv_isurf_trait< char4>  { typedef void type; }; 
# 91
template<> struct __nv_isurf_trait< uchar4>  { typedef void type; }; 
# 92
template<> struct __nv_isurf_trait< short4>  { typedef void type; }; 
# 93
template<> struct __nv_isurf_trait< ushort4>  { typedef void type; }; 
# 94
template<> struct __nv_isurf_trait< int4>  { typedef void type; }; 
# 95
template<> struct __nv_isurf_trait< uint4>  { typedef void type; }; 
# 96
template<> struct __nv_isurf_trait< float4>  { typedef void type; }; 
# 99
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 100
surf1Dread(T *ptr, cudaSurfaceObject_t obj, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 101
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)mode;
# 105
::exit(___);}
#if 0
# 101
{ 
# 105
} 
#endif
# 107 "/usr/local/cuda/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 108
surf1Dread(cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 109
{int volatile ___ = 1;(void)surfObject;(void)x;(void)boundaryMode;
# 115
::exit(___);}
#if 0
# 109
{ 
# 115
} 
#endif
# 117 "/usr/local/cuda/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 118
surf2Dread(T *ptr, cudaSurfaceObject_t obj, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 119
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)mode;
# 123
::exit(___);}
#if 0
# 119
{ 
# 123
} 
#endif
# 125 "/usr/local/cuda/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 126
surf2Dread(cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 127
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 133
::exit(___);}
#if 0
# 127
{ 
# 133
} 
#endif
# 136 "/usr/local/cuda/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 137
surf3Dread(T *ptr, cudaSurfaceObject_t obj, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 138
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)mode;
# 142
::exit(___);}
#if 0
# 138
{ 
# 142
} 
#endif
# 144 "/usr/local/cuda/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 145
surf3Dread(cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 146
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 152
::exit(___);}
#if 0
# 146
{ 
# 152
} 
#endif
# 154 "/usr/local/cuda/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 155
surf1DLayeredread(T *ptr, cudaSurfaceObject_t obj, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 156
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)layer;(void)mode;
# 160
::exit(___);}
#if 0
# 156
{ 
# 160
} 
#endif
# 162 "/usr/local/cuda/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 163
surf1DLayeredread(cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 164
{int volatile ___ = 1;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 170
::exit(___);}
#if 0
# 164
{ 
# 170
} 
#endif
# 172 "/usr/local/cuda/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 173
surf2DLayeredread(T *ptr, cudaSurfaceObject_t obj, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 174
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;(void)mode;
# 178
::exit(___);}
#if 0
# 174
{ 
# 178
} 
#endif
# 180 "/usr/local/cuda/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 181
surf2DLayeredread(cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 182
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 188
::exit(___);}
#if 0
# 182
{ 
# 188
} 
#endif
# 190 "/usr/local/cuda/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 191
surfCubemapread(T *ptr, cudaSurfaceObject_t obj, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 192
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)face;(void)mode;
# 196
::exit(___);}
#if 0
# 192
{ 
# 196
} 
#endif
# 198 "/usr/local/cuda/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 199
surfCubemapread(cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 200
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 206
::exit(___);}
#if 0
# 200
{ 
# 206
} 
#endif
# 208 "/usr/local/cuda/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 209
surfCubemapLayeredread(T *ptr, cudaSurfaceObject_t obj, int x, int y, int layerface, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 210
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layerface;(void)mode;
# 214
::exit(___);}
#if 0
# 210
{ 
# 214
} 
#endif
# 216 "/usr/local/cuda/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 217
surfCubemapLayeredread(cudaSurfaceObject_t surfObject, int x, int y, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 218
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)layerface;(void)boundaryMode;
# 224
::exit(___);}
#if 0
# 218
{ 
# 224
} 
#endif
# 226 "/usr/local/cuda/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 227
surf1Dwrite(T val, cudaSurfaceObject_t obj, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 228
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)mode;
# 232
::exit(___);}
#if 0
# 228
{ 
# 232
} 
#endif
# 234 "/usr/local/cuda/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 235
surf2Dwrite(T val, cudaSurfaceObject_t obj, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 236
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)y;(void)mode;
# 240
::exit(___);}
#if 0
# 236
{ 
# 240
} 
#endif
# 242 "/usr/local/cuda/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 243
surf3Dwrite(T val, cudaSurfaceObject_t obj, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 244
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)y;(void)z;(void)mode;
# 248
::exit(___);}
#if 0
# 244
{ 
# 248
} 
#endif
# 250 "/usr/local/cuda/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 251
surf1DLayeredwrite(T val, cudaSurfaceObject_t obj, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 252
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)layer;(void)mode;
# 256
::exit(___);}
#if 0
# 252
{ 
# 256
} 
#endif
# 258 "/usr/local/cuda/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 259
surf2DLayeredwrite(T val, cudaSurfaceObject_t obj, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 260
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)y;(void)layer;(void)mode;
# 264
::exit(___);}
#if 0
# 260
{ 
# 264
} 
#endif
# 266 "/usr/local/cuda/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 267
surfCubemapwrite(T val, cudaSurfaceObject_t obj, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 268
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)y;(void)face;(void)mode;
# 272
::exit(___);}
#if 0
# 268
{ 
# 272
} 
#endif
# 274 "/usr/local/cuda/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 275
surfCubemapLayeredwrite(T val, cudaSurfaceObject_t obj, int x, int y, int layerface, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 276
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)y;(void)layerface;(void)mode;
# 280
::exit(___);}
#if 0
# 276
{ 
# 280
} 
#endif
# 3287 "/usr/local/cuda/include/crt/device_functions.h"
extern "C" unsigned __cudaPushCallConfiguration(dim3 gridDim, dim3 blockDim, size_t sharedMem = 0, CUstream_st * stream = 0); 
# 68 "/usr/local/cuda/include/device_launch_parameters.h"
extern "C" {
# 71
extern const uint3 __device_builtin_variable_threadIdx; 
# 72
extern const uint3 __device_builtin_variable_blockIdx; 
# 73
extern const dim3 __device_builtin_variable_blockDim; 
# 74
extern const dim3 __device_builtin_variable_gridDim; 
# 75
extern const int __device_builtin_variable_warpSize; 
# 80
}
# 201 "/usr/local/cuda/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 202
cudaLaunchKernel(const T *
# 203
func, dim3 
# 204
gridDim, dim3 
# 205
blockDim, void **
# 206
args, size_t 
# 207
sharedMem = 0, cudaStream_t 
# 208
stream = 0) 
# 210
{ 
# 211
return ::cudaLaunchKernel((const void *)func, gridDim, blockDim, args, sharedMem, stream); 
# 212
} 
# 263 "/usr/local/cuda/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 264
cudaLaunchCooperativeKernel(const T *
# 265
func, dim3 
# 266
gridDim, dim3 
# 267
blockDim, void **
# 268
args, size_t 
# 269
sharedMem = 0, cudaStream_t 
# 270
stream = 0) 
# 272
{ 
# 273
return ::cudaLaunchCooperativeKernel((const void *)func, gridDim, blockDim, args, sharedMem, stream); 
# 274
} 
# 307 "/usr/local/cuda/include/cuda_runtime.h"
static inline cudaError_t cudaEventCreate(cudaEvent_t *
# 308
event, unsigned 
# 309
flags) 
# 311
{ 
# 312
return ::cudaEventCreateWithFlags(event, flags); 
# 313
} 
# 372 "/usr/local/cuda/include/cuda_runtime.h"
static inline cudaError_t cudaMallocHost(void **
# 373
ptr, size_t 
# 374
size, unsigned 
# 375
flags) 
# 377
{ 
# 378
return ::cudaHostAlloc(ptr, size, flags); 
# 379
} 
# 381
template< class T> static inline cudaError_t 
# 382
cudaHostAlloc(T **
# 383
ptr, size_t 
# 384
size, unsigned 
# 385
flags) 
# 387
{ 
# 388
return ::cudaHostAlloc((void **)((void *)ptr), size, flags); 
# 389
} 
# 391
template< class T> static inline cudaError_t 
# 392
cudaHostGetDevicePointer(T **
# 393
pDevice, void *
# 394
pHost, unsigned 
# 395
flags) 
# 397
{ 
# 398
return ::cudaHostGetDevicePointer((void **)((void *)pDevice), pHost, flags); 
# 399
} 
# 501 "/usr/local/cuda/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 502
cudaMallocManaged(T **
# 503
devPtr, size_t 
# 504
size, unsigned 
# 505
flags = 1) 
# 507
{ 
# 508
return ::cudaMallocManaged((void **)((void *)devPtr), size, flags); 
# 509
} 
# 591 "/usr/local/cuda/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 592
cudaStreamAttachMemAsync(cudaStream_t 
# 593
stream, T *
# 594
devPtr, size_t 
# 595
length = 0, unsigned 
# 596
flags = 4) 
# 598
{ 
# 599
return ::cudaStreamAttachMemAsync(stream, (void *)devPtr, length, flags); 
# 600
} 
# 602
template< class T> inline cudaError_t 
# 603
cudaMalloc(T **
# 604
devPtr, size_t 
# 605
size) 
# 607
{ 
# 608
return ::cudaMalloc((void **)((void *)devPtr), size); 
# 609
} 
# 611
template< class T> static inline cudaError_t 
# 612
cudaMallocHost(T **
# 613
ptr, size_t 
# 614
size, unsigned 
# 615
flags = 0) 
# 617
{ 
# 618
return cudaMallocHost((void **)((void *)ptr), size, flags); 
# 619
} 
# 621
template< class T> static inline cudaError_t 
# 622
cudaMallocPitch(T **
# 623
devPtr, size_t *
# 624
pitch, size_t 
# 625
width, size_t 
# 626
height) 
# 628
{ 
# 629
return ::cudaMallocPitch((void **)((void *)devPtr), pitch, width, height); 
# 630
} 
# 641 "/usr/local/cuda/include/cuda_runtime.h"
static inline cudaError_t cudaMallocAsync(void **
# 642
ptr, size_t 
# 643
size, cudaMemPool_t 
# 644
memPool, cudaStream_t 
# 645
stream) 
# 647
{ 
# 648
return ::cudaMallocFromPoolAsync(ptr, size, memPool, stream); 
# 649
} 
# 651
template< class T> static inline cudaError_t 
# 652
cudaMallocAsync(T **
# 653
ptr, size_t 
# 654
size, cudaMemPool_t 
# 655
memPool, cudaStream_t 
# 656
stream) 
# 658
{ 
# 659
return ::cudaMallocFromPoolAsync((void **)((void *)ptr), size, memPool, stream); 
# 660
} 
# 662
template< class T> static inline cudaError_t 
# 663
cudaMallocAsync(T **
# 664
ptr, size_t 
# 665
size, cudaStream_t 
# 666
stream) 
# 668
{ 
# 669
return ::cudaMallocAsync((void **)((void *)ptr), size, stream); 
# 670
} 
# 672
template< class T> static inline cudaError_t 
# 673
cudaMallocFromPoolAsync(T **
# 674
ptr, size_t 
# 675
size, cudaMemPool_t 
# 676
memPool, cudaStream_t 
# 677
stream) 
# 679
{ 
# 680
return ::cudaMallocFromPoolAsync((void **)((void *)ptr), size, memPool, stream); 
# 681
} 
# 720 "/usr/local/cuda/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 721
cudaMemcpyToSymbol(const T &
# 722
symbol, const void *
# 723
src, size_t 
# 724
count, size_t 
# 725
offset = 0, cudaMemcpyKind 
# 726
kind = cudaMemcpyHostToDevice) 
# 728
{ 
# 729
return ::cudaMemcpyToSymbol((const void *)(&symbol), src, count, offset, kind); 
# 730
} 
# 774 "/usr/local/cuda/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 775
cudaMemcpyToSymbolAsync(const T &
# 776
symbol, const void *
# 777
src, size_t 
# 778
count, size_t 
# 779
offset = 0, cudaMemcpyKind 
# 780
kind = cudaMemcpyHostToDevice, cudaStream_t 
# 781
stream = 0) 
# 783
{ 
# 784
return ::cudaMemcpyToSymbolAsync((const void *)(&symbol), src, count, offset, kind, stream); 
# 785
} 
# 822 "/usr/local/cuda/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 823
cudaMemcpyFromSymbol(void *
# 824
dst, const T &
# 825
symbol, size_t 
# 826
count, size_t 
# 827
offset = 0, cudaMemcpyKind 
# 828
kind = cudaMemcpyDeviceToHost) 
# 830
{ 
# 831
return ::cudaMemcpyFromSymbol(dst, (const void *)(&symbol), count, offset, kind); 
# 832
} 
# 876 "/usr/local/cuda/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 877
cudaMemcpyFromSymbolAsync(void *
# 878
dst, const T &
# 879
symbol, size_t 
# 880
count, size_t 
# 881
offset = 0, cudaMemcpyKind 
# 882
kind = cudaMemcpyDeviceToHost, cudaStream_t 
# 883
stream = 0) 
# 885
{ 
# 886
return ::cudaMemcpyFromSymbolAsync(dst, (const void *)(&symbol), count, offset, kind, stream); 
# 887
} 
# 945 "/usr/local/cuda/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 946
cudaGraphAddMemcpyNodeToSymbol(cudaGraphNode_t *
# 947
pGraphNode, cudaGraph_t 
# 948
graph, const cudaGraphNode_t *
# 949
pDependencies, size_t 
# 950
numDependencies, const T &
# 951
symbol, const void *
# 952
src, size_t 
# 953
count, size_t 
# 954
offset, cudaMemcpyKind 
# 955
kind) 
# 956
{ 
# 957
return ::cudaGraphAddMemcpyNodeToSymbol(pGraphNode, graph, pDependencies, numDependencies, (const void *)(&symbol), src, count, offset, kind); 
# 958
} 
# 1016 "/usr/local/cuda/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1017
cudaGraphAddMemcpyNodeFromSymbol(cudaGraphNode_t *
# 1018
pGraphNode, cudaGraph_t 
# 1019
graph, const cudaGraphNode_t *
# 1020
pDependencies, size_t 
# 1021
numDependencies, void *
# 1022
dst, const T &
# 1023
symbol, size_t 
# 1024
count, size_t 
# 1025
offset, cudaMemcpyKind 
# 1026
kind) 
# 1027
{ 
# 1028
return ::cudaGraphAddMemcpyNodeFromSymbol(pGraphNode, graph, pDependencies, numDependencies, dst, (const void *)(&symbol), count, offset, kind); 
# 1029
} 
# 1067 "/usr/local/cuda/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1068
cudaGraphMemcpyNodeSetParamsToSymbol(cudaGraphNode_t 
# 1069
node, const T &
# 1070
symbol, const void *
# 1071
src, size_t 
# 1072
count, size_t 
# 1073
offset, cudaMemcpyKind 
# 1074
kind) 
# 1075
{ 
# 1076
return ::cudaGraphMemcpyNodeSetParamsToSymbol(node, (const void *)(&symbol), src, count, offset, kind); 
# 1077
} 
# 1115 "/usr/local/cuda/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1116
cudaGraphMemcpyNodeSetParamsFromSymbol(cudaGraphNode_t 
# 1117
node, void *
# 1118
dst, const T &
# 1119
symbol, size_t 
# 1120
count, size_t 
# 1121
offset, cudaMemcpyKind 
# 1122
kind) 
# 1123
{ 
# 1124
return ::cudaGraphMemcpyNodeSetParamsFromSymbol(node, dst, (const void *)(&symbol), count, offset, kind); 
# 1125
} 
# 1173 "/usr/local/cuda/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1174
cudaGraphExecMemcpyNodeSetParamsToSymbol(cudaGraphExec_t 
# 1175
hGraphExec, cudaGraphNode_t 
# 1176
node, const T &
# 1177
symbol, const void *
# 1178
src, size_t 
# 1179
count, size_t 
# 1180
offset, cudaMemcpyKind 
# 1181
kind) 
# 1182
{ 
# 1183
return ::cudaGraphExecMemcpyNodeSetParamsToSymbol(hGraphExec, node, (const void *)(&symbol), src, count, offset, kind); 
# 1184
} 
# 1232 "/usr/local/cuda/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1233
cudaGraphExecMemcpyNodeSetParamsFromSymbol(cudaGraphExec_t 
# 1234
hGraphExec, cudaGraphNode_t 
# 1235
node, void *
# 1236
dst, const T &
# 1237
symbol, size_t 
# 1238
count, size_t 
# 1239
offset, cudaMemcpyKind 
# 1240
kind) 
# 1241
{ 
# 1242
return ::cudaGraphExecMemcpyNodeSetParamsFromSymbol(hGraphExec, node, dst, (const void *)(&symbol), count, offset, kind); 
# 1243
} 
# 1271 "/usr/local/cuda/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1272
cudaUserObjectCreate(cudaUserObject_t *
# 1273
object_out, T *
# 1274
objectToWrap, unsigned 
# 1275
initialRefcount, unsigned 
# 1276
flags) 
# 1277
{ 
# 1278
return ::cudaUserObjectCreate(object_out, objectToWrap, [](void *
# 1281
vpObj) { delete (reinterpret_cast< T *>(vpObj)); } , initialRefcount, flags); 
# 1284
} 
# 1286
template< class T> static inline cudaError_t 
# 1287
cudaUserObjectCreate(cudaUserObject_t *
# 1288
object_out, T *
# 1289
objectToWrap, unsigned 
# 1290
initialRefcount, cudaUserObjectFlags 
# 1291
flags) 
# 1292
{ 
# 1293
return cudaUserObjectCreate(object_out, objectToWrap, initialRefcount, (unsigned)flags); 
# 1294
} 
# 1321 "/usr/local/cuda/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1322
cudaGetSymbolAddress(void **
# 1323
devPtr, const T &
# 1324
symbol) 
# 1326
{ 
# 1327
return ::cudaGetSymbolAddress(devPtr, (const void *)(&symbol)); 
# 1328
} 
# 1353 "/usr/local/cuda/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1354
cudaGetSymbolSize(size_t *
# 1355
size, const T &
# 1356
symbol) 
# 1358
{ 
# 1359
return ::cudaGetSymbolSize(size, (const void *)(&symbol)); 
# 1360
} 
# 1397 "/usr/local/cuda/include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> 
# 1398
__attribute((deprecated)) static inline cudaError_t cudaBindTexture(size_t *
# 1399
offset, const texture< T, dim, readMode>  &
# 1400
tex, const void *
# 1401
devPtr, const cudaChannelFormatDesc &
# 1402
desc, size_t 
# 1403
size = ((2147483647) * 2U) + 1U) 
# 1405 "/usr/local/cuda/include/cuda_runtime.h"
{ 
# 1406
return ::cudaBindTexture(offset, &tex, devPtr, &desc, size); 
# 1407
} 
# 1443 "/usr/local/cuda/include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> 
# 1444
__attribute((deprecated)) static inline cudaError_t cudaBindTexture(size_t *
# 1445
offset, const texture< T, dim, readMode>  &
# 1446
tex, const void *
# 1447
devPtr, size_t 
# 1448
size = ((2147483647) * 2U) + 1U) 
# 1450 "/usr/local/cuda/include/cuda_runtime.h"
{ 
# 1451
return cudaBindTexture(offset, tex, devPtr, (tex.channelDesc), size); 
# 1452
} 
# 1500 "/usr/local/cuda/include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> 
# 1501
__attribute((deprecated)) static inline cudaError_t cudaBindTexture2D(size_t *
# 1502
offset, const texture< T, dim, readMode>  &
# 1503
tex, const void *
# 1504
devPtr, const cudaChannelFormatDesc &
# 1505
desc, size_t 
# 1506
width, size_t 
# 1507
height, size_t 
# 1508
pitch) 
# 1510
{ 
# 1511
return ::cudaBindTexture2D(offset, &tex, devPtr, &desc, width, height, pitch); 
# 1512
} 
# 1559 "/usr/local/cuda/include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> 
# 1560
__attribute((deprecated)) static inline cudaError_t cudaBindTexture2D(size_t *
# 1561
offset, const texture< T, dim, readMode>  &
# 1562
tex, const void *
# 1563
devPtr, size_t 
# 1564
width, size_t 
# 1565
height, size_t 
# 1566
pitch) 
# 1568
{ 
# 1569
return ::cudaBindTexture2D(offset, &tex, devPtr, &(tex.channelDesc), width, height, pitch); 
# 1570
} 
# 1602 "/usr/local/cuda/include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> 
# 1603
__attribute((deprecated)) static inline cudaError_t cudaBindTextureToArray(const texture< T, dim, readMode>  &
# 1604
tex, cudaArray_const_t 
# 1605
array, const cudaChannelFormatDesc &
# 1606
desc) 
# 1608
{ 
# 1609
return ::cudaBindTextureToArray(&tex, array, &desc); 
# 1610
} 
# 1641 "/usr/local/cuda/include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> 
# 1642
__attribute((deprecated)) static inline cudaError_t cudaBindTextureToArray(const texture< T, dim, readMode>  &
# 1643
tex, cudaArray_const_t 
# 1644
array) 
# 1646
{ 
# 1647
cudaChannelFormatDesc desc; 
# 1648
cudaError_t err = ::cudaGetChannelDesc(&desc, array); 
# 1650
return (err == (cudaSuccess)) ? cudaBindTextureToArray(tex, array, desc) : err; 
# 1651
} 
# 1683 "/usr/local/cuda/include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> 
# 1684
__attribute((deprecated)) static inline cudaError_t cudaBindTextureToMipmappedArray(const texture< T, dim, readMode>  &
# 1685
tex, cudaMipmappedArray_const_t 
# 1686
mipmappedArray, const cudaChannelFormatDesc &
# 1687
desc) 
# 1689
{ 
# 1690
return ::cudaBindTextureToMipmappedArray(&tex, mipmappedArray, &desc); 
# 1691
} 
# 1722 "/usr/local/cuda/include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> 
# 1723
__attribute((deprecated)) static inline cudaError_t cudaBindTextureToMipmappedArray(const texture< T, dim, readMode>  &
# 1724
tex, cudaMipmappedArray_const_t 
# 1725
mipmappedArray) 
# 1727
{ 
# 1728
cudaChannelFormatDesc desc; 
# 1729
cudaArray_t levelArray; 
# 1730
cudaError_t err = ::cudaGetMipmappedArrayLevel(&levelArray, mipmappedArray, 0); 
# 1732
if (err != (cudaSuccess)) { 
# 1733
return err; 
# 1734
}  
# 1735
err = ::cudaGetChannelDesc(&desc, levelArray); 
# 1737
return (err == (cudaSuccess)) ? cudaBindTextureToMipmappedArray(tex, mipmappedArray, desc) : err; 
# 1738
} 
# 1765 "/usr/local/cuda/include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> 
# 1766
__attribute((deprecated)) static inline cudaError_t cudaUnbindTexture(const texture< T, dim, readMode>  &
# 1767
tex) 
# 1769
{ 
# 1770
return ::cudaUnbindTexture(&tex); 
# 1771
} 
# 1801 "/usr/local/cuda/include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> 
# 1802
__attribute((deprecated)) static inline cudaError_t cudaGetTextureAlignmentOffset(size_t *
# 1803
offset, const texture< T, dim, readMode>  &
# 1804
tex) 
# 1806
{ 
# 1807
return ::cudaGetTextureAlignmentOffset(offset, &tex); 
# 1808
} 
# 1853 "/usr/local/cuda/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1854
cudaFuncSetCacheConfig(T *
# 1855
func, cudaFuncCache 
# 1856
cacheConfig) 
# 1858
{ 
# 1859
return ::cudaFuncSetCacheConfig((const void *)func, cacheConfig); 
# 1860
} 
# 1862
template< class T> static inline cudaError_t 
# 1863
cudaFuncSetSharedMemConfig(T *
# 1864
func, cudaSharedMemConfig 
# 1865
config) 
# 1867
{ 
# 1868
return ::cudaFuncSetSharedMemConfig((const void *)func, config); 
# 1869
} 
# 1901 "/usr/local/cuda/include/cuda_runtime.h"
template< class T> inline cudaError_t 
# 1902
cudaOccupancyMaxActiveBlocksPerMultiprocessor(int *
# 1903
numBlocks, T 
# 1904
func, int 
# 1905
blockSize, size_t 
# 1906
dynamicSMemSize) 
# 1907
{ 
# 1908
return ::cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, (const void *)func, blockSize, dynamicSMemSize, 0); 
# 1909
} 
# 1953 "/usr/local/cuda/include/cuda_runtime.h"
template< class T> inline cudaError_t 
# 1954
cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int *
# 1955
numBlocks, T 
# 1956
func, int 
# 1957
blockSize, size_t 
# 1958
dynamicSMemSize, unsigned 
# 1959
flags) 
# 1960
{ 
# 1961
return ::cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, (const void *)func, blockSize, dynamicSMemSize, flags); 
# 1962
} 
# 1967
class __cudaOccupancyB2DHelper { 
# 1968
size_t n; 
# 1970
public: __cudaOccupancyB2DHelper(size_t n_) : n(n_) { } 
# 1971
size_t operator()(int) 
# 1972
{ 
# 1973
return n; 
# 1974
} 
# 1975
}; 
# 2023 "/usr/local/cuda/include/cuda_runtime.h"
template< class UnaryFunction, class T> static inline cudaError_t 
# 2024
cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(int *
# 2025
minGridSize, int *
# 2026
blockSize, T 
# 2027
func, UnaryFunction 
# 2028
blockSizeToDynamicSMemSize, int 
# 2029
blockSizeLimit = 0, unsigned 
# 2030
flags = 0) 
# 2031
{ 
# 2032
cudaError_t status; 
# 2035
int device; 
# 2036
cudaFuncAttributes attr; 
# 2039
int maxThreadsPerMultiProcessor; 
# 2040
int warpSize; 
# 2041
int devMaxThreadsPerBlock; 
# 2042
int multiProcessorCount; 
# 2043
int funcMaxThreadsPerBlock; 
# 2044
int occupancyLimit; 
# 2045
int granularity; 
# 2048
int maxBlockSize = 0; 
# 2049
int numBlocks = 0; 
# 2050
int maxOccupancy = 0; 
# 2053
int blockSizeToTryAligned; 
# 2054
int blockSizeToTry; 
# 2055
int blockSizeLimitAligned; 
# 2056
int occupancyInBlocks; 
# 2057
int occupancyInThreads; 
# 2058
size_t dynamicSMemSize; 
# 2064
if (((!minGridSize) || (!blockSize)) || (!func)) { 
# 2065
return cudaErrorInvalidValue; 
# 2066
}  
# 2072
status = ::cudaGetDevice(&device); 
# 2073
if (status != (cudaSuccess)) { 
# 2074
return status; 
# 2075
}  
# 2077
status = cudaDeviceGetAttribute(&maxThreadsPerMultiProcessor, cudaDevAttrMaxThreadsPerMultiProcessor, device); 
# 2081
if (status != (cudaSuccess)) { 
# 2082
return status; 
# 2083
}  
# 2085
status = cudaDeviceGetAttribute(&warpSize, cudaDevAttrWarpSize, device); 
# 2089
if (status != (cudaSuccess)) { 
# 2090
return status; 
# 2091
}  
# 2093
status = cudaDeviceGetAttribute(&devMaxThreadsPerBlock, cudaDevAttrMaxThreadsPerBlock, device); 
# 2097
if (status != (cudaSuccess)) { 
# 2098
return status; 
# 2099
}  
# 2101
status = cudaDeviceGetAttribute(&multiProcessorCount, cudaDevAttrMultiProcessorCount, device); 
# 2105
if (status != (cudaSuccess)) { 
# 2106
return status; 
# 2107
}  
# 2109
status = cudaFuncGetAttributes(&attr, func); 
# 2110
if (status != (cudaSuccess)) { 
# 2111
return status; 
# 2112
}  
# 2114
funcMaxThreadsPerBlock = (attr.maxThreadsPerBlock); 
# 2120
occupancyLimit = maxThreadsPerMultiProcessor; 
# 2121
granularity = warpSize; 
# 2123
if (blockSizeLimit == 0) { 
# 2124
blockSizeLimit = devMaxThreadsPerBlock; 
# 2125
}  
# 2127
if (devMaxThreadsPerBlock < blockSizeLimit) { 
# 2128
blockSizeLimit = devMaxThreadsPerBlock; 
# 2129
}  
# 2131
if (funcMaxThreadsPerBlock < blockSizeLimit) { 
# 2132
blockSizeLimit = funcMaxThreadsPerBlock; 
# 2133
}  
# 2135
blockSizeLimitAligned = (((blockSizeLimit + (granularity - 1)) / granularity) * granularity); 
# 2137
for (blockSizeToTryAligned = blockSizeLimitAligned; blockSizeToTryAligned > 0; blockSizeToTryAligned -= granularity) { 
# 2141
if (blockSizeLimit < blockSizeToTryAligned) { 
# 2142
blockSizeToTry = blockSizeLimit; 
# 2143
} else { 
# 2144
blockSizeToTry = blockSizeToTryAligned; 
# 2145
}  
# 2147
dynamicSMemSize = blockSizeToDynamicSMemSize(blockSizeToTry); 
# 2149
status = cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(&occupancyInBlocks, func, blockSizeToTry, dynamicSMemSize, flags); 
# 2156
if (status != (cudaSuccess)) { 
# 2157
return status; 
# 2158
}  
# 2160
occupancyInThreads = (blockSizeToTry * occupancyInBlocks); 
# 2162
if (occupancyInThreads > maxOccupancy) { 
# 2163
maxBlockSize = blockSizeToTry; 
# 2164
numBlocks = occupancyInBlocks; 
# 2165
maxOccupancy = occupancyInThreads; 
# 2166
}  
# 2170
if (occupancyLimit == maxOccupancy) { 
# 2171
break; 
# 2172
}  
# 2173
}  
# 2181
(*minGridSize) = (numBlocks * multiProcessorCount); 
# 2182
(*blockSize) = maxBlockSize; 
# 2184
return status; 
# 2185
} 
# 2219 "/usr/local/cuda/include/cuda_runtime.h"
template< class UnaryFunction, class T> static inline cudaError_t 
# 2220
cudaOccupancyMaxPotentialBlockSizeVariableSMem(int *
# 2221
minGridSize, int *
# 2222
blockSize, T 
# 2223
func, UnaryFunction 
# 2224
blockSizeToDynamicSMemSize, int 
# 2225
blockSizeLimit = 0) 
# 2226
{ 
# 2227
return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, blockSizeToDynamicSMemSize, blockSizeLimit, 0); 
# 2228
} 
# 2265 "/usr/local/cuda/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 2266
cudaOccupancyMaxPotentialBlockSize(int *
# 2267
minGridSize, int *
# 2268
blockSize, T 
# 2269
func, size_t 
# 2270
dynamicSMemSize = 0, int 
# 2271
blockSizeLimit = 0) 
# 2272
{ 
# 2273
return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, ((__cudaOccupancyB2DHelper)(dynamicSMemSize)), blockSizeLimit, 0); 
# 2274
} 
# 2303 "/usr/local/cuda/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 2304
cudaOccupancyAvailableDynamicSMemPerBlock(size_t *
# 2305
dynamicSmemSize, T 
# 2306
func, int 
# 2307
numBlocks, int 
# 2308
blockSize) 
# 2309
{ 
# 2310
return ::cudaOccupancyAvailableDynamicSMemPerBlock(dynamicSmemSize, (const void *)func, numBlocks, blockSize); 
# 2311
} 
# 2362 "/usr/local/cuda/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 2363
cudaOccupancyMaxPotentialBlockSizeWithFlags(int *
# 2364
minGridSize, int *
# 2365
blockSize, T 
# 2366
func, size_t 
# 2367
dynamicSMemSize = 0, int 
# 2368
blockSizeLimit = 0, unsigned 
# 2369
flags = 0) 
# 2370
{ 
# 2371
return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, ((__cudaOccupancyB2DHelper)(dynamicSMemSize)), blockSizeLimit, flags); 
# 2372
} 
# 2405 "/usr/local/cuda/include/cuda_runtime.h"
template< class T> inline cudaError_t 
# 2406
cudaFuncGetAttributes(cudaFuncAttributes *
# 2407
attr, T *
# 2408
entry) 
# 2410
{ 
# 2411
return ::cudaFuncGetAttributes(attr, (const void *)entry); 
# 2412
} 
# 2450 "/usr/local/cuda/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 2451
cudaFuncSetAttribute(T *
# 2452
entry, cudaFuncAttribute 
# 2453
attr, int 
# 2454
value) 
# 2456
{ 
# 2457
return ::cudaFuncSetAttribute((const void *)entry, attr, value); 
# 2458
} 
# 2482 "/usr/local/cuda/include/cuda_runtime.h"
template< class T, int dim> 
# 2483
__attribute((deprecated)) static inline cudaError_t cudaBindSurfaceToArray(const surface< T, dim>  &
# 2484
surf, cudaArray_const_t 
# 2485
array, const cudaChannelFormatDesc &
# 2486
desc) 
# 2488
{ 
# 2489
return ::cudaBindSurfaceToArray(&surf, array, &desc); 
# 2490
} 
# 2513 "/usr/local/cuda/include/cuda_runtime.h"
template< class T, int dim> 
# 2514
__attribute((deprecated)) static inline cudaError_t cudaBindSurfaceToArray(const surface< T, dim>  &
# 2515
surf, cudaArray_const_t 
# 2516
array) 
# 2518
{ 
# 2519
cudaChannelFormatDesc desc; 
# 2520
cudaError_t err = ::cudaGetChannelDesc(&desc, array); 
# 2522
return (err == (cudaSuccess)) ? cudaBindSurfaceToArray(surf, array, desc) : err; 
# 2523
} 
# 2534 "/usr/local/cuda/include/cuda_runtime.h"
#pragma GCC diagnostic pop
# 24 "/usr/include/aarch64-linux-gnu/bits/stdint-uintn.h" 3
typedef __uint8_t uint8_t; 
# 25
typedef __uint16_t uint16_t; 
# 26
typedef __uint32_t uint32_t; 
# 27
typedef __uint64_t uint64_t; 
# 43 "/usr/include/stdint.h" 3
typedef __int_least8_t int_least8_t; 
# 44
typedef __int_least16_t int_least16_t; 
# 45
typedef __int_least32_t int_least32_t; 
# 46
typedef __int_least64_t int_least64_t; 
# 49
typedef __uint_least8_t uint_least8_t; 
# 50
typedef __uint_least16_t uint_least16_t; 
# 51
typedef __uint_least32_t uint_least32_t; 
# 52
typedef __uint_least64_t uint_least64_t; 
# 58
typedef signed char int_fast8_t; 
# 60
typedef long int_fast16_t; 
# 61
typedef long int_fast32_t; 
# 62
typedef long int_fast64_t; 
# 71 "/usr/include/stdint.h" 3
typedef unsigned char uint_fast8_t; 
# 73
typedef unsigned long uint_fast16_t; 
# 74
typedef unsigned long uint_fast32_t; 
# 75
typedef unsigned long uint_fast64_t; 
# 87 "/usr/include/stdint.h" 3
typedef long intptr_t; 
# 90
typedef unsigned long uintptr_t; 
# 101 "/usr/include/stdint.h" 3
typedef __intmax_t intmax_t; 
# 102
typedef __uintmax_t uintmax_t; 
# 29 "/usr/include/stdio.h" 3
extern "C" {
# 40 "/usr/lib/gcc/aarch64-linux-gnu/9/include/stdarg.h" 3
typedef __builtin_va_list __gnuc_va_list; 
# 21 "/usr/include/aarch64-linux-gnu/bits/types/__mbstate_t.h" 3
typedef 
# 14
struct { 
# 15
int __count; 
# 17
union { 
# 18
unsigned __wch; 
# 19
char __wchb[4]; 
# 20
} __value; 
# 21
} __mbstate_t; 
# 14 "/usr/include/aarch64-linux-gnu/bits/types/__fpos_t.h" 3
typedef 
# 10
struct _G_fpos_t { 
# 12
__off_t __pos; 
# 13
__mbstate_t __state; 
# 14
} __fpos_t; 
# 14 "/usr/include/aarch64-linux-gnu/bits/types/__fpos64_t.h" 3
typedef 
# 10
struct _G_fpos64_t { 
# 12
__off64_t __pos; 
# 13
__mbstate_t __state; 
# 14
} __fpos64_t; 
# 4 "/usr/include/aarch64-linux-gnu/bits/types/__FILE.h" 3
struct _IO_FILE; 
# 5
typedef _IO_FILE __FILE; 
# 4 "/usr/include/aarch64-linux-gnu/bits/types/FILE.h" 3
struct _IO_FILE; 
# 7
typedef _IO_FILE FILE; 
# 35 "/usr/include/aarch64-linux-gnu/bits/types/struct_FILE.h" 3
struct _IO_FILE; 
# 36
struct _IO_marker; 
# 37
struct _IO_codecvt; 
# 38
struct _IO_wide_data; 
# 43
typedef void _IO_lock_t; 
# 49
struct _IO_FILE { 
# 51
int _flags; 
# 54
char *_IO_read_ptr; 
# 55
char *_IO_read_end; 
# 56
char *_IO_read_base; 
# 57
char *_IO_write_base; 
# 58
char *_IO_write_ptr; 
# 59
char *_IO_write_end; 
# 60
char *_IO_buf_base; 
# 61
char *_IO_buf_end; 
# 64
char *_IO_save_base; 
# 65
char *_IO_backup_base; 
# 66
char *_IO_save_end; 
# 68
_IO_marker *_markers; 
# 70
_IO_FILE *_chain; 
# 72
int _fileno; 
# 73
int _flags2; 
# 74
__off_t _old_offset; 
# 77
unsigned short _cur_column; 
# 78
signed char _vtable_offset; 
# 79
char _shortbuf[1]; 
# 81
_IO_lock_t *_lock; 
# 89
__off64_t _offset; 
# 91
_IO_codecvt *_codecvt; 
# 92
_IO_wide_data *_wide_data; 
# 93
_IO_FILE *_freeres_list; 
# 94
void *_freeres_buf; 
# 95
size_t __pad5; 
# 96
int _mode; 
# 98
char _unused2[(((15) * sizeof(int)) - ((4) * sizeof(void *))) - sizeof(size_t)]; 
# 99
}; 
# 27 "/usr/include/aarch64-linux-gnu/bits/types/cookie_io_functions_t.h" 3
typedef __ssize_t cookie_read_function_t(void * __cookie, char * __buf, size_t __nbytes); 
# 36
typedef __ssize_t cookie_write_function_t(void * __cookie, const char * __buf, size_t __nbytes); 
# 45
typedef int cookie_seek_function_t(void * __cookie, __off64_t * __pos, int __w); 
# 48
typedef int cookie_close_function_t(void * __cookie); 
# 61
typedef 
# 55
struct _IO_cookie_io_functions_t { 
# 57
cookie_read_function_t *read; 
# 58
cookie_write_function_t *write; 
# 59
cookie_seek_function_t *seek; 
# 60
cookie_close_function_t *close; 
# 61
} cookie_io_functions_t; 
# 52 "/usr/include/stdio.h" 3
typedef __gnuc_va_list va_list; 
# 84 "/usr/include/stdio.h" 3
typedef __fpos_t fpos_t; 
# 89
typedef __fpos64_t fpos64_t; 
# 137 "/usr/include/stdio.h" 3
extern FILE *stdin; 
# 138
extern FILE *stdout; 
# 139
extern FILE *stderr; 
# 146
extern int remove(const char * __filename) throw(); 
# 148
extern int rename(const char * __old, const char * __new) throw(); 
# 152
extern int renameat(int __oldfd, const char * __old, int __newfd, const char * __new) throw(); 
# 164 "/usr/include/stdio.h" 3
extern int renameat2(int __oldfd, const char * __old, int __newfd, const char * __new, unsigned __flags) throw(); 
# 173
extern FILE *tmpfile() __attribute((__warn_unused_result__)); 
# 183 "/usr/include/stdio.h" 3
extern FILE *tmpfile64() __attribute((__warn_unused_result__)); 
# 187
extern char *tmpnam(char * __s) throw() __attribute((__warn_unused_result__)); 
# 192
extern char *tmpnam_r(char * __s) throw() __attribute((__warn_unused_result__)); 
# 204 "/usr/include/stdio.h" 3
extern char *tempnam(const char * __dir, const char * __pfx) throw()
# 205
 __attribute((__malloc__)) __attribute((__warn_unused_result__)); 
# 213
extern int fclose(FILE * __stream); 
# 218
extern int fflush(FILE * __stream); 
# 227 "/usr/include/stdio.h" 3
extern int fflush_unlocked(FILE * __stream); 
# 237 "/usr/include/stdio.h" 3
extern int fcloseall(); 
# 246 "/usr/include/stdio.h" 3
extern FILE *fopen(const char *__restrict__ __filename, const char *__restrict__ __modes)
# 247
 __attribute((__warn_unused_result__)); 
# 252
extern FILE *freopen(const char *__restrict__ __filename, const char *__restrict__ __modes, FILE *__restrict__ __stream)
# 254
 __attribute((__warn_unused_result__)); 
# 270 "/usr/include/stdio.h" 3
extern FILE *fopen64(const char *__restrict__ __filename, const char *__restrict__ __modes)
# 271
 __attribute((__warn_unused_result__)); 
# 272
extern FILE *freopen64(const char *__restrict__ __filename, const char *__restrict__ __modes, FILE *__restrict__ __stream)
# 274
 __attribute((__warn_unused_result__)); 
# 279
extern FILE *fdopen(int __fd, const char * __modes) throw() __attribute((__warn_unused_result__)); 
# 285
extern FILE *fopencookie(void *__restrict__ __magic_cookie, const char *__restrict__ __modes, cookie_io_functions_t __io_funcs) throw()
# 287
 __attribute((__warn_unused_result__)); 
# 292
extern FILE *fmemopen(void * __s, size_t __len, const char * __modes) throw()
# 293
 __attribute((__warn_unused_result__)); 
# 298
extern FILE *open_memstream(char ** __bufloc, size_t * __sizeloc) throw() __attribute((__warn_unused_result__)); 
# 304
extern void setbuf(FILE *__restrict__ __stream, char *__restrict__ __buf) throw(); 
# 308
extern int setvbuf(FILE *__restrict__ __stream, char *__restrict__ __buf, int __modes, size_t __n) throw(); 
# 314
extern void setbuffer(FILE *__restrict__ __stream, char *__restrict__ __buf, size_t __size) throw(); 
# 318
extern void setlinebuf(FILE * __stream) throw(); 
# 326
extern __attribute((gnu_inline)) inline int fprintf(FILE *__restrict__ __stream, const char *__restrict__ __format, ...); 
# 332
extern __attribute((gnu_inline)) inline int printf(const char *__restrict__ __format, ...); 
# 334
extern __attribute((gnu_inline)) inline int sprintf(char *__restrict__ __s, const char *__restrict__ __format, ...) throw(); 
# 341
extern __attribute((gnu_inline)) inline int vfprintf(FILE *__restrict__ __s, const char *__restrict__ __format, __gnuc_va_list __arg); 
# 347
extern __attribute((gnu_inline)) inline int vprintf(const char *__restrict__ __format, __gnuc_va_list __arg); 
# 349
extern __attribute((gnu_inline)) inline int vsprintf(char *__restrict__ __s, const char *__restrict__ __format, __gnuc_va_list __arg) throw(); 
# 354
extern __attribute((gnu_inline)) inline int snprintf(char *__restrict__ __s, size_t __maxlen, const char *__restrict__ __format, ...) throw()
# 356
 __attribute((__format__(__printf__, 3, 4))); 
# 358
extern __attribute((gnu_inline)) inline int vsnprintf(char *__restrict__ __s, size_t __maxlen, const char *__restrict__ __format, __gnuc_va_list __arg) throw()
# 360
 __attribute((__format__(__printf__, 3, 0))); 
# 366
extern __attribute((gnu_inline)) inline int vasprintf(char **__restrict__ __ptr, const char *__restrict__ __f, __gnuc_va_list __arg) throw()
# 368
 __attribute((__format__(__printf__, 2, 0))) __attribute((__warn_unused_result__)); 
# 369
extern __attribute((gnu_inline)) inline int __asprintf(char **__restrict__ __ptr, const char *__restrict__ __fmt, ...) throw()
# 371
 __attribute((__format__(__printf__, 2, 3))) __attribute((__warn_unused_result__)); 
# 372
extern __attribute((gnu_inline)) inline int asprintf(char **__restrict__ __ptr, const char *__restrict__ __fmt, ...) throw()
# 374
 __attribute((__format__(__printf__, 2, 3))) __attribute((__warn_unused_result__)); 
# 379
extern __attribute((gnu_inline)) inline int vdprintf(int __fd, const char *__restrict__ __fmt, __gnuc_va_list __arg)
# 381
 __attribute((__format__(__printf__, 2, 0))); 
# 382
extern __attribute((gnu_inline)) inline int dprintf(int __fd, const char *__restrict__ __fmt, ...)
# 383
 __attribute((__format__(__printf__, 2, 3))); 
# 391
extern int fscanf(FILE *__restrict__ __stream, const char *__restrict__ __format, ...) __asm__("__isoc99_fscanf")
# 392
 __attribute((__warn_unused_result__)); 
# 397
extern int scanf(const char *__restrict__ __format, ...) __asm__("__isoc99_scanf") __attribute((__warn_unused_result__)); 
# 399
extern int sscanf(const char *__restrict__ __s, const char *__restrict__ __format, ...) throw() __asm__("__isoc99_sscanf"); 
# 407
extern int fscanf(FILE *__restrict__ __stream, const char *__restrict__ __format, ...) __asm__("__isoc99_fscanf")
# 409
 __attribute((__warn_unused_result__)); 
# 410
extern int scanf(const char *__restrict__ __format, ...) __asm__("__isoc99_scanf")
# 411
 __attribute((__warn_unused_result__)); 
# 412
extern int sscanf(const char *__restrict__ __s, const char *__restrict__ __format, ...) throw() __asm__("__isoc99_sscanf"); 
# 432 "/usr/include/stdio.h" 3
extern int vfscanf(FILE *__restrict__ __s, const char *__restrict__ __format, __gnuc_va_list __arg) __asm__("__isoc99_vfscanf")
# 434
 __attribute((__format__(__scanf__, 2, 0))) __attribute((__warn_unused_result__)); 
# 440
extern int vscanf(const char *__restrict__ __format, __gnuc_va_list __arg) __asm__("__isoc99_vscanf")
# 441
 __attribute((__format__(__scanf__, 1, 0))) __attribute((__warn_unused_result__)); 
# 444
extern int vsscanf(const char *__restrict__ __s, const char *__restrict__ __format, __gnuc_va_list __arg) throw() __asm__("__isoc99_vsscanf")
# 446
 __attribute((__format__(__scanf__, 2, 0))); 
# 451
extern int vfscanf(FILE *__restrict__ __s, const char *__restrict__ __format, __gnuc_va_list __arg) __asm__("__isoc99_vfscanf")
# 455
 __attribute((__format__(__scanf__, 2, 0))) __attribute((__warn_unused_result__)); 
# 456
extern int vscanf(const char *__restrict__ __format, __gnuc_va_list __arg) __asm__("__isoc99_vscanf")
# 458
 __attribute((__format__(__scanf__, 1, 0))) __attribute((__warn_unused_result__)); 
# 459
extern int vsscanf(const char *__restrict__ __s, const char *__restrict__ __format, __gnuc_va_list __arg) throw() __asm__("__isoc99_vsscanf")
# 463
 __attribute((__format__(__scanf__, 2, 0))); 
# 485 "/usr/include/stdio.h" 3
extern int fgetc(FILE * __stream); 
# 486
extern int getc(FILE * __stream); 
# 492
extern __attribute((gnu_inline)) inline int getchar(); 
# 499
extern __attribute((gnu_inline)) inline int getc_unlocked(FILE * __stream); 
# 500
extern __attribute((gnu_inline)) inline int getchar_unlocked(); 
# 510 "/usr/include/stdio.h" 3
extern __attribute((gnu_inline)) inline int fgetc_unlocked(FILE * __stream); 
# 521 "/usr/include/stdio.h" 3
extern int fputc(int __c, FILE * __stream); 
# 522
extern int putc(int __c, FILE * __stream); 
# 528
extern __attribute((gnu_inline)) inline int putchar(int __c); 
# 537 "/usr/include/stdio.h" 3
extern __attribute((gnu_inline)) inline int fputc_unlocked(int __c, FILE * __stream); 
# 545
extern __attribute((gnu_inline)) inline int putc_unlocked(int __c, FILE * __stream); 
# 546
extern __attribute((gnu_inline)) inline int putchar_unlocked(int __c); 
# 553
extern int getw(FILE * __stream); 
# 556
extern int putw(int __w, FILE * __stream); 
# 564
extern __attribute((gnu_inline)) inline char *fgets(char *__restrict__ __s, int __n, FILE *__restrict__ __stream)
# 565
 __attribute((__warn_unused_result__)); 
# 587 "/usr/include/stdio.h" 3
extern __attribute((gnu_inline)) inline char *fgets_unlocked(char *__restrict__ __s, int __n, FILE *__restrict__ __stream)
# 588
 __attribute((__warn_unused_result__)); 
# 603 "/usr/include/stdio.h" 3
extern __ssize_t __getdelim(char **__restrict__ __lineptr, size_t *__restrict__ __n, int __delimiter, FILE *__restrict__ __stream)
# 605
 __attribute((__warn_unused_result__)); 
# 606
extern __ssize_t getdelim(char **__restrict__ __lineptr, size_t *__restrict__ __n, int __delimiter, FILE *__restrict__ __stream)
# 608
 __attribute((__warn_unused_result__)); 
# 616
extern __attribute((gnu_inline)) inline __ssize_t getline(char **__restrict__ __lineptr, size_t *__restrict__ __n, FILE *__restrict__ __stream)
# 618
 __attribute((__warn_unused_result__)); 
# 626
extern int fputs(const char *__restrict__ __s, FILE *__restrict__ __stream); 
# 632
extern int puts(const char * __s); 
# 639
extern int ungetc(int __c, FILE * __stream); 
# 646
extern __attribute((gnu_inline)) inline size_t fread(void *__restrict__ __ptr, size_t __size, size_t __n, FILE *__restrict__ __stream)
# 647
 __attribute((__warn_unused_result__)); 
# 652
extern size_t fwrite(const void *__restrict__ __ptr, size_t __size, size_t __n, FILE *__restrict__ __s); 
# 662 "/usr/include/stdio.h" 3
extern int fputs_unlocked(const char *__restrict__ __s, FILE *__restrict__ __stream); 
# 673 "/usr/include/stdio.h" 3
extern __attribute((gnu_inline)) inline size_t fread_unlocked(void *__restrict__ __ptr, size_t __size, size_t __n, FILE *__restrict__ __stream)
# 674
 __attribute((__warn_unused_result__)); 
# 675
extern size_t fwrite_unlocked(const void *__restrict__ __ptr, size_t __size, size_t __n, FILE *__restrict__ __stream); 
# 684
extern int fseek(FILE * __stream, long __off, int __whence); 
# 689
extern long ftell(FILE * __stream) __attribute((__warn_unused_result__)); 
# 694
extern void rewind(FILE * __stream); 
# 707 "/usr/include/stdio.h" 3
extern int fseeko(FILE * __stream, __off_t __off, int __whence); 
# 712
extern __off_t ftello(FILE * __stream) __attribute((__warn_unused_result__)); 
# 731 "/usr/include/stdio.h" 3
extern int fgetpos(FILE *__restrict__ __stream, fpos_t *__restrict__ __pos); 
# 736
extern int fsetpos(FILE * __stream, const fpos_t * __pos); 
# 750 "/usr/include/stdio.h" 3
extern int fseeko64(FILE * __stream, __off64_t __off, int __whence); 
# 751
extern __off64_t ftello64(FILE * __stream) __attribute((__warn_unused_result__)); 
# 752
extern int fgetpos64(FILE *__restrict__ __stream, fpos64_t *__restrict__ __pos); 
# 753
extern int fsetpos64(FILE * __stream, const fpos64_t * __pos); 
# 757
extern void clearerr(FILE * __stream) throw(); 
# 759
extern int feof(FILE * __stream) throw() __attribute((__warn_unused_result__)); 
# 761
extern int ferror(FILE * __stream) throw() __attribute((__warn_unused_result__)); 
# 765
extern void clearerr_unlocked(FILE * __stream) throw(); 
# 766
extern __attribute((gnu_inline)) inline int feof_unlocked(FILE * __stream) throw() __attribute((__warn_unused_result__)); 
# 767
extern __attribute((gnu_inline)) inline int ferror_unlocked(FILE * __stream) throw() __attribute((__warn_unused_result__)); 
# 775
extern void perror(const char * __s); 
# 26 "/usr/include/aarch64-linux-gnu/bits/sys_errlist.h" 3
extern int sys_nerr; 
# 27
extern const char *const sys_errlist[]; 
# 30
extern int _sys_nerr; 
# 31
extern const char *const _sys_errlist[]; 
# 786 "/usr/include/stdio.h" 3
extern int fileno(FILE * __stream) throw() __attribute((__warn_unused_result__)); 
# 791
extern int fileno_unlocked(FILE * __stream) throw() __attribute((__warn_unused_result__)); 
# 800 "/usr/include/stdio.h" 3
extern FILE *popen(const char * __command, const char * __modes) __attribute((__warn_unused_result__)); 
# 806
extern int pclose(FILE * __stream); 
# 812
extern char *ctermid(char * __s) throw(); 
# 818
extern char *cuserid(char * __s); 
# 823
struct obstack; 
# 826
extern __attribute((gnu_inline)) inline int obstack_printf(obstack *__restrict__ __obstack, const char *__restrict__ __format, ...) throw()
# 828
 __attribute((__format__(__printf__, 2, 3))); 
# 829
extern __attribute((gnu_inline)) inline int obstack_vprintf(obstack *__restrict__ __obstack, const char *__restrict__ __format, __gnuc_va_list __args) throw()
# 832
 __attribute((__format__(__printf__, 2, 0))); 
# 840
extern void flockfile(FILE * __stream) throw(); 
# 844
extern int ftrylockfile(FILE * __stream) throw() __attribute((__warn_unused_result__)); 
# 847
extern void funlockfile(FILE * __stream) throw(); 
# 858 "/usr/include/stdio.h" 3
extern int __uflow(FILE *); 
# 859
extern int __overflow(FILE *, int); 
# 46 "/usr/include/aarch64-linux-gnu/bits/stdio.h" 3
__attribute((__gnu_inline__)) extern inline int 
# 47
getchar() 
# 48
{ 
# 49
return getc(stdin); 
# 50
} 
# 55
__attribute((__gnu_inline__)) extern inline int 
# 56
fgetc_unlocked(FILE *__fp) 
# 57
{ 
# 58
return ((__builtin_expect((__fp->_IO_read_ptr) >= (__fp->_IO_read_end), 0)) ? __uflow(__fp) : (*((unsigned char *)((__fp->_IO_read_ptr)++)))); 
# 59
} 
# 65
__attribute((__gnu_inline__)) extern inline int 
# 66
getc_unlocked(FILE *__fp) 
# 67
{ 
# 68
return ((__builtin_expect((__fp->_IO_read_ptr) >= (__fp->_IO_read_end), 0)) ? __uflow(__fp) : (*((unsigned char *)((__fp->_IO_read_ptr)++)))); 
# 69
} 
# 72
__attribute((__gnu_inline__)) extern inline int 
# 73
getchar_unlocked() 
# 74
{ 
# 75
return ((__builtin_expect((stdin->_IO_read_ptr) >= (stdin->_IO_read_end), 0)) ? __uflow(stdin) : (*((unsigned char *)((stdin->_IO_read_ptr)++)))); 
# 76
} 
# 81
__attribute((__gnu_inline__)) extern inline int 
# 82
putchar(int __c) 
# 83
{ 
# 84
return putc(__c, stdout); 
# 85
} 
# 90
__attribute((__gnu_inline__)) extern inline int 
# 91
fputc_unlocked(int __c, FILE *__stream) 
# 92
{ 
# 93
return ((__builtin_expect((__stream->_IO_write_ptr) >= (__stream->_IO_write_end), 0)) ? __overflow(__stream, (unsigned char)__c) : ((unsigned char)((*((__stream->_IO_write_ptr)++)) = __c))); 
# 94
} 
# 100
__attribute((__gnu_inline__)) extern inline int 
# 101
putc_unlocked(int __c, FILE *__stream) 
# 102
{ 
# 103
return ((__builtin_expect((__stream->_IO_write_ptr) >= (__stream->_IO_write_end), 0)) ? __overflow(__stream, (unsigned char)__c) : ((unsigned char)((*((__stream->_IO_write_ptr)++)) = __c))); 
# 104
} 
# 107
__attribute((__gnu_inline__)) extern inline int 
# 108
putchar_unlocked(int __c) 
# 109
{ 
# 110
return ((__builtin_expect((stdout->_IO_write_ptr) >= (stdout->_IO_write_end), 0)) ? __overflow(stdout, (unsigned char)__c) : ((unsigned char)((*((stdout->_IO_write_ptr)++)) = __c))); 
# 111
} 
# 117
__attribute((__gnu_inline__)) extern inline __ssize_t 
# 118
getline(char **__lineptr, size_t *__n, FILE *__stream) 
# 119
{ 
# 120
return __getdelim(__lineptr, __n, '\n', __stream); 
# 121
} 
# 127
__attribute((__gnu_inline__)) extern inline int 
# 128
 __attribute((__leaf__)) feof_unlocked(FILE *__stream) throw() 
# 129
{ 
# 130
return (((__stream->_flags) & 16) != 0); 
# 131
} 
# 134
__attribute((__gnu_inline__)) extern inline int 
# 135
 __attribute((__leaf__)) ferror_unlocked(FILE *__stream) throw() 
# 136
{ 
# 137
return (((__stream->_flags) & 32) != 0); 
# 138
} 
# 26 "/usr/include/aarch64-linux-gnu/bits/stdio2.h" 3
extern int __sprintf_chk(char *__restrict__ __s, int __flag, size_t __slen, const char *__restrict__ __format, ...) throw(); 
# 28
extern int __vsprintf_chk(char *__restrict__ __s, int __flag, size_t __slen, const char *__restrict__ __format, __gnuc_va_list __ap) throw(); 
# 33
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline int 
# 34
 __attribute((__leaf__)) sprintf(char *__restrict__ __s, const char *__restrict__ __fmt, ...) throw() 
# 35
{ 
# 36
return __builtin___sprintf_chk(__s, 2 - 1, __builtin_object_size(__s, 2 > 1), __fmt, __builtin_va_arg_pack()); 
# 38
} 
# 45
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline int 
# 46
 __attribute((__leaf__)) vsprintf(char *__restrict__ __s, const char *__restrict__ __fmt, __gnuc_va_list __ap) throw() 
# 48
{ 
# 49
return __builtin___vsprintf_chk(__s, 2 - 1, __builtin_object_size(__s, 2 > 1), __fmt, __ap); 
# 51
} 
# 55
extern int __snprintf_chk(char *__restrict__ __s, size_t __n, int __flag, size_t __slen, const char *__restrict__ __format, ...) throw(); 
# 58
extern int __vsnprintf_chk(char *__restrict__ __s, size_t __n, int __flag, size_t __slen, const char *__restrict__ __format, __gnuc_va_list __ap) throw(); 
# 63
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline int 
# 64
 __attribute((__leaf__)) snprintf(char *__restrict__ __s, size_t __n, const char *__restrict__ __fmt, ...) throw() 
# 66
{ 
# 67
return __builtin___snprintf_chk(__s, __n, 2 - 1, __builtin_object_size(__s, 2 > 1), __fmt, __builtin_va_arg_pack()); 
# 69
} 
# 76
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline int 
# 77
 __attribute((__leaf__)) vsnprintf(char *__restrict__ __s, size_t __n, const char *__restrict__ __fmt, __gnuc_va_list __ap) throw() 
# 79
{ 
# 80
return __builtin___vsnprintf_chk(__s, __n, 2 - 1, __builtin_object_size(__s, 2 > 1), __fmt, __ap); 
# 82
} 
# 88
extern int __fprintf_chk(FILE *__restrict__ __stream, int __flag, const char *__restrict__ __format, ...); 
# 90
extern int __printf_chk(int __flag, const char *__restrict__ __format, ...); 
# 91
extern int __vfprintf_chk(FILE *__restrict__ __stream, int __flag, const char *__restrict__ __format, __gnuc_va_list __ap); 
# 93
extern int __vprintf_chk(int __flag, const char *__restrict__ __format, __gnuc_va_list __ap); 
# 97
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline int 
# 98
fprintf(FILE *__restrict__ __stream, const char *__restrict__ __fmt, ...) 
# 99
{ 
# 100
return __fprintf_chk(__stream, 2 - 1, __fmt, __builtin_va_arg_pack()); 
# 102
} 
# 104
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline int 
# 105
printf(const char *__restrict__ __fmt, ...) 
# 106
{ 
# 107
return __printf_chk(2 - 1, __fmt, __builtin_va_arg_pack()); 
# 108
} 
# 116
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline int 
# 117
vprintf(const char *__restrict__ __fmt, __gnuc_va_list __ap) 
# 118
{ 
# 120
return __vfprintf_chk(stdout, 2 - 1, __fmt, __ap); 
# 124
} 
# 126
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline int 
# 127
vfprintf(FILE *__restrict__ __stream, const char *__restrict__ 
# 128
__fmt, __gnuc_va_list __ap) 
# 129
{ 
# 130
return __vfprintf_chk(__stream, 2 - 1, __fmt, __ap); 
# 131
} 
# 134
extern int __dprintf_chk(int __fd, int __flag, const char *__restrict__ __fmt, ...)
# 135
 __attribute((__format__(__printf__, 3, 4))); 
# 136
extern int __vdprintf_chk(int __fd, int __flag, const char *__restrict__ __fmt, __gnuc_va_list __arg)
# 138
 __attribute((__format__(__printf__, 3, 0))); 
# 141
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline int 
# 142
dprintf(int __fd, const char *__restrict__ __fmt, ...) 
# 143
{ 
# 144
return __dprintf_chk(__fd, 2 - 1, __fmt, __builtin_va_arg_pack()); 
# 146
} 
# 152
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline int 
# 153
vdprintf(int __fd, const char *__restrict__ __fmt, __gnuc_va_list __ap) 
# 154
{ 
# 155
return __vdprintf_chk(__fd, 2 - 1, __fmt, __ap); 
# 156
} 
# 161
extern int __asprintf_chk(char **__restrict__ __ptr, int __flag, const char *__restrict__ __fmt, ...) throw()
# 163
 __attribute((__format__(__printf__, 3, 4))) __attribute((__warn_unused_result__)); 
# 164
extern int __vasprintf_chk(char **__restrict__ __ptr, int __flag, const char *__restrict__ __fmt, __gnuc_va_list __arg) throw()
# 166
 __attribute((__format__(__printf__, 3, 0))) __attribute((__warn_unused_result__)); 
# 167
extern int __obstack_printf_chk(obstack *__restrict__ __obstack, int __flag, const char *__restrict__ __format, ...) throw()
# 170
 __attribute((__format__(__printf__, 3, 4))); 
# 171
extern int __obstack_vprintf_chk(obstack *__restrict__ __obstack, int __flag, const char *__restrict__ __format, __gnuc_va_list __args) throw()
# 175
 __attribute((__format__(__printf__, 3, 0))); 
# 178
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline int 
# 179
 __attribute((__leaf__)) asprintf(char **__restrict__ __ptr, const char *__restrict__ __fmt, ...) throw() 
# 180
{ 
# 181
return __asprintf_chk(__ptr, 2 - 1, __fmt, __builtin_va_arg_pack()); 
# 183
} 
# 185
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline int 
# 186
 __attribute((__leaf__)) __asprintf(char **__restrict__ __ptr, const char *__restrict__ __fmt, ...) throw() 
# 188
{ 
# 189
return __asprintf_chk(__ptr, 2 - 1, __fmt, __builtin_va_arg_pack()); 
# 191
} 
# 193
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline int 
# 194
 __attribute((__leaf__)) obstack_printf(obstack *__restrict__ __obstack, const char *__restrict__ __fmt, ...) throw() 
# 196
{ 
# 197
return __obstack_printf_chk(__obstack, 2 - 1, __fmt, __builtin_va_arg_pack()); 
# 199
} 
# 209 "/usr/include/aarch64-linux-gnu/bits/stdio2.h" 3
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline int 
# 210
 __attribute((__leaf__)) vasprintf(char **__restrict__ __ptr, const char *__restrict__ __fmt, __gnuc_va_list __ap) throw() 
# 212
{ 
# 213
return __vasprintf_chk(__ptr, 2 - 1, __fmt, __ap); 
# 214
} 
# 216
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline int 
# 217
 __attribute((__leaf__)) obstack_vprintf(obstack *__restrict__ __obstack, const char *__restrict__ __fmt, __gnuc_va_list __ap) throw() 
# 219
{ 
# 220
return __obstack_vprintf_chk(__obstack, 2 - 1, __fmt, __ap); 
# 222
} 
# 243 "/usr/include/aarch64-linux-gnu/bits/stdio2.h" 3
extern char *__fgets_chk(char *__restrict__ __s, size_t __size, int __n, FILE *__restrict__ __stream)
# 244
 __attribute((__warn_unused_result__)); 
# 245
extern char *__fgets_alias(char *__restrict__ __s, int __n, FILE *__restrict__ __stream) __asm__("fgets")
# 247
 __attribute((__warn_unused_result__)); 
# 248
extern char *__fgets_chk_warn(char *__restrict__ __s, size_t __size, int __n, FILE *__restrict__ __stream) __asm__("__fgets_chk")
# 251
 __attribute((__warn_unused_result__)) __attribute((__warning__("fgets called with bigger size than length of destination buffer"))); 
# 254
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) __attribute((__warn_unused_result__)) extern inline char *
# 255
fgets(char *__restrict__ __s, int __n, FILE *__restrict__ __stream) 
# 256
{ 
# 257
if (__builtin_object_size(__s, 2 > 1) != ((size_t)(-1))) 
# 258
{ 
# 259
if ((!(0)) || (__n <= 0)) { 
# 260
return __fgets_chk(__s, __builtin_object_size(__s, 2 > 1), __n, __stream); }  
# 262
if (((size_t)__n) > __builtin_object_size(__s, 2 > 1)) { 
# 263
return __fgets_chk_warn(__s, __builtin_object_size(__s, 2 > 1), __n, __stream); }  
# 264
}  
# 265
return __fgets_alias(__s, __n, __stream); 
# 266
} 
# 268
extern size_t __fread_chk(void *__restrict__ __ptr, size_t __ptrlen, size_t __size, size_t __n, FILE *__restrict__ __stream)
# 270
 __attribute((__warn_unused_result__)); 
# 271
extern size_t __fread_alias(void *__restrict__ __ptr, size_t __size, size_t __n, FILE *__restrict__ __stream) __asm__("fread")
# 274
 __attribute((__warn_unused_result__)); 
# 275
extern size_t __fread_chk_warn(void *__restrict__ __ptr, size_t __ptrlen, size_t __size, size_t __n, FILE *__restrict__ __stream) __asm__("__fread_chk")
# 280
 __attribute((__warn_unused_result__)) __attribute((__warning__("fread called with bigger size * nmemb than length of destination buffer"))); 
# 283
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) __attribute((__warn_unused_result__)) extern inline size_t 
# 284
fread(void *__restrict__ __ptr, size_t __size, size_t __n, FILE *__restrict__ 
# 285
__stream) 
# 286
{ 
# 287
if (__builtin_object_size(__ptr, 0) != ((size_t)(-1))) 
# 288
{ 
# 289
if (((!(0)) || (!(0))) || ((__size | __n) >= (((size_t)1) << (((8) * sizeof(size_t)) / (2))))) { 
# 292
return __fread_chk(__ptr, __builtin_object_size(__ptr, 0), __size, __n, __stream); }  
# 294
if ((__size * __n) > __builtin_object_size(__ptr, 0)) { 
# 295
return __fread_chk_warn(__ptr, __builtin_object_size(__ptr, 0), __size, __n, __stream); }  
# 296
}  
# 297
return __fread_alias(__ptr, __size, __n, __stream); 
# 298
} 
# 301
extern char *__fgets_unlocked_chk(char *__restrict__ __s, size_t __size, int __n, FILE *__restrict__ __stream)
# 302
 __attribute((__warn_unused_result__)); 
# 303
extern char *__fgets_unlocked_alias(char *__restrict__ __s, int __n, FILE *__restrict__ __stream) __asm__("fgets_unlocked")
# 305
 __attribute((__warn_unused_result__)); 
# 306
extern char *__fgets_unlocked_chk_warn(char *__restrict__ __s, size_t __size, int __n, FILE *__restrict__ __stream) __asm__("__fgets_unlocked_chk")
# 309
 __attribute((__warn_unused_result__)) __attribute((__warning__("fgets_unlocked called with bigger size than length of destination buffer"))); 
# 312
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) __attribute((__warn_unused_result__)) extern inline char *
# 313
fgets_unlocked(char *__restrict__ __s, int __n, FILE *__restrict__ __stream) 
# 314
{ 
# 315
if (__builtin_object_size(__s, 2 > 1) != ((size_t)(-1))) 
# 316
{ 
# 317
if ((!(0)) || (__n <= 0)) { 
# 318
return __fgets_unlocked_chk(__s, __builtin_object_size(__s, 2 > 1), __n, __stream); }  
# 320
if (((size_t)__n) > __builtin_object_size(__s, 2 > 1)) { 
# 321
return __fgets_unlocked_chk_warn(__s, __builtin_object_size(__s, 2 > 1), __n, __stream); }  
# 322
}  
# 323
return __fgets_unlocked_alias(__s, __n, __stream); 
# 324
} 
# 329
extern size_t __fread_unlocked_chk(void *__restrict__ __ptr, size_t __ptrlen, size_t __size, size_t __n, FILE *__restrict__ __stream)
# 331
 __attribute((__warn_unused_result__)); 
# 332
extern size_t __fread_unlocked_alias(void *__restrict__ __ptr, size_t __size, size_t __n, FILE *__restrict__ __stream) __asm__("fread_unlocked")
# 335
 __attribute((__warn_unused_result__)); 
# 336
extern size_t __fread_unlocked_chk_warn(void *__restrict__ __ptr, size_t __ptrlen, size_t __size, size_t __n, FILE *__restrict__ __stream) __asm__("__fread_unlocked_chk")
# 341
 __attribute((__warn_unused_result__)) __attribute((__warning__("fread_unlocked called with bigger size * nmemb than length of destination buffer"))); 
# 344
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) __attribute((__warn_unused_result__)) extern inline size_t 
# 345
fread_unlocked(void *__restrict__ __ptr, size_t __size, size_t __n, FILE *__restrict__ 
# 346
__stream) 
# 347
{ 
# 348
if (__builtin_object_size(__ptr, 0) != ((size_t)(-1))) 
# 349
{ 
# 350
if (((!(0)) || (!(0))) || ((__size | __n) >= (((size_t)1) << (((8) * sizeof(size_t)) / (2))))) { 
# 353
return __fread_unlocked_chk(__ptr, __builtin_object_size(__ptr, 0), __size, __n, __stream); }  
# 356
if ((__size * __n) > __builtin_object_size(__ptr, 0)) { 
# 357
return __fread_unlocked_chk_warn(__ptr, __builtin_object_size(__ptr, 0), __size, __n, __stream); }  
# 359
}  
# 362
if ((0) && (0) && ((__size | __n) < (((size_t)1) << (((8) * sizeof(size_t)) / (2)))) && ((__size * __n) <= (8))) 
# 366
{ 
# 367
size_t __cnt = __size * __n; 
# 368
char *__cptr = (char *)__ptr; 
# 369
if (__cnt == (0)) { 
# 370
return 0; }  
# 372
for (; __cnt > (0); --__cnt) 
# 373
{ 
# 374
int __c = getc_unlocked(__stream); 
# 375
if (__c == (-1)) { 
# 376
break; }  
# 377
(*(__cptr++)) = __c; 
# 378
}  
# 379
return (__cptr - ((char *)__ptr)) / __size; 
# 380
}  
# 382
return __fread_unlocked_alias(__ptr, __size, __n, __stream); 
# 383
} 
# 873 "/usr/include/stdio.h" 3
}
# 50 "/usr/include/c++/9/bits/memoryfwd.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 63 "/usr/include/c++/9/bits/memoryfwd.h" 3
template< class > class allocator; 
# 67
template<> class allocator< void> ; 
# 71
template< class , class > struct uses_allocator; 
# 78
}
# 42 "/usr/include/c++/9/bits/stringfwd.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 52
template< class _CharT> struct char_traits; 
# 55
template<> struct char_traits< char> ; 
# 58
template<> struct char_traits< wchar_t> ; 
# 66
template<> struct char_traits< char16_t> ; 
# 67
template<> struct char_traits< char32_t> ; 
# 70
inline namespace __cxx11 { 
# 72
template< class _CharT, class _Traits = char_traits< _CharT> , class 
# 73
_Alloc = allocator< _CharT> > class basic_string; 
# 76
}
# 79
typedef __cxx11::basic_string< char>  string; 
# 83
typedef __cxx11::basic_string< wchar_t>  wstring; 
# 93 "/usr/include/c++/9/bits/stringfwd.h" 3
typedef __cxx11::basic_string< char16_t>  u16string; 
# 96
typedef __cxx11::basic_string< char32_t>  u32string; 
# 102
}
# 42 "/usr/include/c++/9/bits/functexcept.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 48
void __throw_bad_exception() __attribute((__noreturn__)); 
# 52
void __throw_bad_alloc() __attribute((__noreturn__)); 
# 56
void __throw_bad_cast() __attribute((__noreturn__)); 
# 59
void __throw_bad_typeid() __attribute((__noreturn__)); 
# 63
void __throw_logic_error(const char *) __attribute((__noreturn__)); 
# 66
void __throw_domain_error(const char *) __attribute((__noreturn__)); 
# 69
void __throw_invalid_argument(const char *) __attribute((__noreturn__)); 
# 72
void __throw_length_error(const char *) __attribute((__noreturn__)); 
# 75
void __throw_out_of_range(const char *) __attribute((__noreturn__)); 
# 78
void __throw_out_of_range_fmt(const char *, ...) __attribute((__noreturn__))
# 79
 __attribute((__format__(__gnu_printf__, 1, 2))); 
# 82
void __throw_runtime_error(const char *) __attribute((__noreturn__)); 
# 85
void __throw_range_error(const char *) __attribute((__noreturn__)); 
# 88
void __throw_overflow_error(const char *) __attribute((__noreturn__)); 
# 91
void __throw_underflow_error(const char *) __attribute((__noreturn__)); 
# 95
void __throw_ios_failure(const char *) __attribute((__noreturn__)); 
# 98
void __throw_ios_failure(const char *, int) __attribute((__noreturn__)); 
# 102
void __throw_system_error(int) __attribute((__noreturn__)); 
# 106
void __throw_future_error(int) __attribute((__noreturn__)); 
# 110
void __throw_bad_function_call() __attribute((__noreturn__)); 
# 113
}
# 37 "/usr/include/c++/9/ext/numeric_traits.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 50 "/usr/include/c++/9/ext/numeric_traits.h" 3
template< class _Tp> 
# 51
struct __is_integer_nonstrict : public std::__is_integer< _Tp>  { 
# 54
using std::__is_integer< _Tp> ::__value;
# 57
enum { __width = (__value) ? sizeof(_Tp) * (8) : (0)}; 
# 58
}; 
# 60
template< class _Value> 
# 61
struct __numeric_traits_integer { 
# 64
static_assert((__is_integer_nonstrict< _Value> ::__value), "invalid specialization");
# 70
static const bool __is_signed = (((_Value)(-1)) < 0); 
# 71
static const int __digits = (__is_integer_nonstrict< _Value> ::__width - __is_signed); 
# 75
static const _Value __max = (__is_signed ? (((((_Value)1) << (__digits - 1)) - 1) << 1) + 1 : (~((_Value)0))); 
# 78
static const _Value __min = (__is_signed ? (-__max) - 1 : ((_Value)0)); 
# 79
}; 
# 81
template< class _Value> const _Value __numeric_traits_integer< _Value> ::__min; 
# 84
template< class _Value> const _Value __numeric_traits_integer< _Value> ::__max; 
# 87
template< class _Value> const bool __numeric_traits_integer< _Value> ::__is_signed; 
# 90
template< class _Value> const int __numeric_traits_integer< _Value> ::__digits; 
# 135 "/usr/include/c++/9/ext/numeric_traits.h" 3
template< class _Tp> using __int_traits = __numeric_traits_integer< _Tp> ; 
# 155 "/usr/include/c++/9/ext/numeric_traits.h" 3
template< class _Value> 
# 156
struct __numeric_traits_floating { 
# 159
static const int __max_digits10 = ((2) + ((((std::__are_same< _Value, float> ::__value) ? 24 : ((std::__are_same< _Value, double> ::__value) ? 53 : 113)) * 643L) / (2136))); 
# 162
static const bool __is_signed = true; 
# 163
static const int __digits10 = ((std::__are_same< _Value, float> ::__value) ? 6 : ((std::__are_same< _Value, double> ::__value) ? 15 : 33)); 
# 164
static const int __max_exponent10 = ((std::__are_same< _Value, float> ::__value) ? 38 : ((std::__are_same< _Value, double> ::__value) ? 308 : 4932)); 
# 165
}; 
# 167
template< class _Value> const int __numeric_traits_floating< _Value> ::__max_digits10; 
# 170
template< class _Value> const bool __numeric_traits_floating< _Value> ::__is_signed; 
# 173
template< class _Value> const int __numeric_traits_floating< _Value> ::__digits10; 
# 176
template< class _Value> const int __numeric_traits_floating< _Value> ::__max_exponent10; 
# 179
template< class _Value> 
# 180
struct __numeric_traits : public __conditional_type< std::__is_integer< _Value> ::__value, __numeric_traits_integer< _Value> , __numeric_traits_floating< _Value> > ::__type { 
# 184
}; 
# 187
}
# 36 "/usr/include/c++/9/bits/move.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 45
template< class _Tp> constexpr _Tp *
# 47
__addressof(_Tp &__r) noexcept 
# 48
{ return __builtin_addressof(__r); } 
# 53
}
# 40 "/usr/include/c++/9/type_traits" 3
namespace std __attribute((__visibility__("default"))) { 
# 56 "/usr/include/c++/9/type_traits" 3
template< class _Tp, _Tp __v> 
# 57
struct integral_constant { 
# 59
static constexpr _Tp value = (__v); 
# 60
typedef _Tp value_type; 
# 61
typedef integral_constant type; 
# 62
constexpr operator value_type() const noexcept { return value; } 
# 67
constexpr value_type operator()() const noexcept { return value; } 
# 69
}; 
# 71
template< class _Tp, _Tp __v> constexpr _Tp integral_constant< _Tp, __v> ::value; 
# 75
typedef integral_constant< bool, true>  true_type; 
# 78
typedef integral_constant< bool, false>  false_type; 
# 80
template< bool __v> using __bool_constant = integral_constant< bool, __v> ; 
# 91 "/usr/include/c++/9/type_traits" 3
template< bool , class , class > struct conditional; 
# 94
template< class ...> struct __or_; 
# 98
template<> struct __or_< >  : public false_type { 
# 100
}; 
# 102
template< class _B1> 
# 103
struct __or_< _B1>  : public _B1 { 
# 105
}; 
# 107
template< class _B1, class _B2> 
# 108
struct __or_< _B1, _B2>  : public conditional< _B1::value, _B1, _B2> ::type { 
# 110
}; 
# 112
template< class _B1, class _B2, class _B3, class ..._Bn> 
# 113
struct __or_< _B1, _B2, _B3, _Bn...>  : public conditional< _B1::value, _B1, std::__or_< _B2, _B3, _Bn...> > ::type { 
# 115
}; 
# 117
template< class ...> struct __and_; 
# 121
template<> struct __and_< >  : public true_type { 
# 123
}; 
# 125
template< class _B1> 
# 126
struct __and_< _B1>  : public _B1 { 
# 128
}; 
# 130
template< class _B1, class _B2> 
# 131
struct __and_< _B1, _B2>  : public conditional< _B1::value, _B2, _B1> ::type { 
# 133
}; 
# 135
template< class _B1, class _B2, class _B3, class ..._Bn> 
# 136
struct __and_< _B1, _B2, _B3, _Bn...>  : public conditional< _B1::value, std::__and_< _B2, _B3, _Bn...> , _B1> ::type { 
# 138
}; 
# 140
template< class _Pp> 
# 141
struct __not_ : public __bool_constant< !((bool)_Pp::value)>  { 
# 143
}; 
# 185 "/usr/include/c++/9/type_traits" 3
template< class _Tp> 
# 186
struct __success_type { 
# 187
typedef _Tp type; }; 
# 189
struct __failure_type { 
# 190
}; 
# 194
template< class > struct remove_cv; 
# 197
template< class > 
# 198
struct __is_void_helper : public false_type { 
# 199
}; 
# 202
template<> struct __is_void_helper< void>  : public true_type { 
# 203
}; 
# 206
template< class _Tp> 
# 207
struct is_void : public __is_void_helper< typename remove_cv< _Tp> ::type> ::type { 
# 209
}; 
# 211
template< class > 
# 212
struct __is_integral_helper : public false_type { 
# 213
}; 
# 216
template<> struct __is_integral_helper< bool>  : public true_type { 
# 217
}; 
# 220
template<> struct __is_integral_helper< char>  : public true_type { 
# 221
}; 
# 224
template<> struct __is_integral_helper< signed char>  : public true_type { 
# 225
}; 
# 228
template<> struct __is_integral_helper< unsigned char>  : public true_type { 
# 229
}; 
# 233
template<> struct __is_integral_helper< wchar_t>  : public true_type { 
# 234
}; 
# 244 "/usr/include/c++/9/type_traits" 3
template<> struct __is_integral_helper< char16_t>  : public true_type { 
# 245
}; 
# 248
template<> struct __is_integral_helper< char32_t>  : public true_type { 
# 249
}; 
# 252
template<> struct __is_integral_helper< short>  : public true_type { 
# 253
}; 
# 256
template<> struct __is_integral_helper< unsigned short>  : public true_type { 
# 257
}; 
# 260
template<> struct __is_integral_helper< int>  : public true_type { 
# 261
}; 
# 264
template<> struct __is_integral_helper< unsigned>  : public true_type { 
# 265
}; 
# 268
template<> struct __is_integral_helper< long>  : public true_type { 
# 269
}; 
# 272
template<> struct __is_integral_helper< unsigned long>  : public true_type { 
# 273
}; 
# 276
template<> struct __is_integral_helper< long long>  : public true_type { 
# 277
}; 
# 280
template<> struct __is_integral_helper< unsigned long long>  : public true_type { 
# 281
}; 
# 287
template<> struct __is_integral_helper< __int128>  : public true_type { 
# 288
}; 
# 291
template<> struct __is_integral_helper< unsigned __int128>  : public true_type { 
# 292
}; 
# 323 "/usr/include/c++/9/type_traits" 3
template< class _Tp> 
# 324
struct is_integral : public __is_integral_helper< typename remove_cv< _Tp> ::type> ::type { 
# 326
}; 
# 328
template< class > 
# 329
struct __is_floating_point_helper : public false_type { 
# 330
}; 
# 333
template<> struct __is_floating_point_helper< float>  : public true_type { 
# 334
}; 
# 337
template<> struct __is_floating_point_helper< double>  : public true_type { 
# 338
}; 
# 341
template<> struct __is_floating_point_helper< long double>  : public true_type { 
# 342
}; 
# 351 "/usr/include/c++/9/type_traits" 3
template< class _Tp> 
# 352
struct is_floating_point : public __is_floating_point_helper< typename remove_cv< _Tp> ::type> ::type { 
# 354
}; 
# 357
template< class > 
# 358
struct is_array : public false_type { 
# 359
}; 
# 361
template< class _Tp, size_t _Size> 
# 362
struct is_array< _Tp [_Size]>  : public true_type { 
# 363
}; 
# 365
template< class _Tp> 
# 366
struct is_array< _Tp []>  : public true_type { 
# 367
}; 
# 369
template< class > 
# 370
struct __is_pointer_helper : public false_type { 
# 371
}; 
# 373
template< class _Tp> 
# 374
struct __is_pointer_helper< _Tp *>  : public true_type { 
# 375
}; 
# 378
template< class _Tp> 
# 379
struct is_pointer : public __is_pointer_helper< typename remove_cv< _Tp> ::type> ::type { 
# 381
}; 
# 384
template< class > 
# 385
struct is_lvalue_reference : public false_type { 
# 386
}; 
# 388
template< class _Tp> 
# 389
struct is_lvalue_reference< _Tp &>  : public true_type { 
# 390
}; 
# 393
template< class > 
# 394
struct is_rvalue_reference : public false_type { 
# 395
}; 
# 397
template< class _Tp> 
# 398
struct is_rvalue_reference< _Tp &&>  : public true_type { 
# 399
}; 
# 401
template< class > struct is_function; 
# 404
template< class > 
# 405
struct __is_member_object_pointer_helper : public false_type { 
# 406
}; 
# 408
template< class _Tp, class _Cp> 
# 409
struct __is_member_object_pointer_helper< _Tp (_Cp::*)>  : public __not_< is_function< _Tp> > ::type { 
# 410
}; 
# 413
template< class _Tp> 
# 414
struct is_member_object_pointer : public __is_member_object_pointer_helper< typename remove_cv< _Tp> ::type> ::type { 
# 417
}; 
# 419
template< class > 
# 420
struct __is_member_function_pointer_helper : public false_type { 
# 421
}; 
# 423
template< class _Tp, class _Cp> 
# 424
struct __is_member_function_pointer_helper< _Tp (_Cp::*)>  : public is_function< _Tp> ::type { 
# 425
}; 
# 428
template< class _Tp> 
# 429
struct is_member_function_pointer : public __is_member_function_pointer_helper< typename remove_cv< _Tp> ::type> ::type { 
# 432
}; 
# 435
template< class _Tp> 
# 436
struct is_enum : public integral_constant< bool, __is_enum(_Tp)>  { 
# 438
}; 
# 441
template< class _Tp> 
# 442
struct is_union : public integral_constant< bool, __is_union(_Tp)>  { 
# 444
}; 
# 447
template< class _Tp> 
# 448
struct is_class : public integral_constant< bool, __is_class(_Tp)>  { 
# 450
}; 
# 453
template< class > 
# 454
struct is_function : public false_type { 
# 455
}; 
# 457
template< class _Res, class ..._ArgTypes> 
# 458
struct is_function< _Res (_ArgTypes ...)>  : public true_type { 
# 459
}; 
# 461
template< class _Res, class ..._ArgTypes> 
# 462
struct is_function< _Res (_ArgTypes ...) &>  : public true_type { 
# 463
}; 
# 465
template< class _Res, class ..._ArgTypes> 
# 466
struct is_function< _Res (_ArgTypes ...) &&>  : public true_type { 
# 467
}; 
# 469
template< class _Res, class ..._ArgTypes> 
# 470
struct is_function< _Res (_ArgTypes ..., ...)>  : public true_type { 
# 471
}; 
# 473
template< class _Res, class ..._ArgTypes> 
# 474
struct is_function< _Res (_ArgTypes ..., ...) &>  : public true_type { 
# 475
}; 
# 477
template< class _Res, class ..._ArgTypes> 
# 478
struct is_function< _Res (_ArgTypes ..., ...) &&>  : public true_type { 
# 479
}; 
# 481
template< class _Res, class ..._ArgTypes> 
# 482
struct is_function< _Res (_ArgTypes ...) const>  : public true_type { 
# 483
}; 
# 485
template< class _Res, class ..._ArgTypes> 
# 486
struct is_function< _Res (_ArgTypes ...) const &>  : public true_type { 
# 487
}; 
# 489
template< class _Res, class ..._ArgTypes> 
# 490
struct is_function< _Res (_ArgTypes ...) const &&>  : public true_type { 
# 491
}; 
# 493
template< class _Res, class ..._ArgTypes> 
# 494
struct is_function< _Res (_ArgTypes ..., ...) const>  : public true_type { 
# 495
}; 
# 497
template< class _Res, class ..._ArgTypes> 
# 498
struct is_function< _Res (_ArgTypes ..., ...) const &>  : public true_type { 
# 499
}; 
# 501
template< class _Res, class ..._ArgTypes> 
# 502
struct is_function< _Res (_ArgTypes ..., ...) const &&>  : public true_type { 
# 503
}; 
# 505
template< class _Res, class ..._ArgTypes> 
# 506
struct is_function< _Res (_ArgTypes ...) volatile>  : public true_type { 
# 507
}; 
# 509
template< class _Res, class ..._ArgTypes> 
# 510
struct is_function< _Res (_ArgTypes ...) volatile &>  : public true_type { 
# 511
}; 
# 513
template< class _Res, class ..._ArgTypes> 
# 514
struct is_function< _Res (_ArgTypes ...) volatile &&>  : public true_type { 
# 515
}; 
# 517
template< class _Res, class ..._ArgTypes> 
# 518
struct is_function< _Res (_ArgTypes ..., ...) volatile>  : public true_type { 
# 519
}; 
# 521
template< class _Res, class ..._ArgTypes> 
# 522
struct is_function< _Res (_ArgTypes ..., ...) volatile &>  : public true_type { 
# 523
}; 
# 525
template< class _Res, class ..._ArgTypes> 
# 526
struct is_function< _Res (_ArgTypes ..., ...) volatile &&>  : public true_type { 
# 527
}; 
# 529
template< class _Res, class ..._ArgTypes> 
# 530
struct is_function< _Res (_ArgTypes ...) const volatile>  : public true_type { 
# 531
}; 
# 533
template< class _Res, class ..._ArgTypes> 
# 534
struct is_function< _Res (_ArgTypes ...) const volatile &>  : public true_type { 
# 535
}; 
# 537
template< class _Res, class ..._ArgTypes> 
# 538
struct is_function< _Res (_ArgTypes ...) const volatile &&>  : public true_type { 
# 539
}; 
# 541
template< class _Res, class ..._ArgTypes> 
# 542
struct is_function< _Res (_ArgTypes ..., ...) const volatile>  : public true_type { 
# 543
}; 
# 545
template< class _Res, class ..._ArgTypes> 
# 546
struct is_function< _Res (_ArgTypes ..., ...) const volatile &>  : public true_type { 
# 547
}; 
# 549
template< class _Res, class ..._ArgTypes> 
# 550
struct is_function< _Res (_ArgTypes ..., ...) const volatile &&>  : public true_type { 
# 551
}; 
# 555
template< class > 
# 556
struct __is_null_pointer_helper : public false_type { 
# 557
}; 
# 560
template<> struct __is_null_pointer_helper< nullptr_t>  : public true_type { 
# 561
}; 
# 564
template< class _Tp> 
# 565
struct is_null_pointer : public __is_null_pointer_helper< typename remove_cv< _Tp> ::type> ::type { 
# 567
}; 
# 570
template< class _Tp> 
# 571
struct __is_nullptr_t : public is_null_pointer< _Tp>  { 
# 573
}; 
# 578
template< class _Tp> 
# 579
struct is_reference : public __or_< is_lvalue_reference< _Tp> , is_rvalue_reference< _Tp> > ::type { 
# 582
}; 
# 585
template< class _Tp> 
# 586
struct is_arithmetic : public __or_< is_integral< _Tp> , is_floating_point< _Tp> > ::type { 
# 588
}; 
# 591
template< class _Tp> 
# 592
struct is_fundamental : public __or_< is_arithmetic< _Tp> , is_void< _Tp> , is_null_pointer< _Tp> > ::type { 
# 595
}; 
# 598
template< class _Tp> 
# 599
struct is_object : public __not_< __or_< is_function< _Tp> , is_reference< _Tp> , is_void< _Tp> > > ::type { 
# 602
}; 
# 604
template< class > struct is_member_pointer; 
# 608
template< class _Tp> 
# 609
struct is_scalar : public __or_< is_arithmetic< _Tp> , is_enum< _Tp> , is_pointer< _Tp> , is_member_pointer< _Tp> , is_null_pointer< _Tp> > ::type { 
# 612
}; 
# 615
template< class _Tp> 
# 616
struct is_compound : public __not_< is_fundamental< _Tp> > ::type { 
# 617
}; 
# 619
template< class _Tp> 
# 620
struct __is_member_pointer_helper : public false_type { 
# 621
}; 
# 623
template< class _Tp, class _Cp> 
# 624
struct __is_member_pointer_helper< _Tp (_Cp::*)>  : public true_type { 
# 625
}; 
# 628
template< class _Tp> 
# 629
struct is_member_pointer : public __is_member_pointer_helper< typename remove_cv< _Tp> ::type> ::type { 
# 631
}; 
# 635
template< class _Tp> 
# 636
struct __is_referenceable : public __or_< is_object< _Tp> , is_reference< _Tp> > ::type { 
# 638
}; 
# 640
template< class _Res, class ..._Args> 
# 641
struct __is_referenceable< _Res (_Args ...)>  : public true_type { 
# 643
}; 
# 645
template< class _Res, class ..._Args> 
# 646
struct __is_referenceable< _Res (_Args ..., ...)>  : public true_type { 
# 648
}; 
# 653
template< class > 
# 654
struct is_const : public false_type { 
# 655
}; 
# 657
template< class _Tp> 
# 658
struct is_const< const _Tp>  : public true_type { 
# 659
}; 
# 662
template< class > 
# 663
struct is_volatile : public false_type { 
# 664
}; 
# 666
template< class _Tp> 
# 667
struct is_volatile< volatile _Tp>  : public true_type { 
# 668
}; 
# 671
template< class _Tp> 
# 672
struct is_trivial : public integral_constant< bool, __is_trivial(_Tp)>  { 
# 674
}; 
# 677
template< class _Tp> 
# 678
struct is_trivially_copyable : public integral_constant< bool, __is_trivially_copyable(_Tp)>  { 
# 680
}; 
# 683
template< class _Tp> 
# 684
struct is_standard_layout : public integral_constant< bool, __is_standard_layout(_Tp)>  { 
# 686
}; 
# 690
template< class _Tp> 
# 691
struct is_pod : public integral_constant< bool, __is_pod(_Tp)>  { 
# 693
}; 
# 696
template< class _Tp> 
# 697
struct is_literal_type : public integral_constant< bool, __is_literal_type(_Tp)>  { 
# 699
}; 
# 702
template< class _Tp> 
# 703
struct is_empty : public integral_constant< bool, __is_empty(_Tp)>  { 
# 705
}; 
# 708
template< class _Tp> 
# 709
struct is_polymorphic : public integral_constant< bool, __is_polymorphic(_Tp)>  { 
# 711
}; 
# 716
template< class _Tp> 
# 717
struct is_final : public integral_constant< bool, __is_final(_Tp)>  { 
# 719
}; 
# 723
template< class _Tp> 
# 724
struct is_abstract : public integral_constant< bool, __is_abstract(_Tp)>  { 
# 726
}; 
# 728
template< class _Tp, bool 
# 729
 = is_arithmetic< _Tp> ::value> 
# 730
struct __is_signed_helper : public false_type { 
# 731
}; 
# 733
template< class _Tp> 
# 734
struct __is_signed_helper< _Tp, true>  : public integral_constant< bool, ((_Tp)(-1)) < ((_Tp)0)>  { 
# 736
}; 
# 739
template< class _Tp> 
# 740
struct is_signed : public __is_signed_helper< _Tp> ::type { 
# 742
}; 
# 745
template< class _Tp> 
# 746
struct is_unsigned : public __and_< is_arithmetic< _Tp> , __not_< is_signed< _Tp> > >  { 
# 748
}; 
# 758 "/usr/include/c++/9/type_traits" 3
template< class _Tp, class _Up = _Tp &&> _Up __declval(int); 
# 762
template< class _Tp> _Tp __declval(long); 
# 766
template< class _Tp> auto declval() noexcept->__decltype((__declval< _Tp> (0))); 
# 769
template< class , unsigned  = 0U> struct extent; 
# 772
template< class > struct remove_all_extents; 
# 775
template< class _Tp> 
# 776
struct __is_array_known_bounds : public integral_constant< bool, (extent< _Tp> ::value > 0)>  { 
# 778
}; 
# 780
template< class _Tp> 
# 781
struct __is_array_unknown_bounds : public __and_< is_array< _Tp> , __not_< extent< _Tp> > >  { 
# 783
}; 
# 790
struct __do_is_destructible_impl { 
# 792
template< class _Tp, class  = __decltype((declval< _Tp &> ().~_Tp()))> static true_type __test(int); 
# 795
template< class > static false_type __test(...); 
# 797
}; 
# 799
template< class _Tp> 
# 800
struct __is_destructible_impl : public __do_is_destructible_impl { 
# 803
typedef __decltype((__test< _Tp> (0))) type; 
# 804
}; 
# 806
template< class _Tp, bool 
# 807
 = __or_< is_void< _Tp> , __is_array_unknown_bounds< _Tp> , is_function< _Tp> > ::value, bool 
# 810
 = __or_< is_reference< _Tp> , is_scalar< _Tp> > ::value> struct __is_destructible_safe; 
# 813
template< class _Tp> 
# 814
struct __is_destructible_safe< _Tp, false, false>  : public __is_destructible_impl< typename remove_all_extents< _Tp> ::type> ::type { 
# 817
}; 
# 819
template< class _Tp> 
# 820
struct __is_destructible_safe< _Tp, true, false>  : public false_type { 
# 821
}; 
# 823
template< class _Tp> 
# 824
struct __is_destructible_safe< _Tp, false, true>  : public true_type { 
# 825
}; 
# 828
template< class _Tp> 
# 829
struct is_destructible : public __is_destructible_safe< _Tp> ::type { 
# 831
}; 
# 837
struct __do_is_nt_destructible_impl { 
# 839
template< class _Tp> static __bool_constant< noexcept(declval< _Tp &> ().~_Tp())>  __test(int); 
# 843
template< class > static false_type __test(...); 
# 845
}; 
# 847
template< class _Tp> 
# 848
struct __is_nt_destructible_impl : public __do_is_nt_destructible_impl { 
# 851
typedef __decltype((__test< _Tp> (0))) type; 
# 852
}; 
# 854
template< class _Tp, bool 
# 855
 = __or_< is_void< _Tp> , __is_array_unknown_bounds< _Tp> , is_function< _Tp> > ::value, bool 
# 858
 = __or_< is_reference< _Tp> , is_scalar< _Tp> > ::value> struct __is_nt_destructible_safe; 
# 861
template< class _Tp> 
# 862
struct __is_nt_destructible_safe< _Tp, false, false>  : public __is_nt_destructible_impl< typename remove_all_extents< _Tp> ::type> ::type { 
# 865
}; 
# 867
template< class _Tp> 
# 868
struct __is_nt_destructible_safe< _Tp, true, false>  : public false_type { 
# 869
}; 
# 871
template< class _Tp> 
# 872
struct __is_nt_destructible_safe< _Tp, false, true>  : public true_type { 
# 873
}; 
# 876
template< class _Tp> 
# 877
struct is_nothrow_destructible : public __is_nt_destructible_safe< _Tp> ::type { 
# 879
}; 
# 882
template< class _Tp, class ..._Args> 
# 883
struct is_constructible : public __bool_constant< __is_constructible(_Tp, _Args...)>  { 
# 885
}; 
# 888
template< class _Tp> 
# 889
struct is_default_constructible : public is_constructible< _Tp> ::type { 
# 891
}; 
# 893
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_copy_constructible_impl; 
# 896
template< class _Tp> 
# 897
struct __is_copy_constructible_impl< _Tp, false>  : public false_type { 
# 898
}; 
# 900
template< class _Tp> 
# 901
struct __is_copy_constructible_impl< _Tp, true>  : public is_constructible< _Tp, const _Tp &>  { 
# 903
}; 
# 906
template< class _Tp> 
# 907
struct is_copy_constructible : public __is_copy_constructible_impl< _Tp>  { 
# 909
}; 
# 911
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_move_constructible_impl; 
# 914
template< class _Tp> 
# 915
struct __is_move_constructible_impl< _Tp, false>  : public false_type { 
# 916
}; 
# 918
template< class _Tp> 
# 919
struct __is_move_constructible_impl< _Tp, true>  : public is_constructible< _Tp, _Tp &&>  { 
# 921
}; 
# 924
template< class _Tp> 
# 925
struct is_move_constructible : public __is_move_constructible_impl< _Tp>  { 
# 927
}; 
# 929
template< bool , class _Tp, class ..._Args> 
# 930
struct __is_nt_constructible_impl : public false_type { 
# 932
}; 
# 934
template< class _Tp, class ..._Args> 
# 935
struct __is_nt_constructible_impl< true, _Tp, _Args...>  : public __bool_constant< noexcept((_Tp(std::declval< _Args> ()...)))>  { 
# 937
}; 
# 939
template< class _Tp, class _Arg> 
# 940
struct __is_nt_constructible_impl< true, _Tp, _Arg>  : public __bool_constant< noexcept((static_cast< _Tp>(std::declval< _Arg> ())))>  { 
# 942
}; 
# 944
template< class _Tp> 
# 945
struct __is_nt_constructible_impl< true, _Tp>  : public __bool_constant< noexcept(_Tp())>  { 
# 947
}; 
# 949
template< class _Tp, size_t _Num> 
# 950
struct __is_nt_constructible_impl< true, _Tp [_Num]>  : public __bool_constant< noexcept(typename remove_all_extents< _Tp> ::type())>  { 
# 952
}; 
# 954
template< class _Tp, class ..._Args> using __is_nothrow_constructible_impl = __is_nt_constructible_impl< __is_constructible(_Tp, _Args...), _Tp, _Args...> ; 
# 960
template< class _Tp, class ..._Args> 
# 961
struct is_nothrow_constructible : public __is_nt_constructible_impl< __is_constructible(_Tp, _Args...), _Tp, _Args...> ::type { 
# 963
}; 
# 966
template< class _Tp> 
# 967
struct is_nothrow_default_constructible : public __is_nt_constructible_impl< __is_constructible(_Tp), _Tp> ::type { 
# 969
}; 
# 972
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_nothrow_copy_constructible_impl; 
# 975
template< class _Tp> 
# 976
struct __is_nothrow_copy_constructible_impl< _Tp, false>  : public false_type { 
# 977
}; 
# 979
template< class _Tp> 
# 980
struct __is_nothrow_copy_constructible_impl< _Tp, true>  : public is_nothrow_constructible< _Tp, const _Tp &>  { 
# 982
}; 
# 985
template< class _Tp> 
# 986
struct is_nothrow_copy_constructible : public __is_nothrow_copy_constructible_impl< _Tp>  { 
# 988
}; 
# 990
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_nothrow_move_constructible_impl; 
# 993
template< class _Tp> 
# 994
struct __is_nothrow_move_constructible_impl< _Tp, false>  : public false_type { 
# 995
}; 
# 997
template< class _Tp> 
# 998
struct __is_nothrow_move_constructible_impl< _Tp, true>  : public is_nothrow_constructible< _Tp, _Tp &&>  { 
# 1000
}; 
# 1003
template< class _Tp> 
# 1004
struct is_nothrow_move_constructible : public __is_nothrow_move_constructible_impl< _Tp>  { 
# 1006
}; 
# 1009
template< class _Tp, class _Up> 
# 1010
struct is_assignable : public __bool_constant< __is_assignable(_Tp, _Up)>  { 
# 1012
}; 
# 1014
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_copy_assignable_impl; 
# 1017
template< class _Tp> 
# 1018
struct __is_copy_assignable_impl< _Tp, false>  : public false_type { 
# 1019
}; 
# 1021
template< class _Tp> 
# 1022
struct __is_copy_assignable_impl< _Tp, true>  : public is_assignable< _Tp &, const _Tp &>  { 
# 1024
}; 
# 1027
template< class _Tp> 
# 1028
struct is_copy_assignable : public __is_copy_assignable_impl< _Tp>  { 
# 1030
}; 
# 1032
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_move_assignable_impl; 
# 1035
template< class _Tp> 
# 1036
struct __is_move_assignable_impl< _Tp, false>  : public false_type { 
# 1037
}; 
# 1039
template< class _Tp> 
# 1040
struct __is_move_assignable_impl< _Tp, true>  : public is_assignable< _Tp &, _Tp &&>  { 
# 1042
}; 
# 1045
template< class _Tp> 
# 1046
struct is_move_assignable : public __is_move_assignable_impl< _Tp>  { 
# 1048
}; 
# 1050
template< class _Tp, class _Up> 
# 1051
struct __is_nt_assignable_impl : public integral_constant< bool, noexcept((declval< _Tp> () = declval< _Up> ()))>  { 
# 1053
}; 
# 1056
template< class _Tp, class _Up> 
# 1057
struct is_nothrow_assignable : public __and_< is_assignable< _Tp, _Up> , __is_nt_assignable_impl< _Tp, _Up> >  { 
# 1060
}; 
# 1062
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_nt_copy_assignable_impl; 
# 1065
template< class _Tp> 
# 1066
struct __is_nt_copy_assignable_impl< _Tp, false>  : public false_type { 
# 1067
}; 
# 1069
template< class _Tp> 
# 1070
struct __is_nt_copy_assignable_impl< _Tp, true>  : public is_nothrow_assignable< _Tp &, const _Tp &>  { 
# 1072
}; 
# 1075
template< class _Tp> 
# 1076
struct is_nothrow_copy_assignable : public __is_nt_copy_assignable_impl< _Tp>  { 
# 1078
}; 
# 1080
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_nt_move_assignable_impl; 
# 1083
template< class _Tp> 
# 1084
struct __is_nt_move_assignable_impl< _Tp, false>  : public false_type { 
# 1085
}; 
# 1087
template< class _Tp> 
# 1088
struct __is_nt_move_assignable_impl< _Tp, true>  : public is_nothrow_assignable< _Tp &, _Tp &&>  { 
# 1090
}; 
# 1093
template< class _Tp> 
# 1094
struct is_nothrow_move_assignable : public __is_nt_move_assignable_impl< _Tp>  { 
# 1096
}; 
# 1099
template< class _Tp, class ..._Args> 
# 1100
struct is_trivially_constructible : public __bool_constant< __is_trivially_constructible(_Tp, _Args...)>  { 
# 1102
}; 
# 1105
template< class _Tp> 
# 1106
struct is_trivially_default_constructible : public is_trivially_constructible< _Tp> ::type { 
# 1108
}; 
# 1110
struct __do_is_implicitly_default_constructible_impl { 
# 1112
template< class _Tp> static void __helper(const _Tp &); 
# 1115
template< class _Tp> static true_type __test(const _Tp &, __decltype((__helper< const _Tp &> ({}))) * = 0); 
# 1119
static false_type __test(...); 
# 1120
}; 
# 1122
template< class _Tp> 
# 1123
struct __is_implicitly_default_constructible_impl : public __do_is_implicitly_default_constructible_impl { 
# 1126
typedef __decltype((__test(declval< _Tp> ()))) type; 
# 1127
}; 
# 1129
template< class _Tp> 
# 1130
struct __is_implicitly_default_constructible_safe : public __is_implicitly_default_constructible_impl< _Tp> ::type { 
# 1132
}; 
# 1134
template< class _Tp> 
# 1135
struct __is_implicitly_default_constructible : public __and_< is_default_constructible< _Tp> , __is_implicitly_default_constructible_safe< _Tp> >  { 
# 1138
}; 
# 1142
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_trivially_copy_constructible_impl; 
# 1145
template< class _Tp> 
# 1146
struct __is_trivially_copy_constructible_impl< _Tp, false>  : public false_type { 
# 1147
}; 
# 1149
template< class _Tp> 
# 1150
struct __is_trivially_copy_constructible_impl< _Tp, true>  : public __and_< is_copy_constructible< _Tp> , integral_constant< bool, __is_trivially_constructible(_Tp, const _Tp &)> >  { 
# 1154
}; 
# 1156
template< class _Tp> 
# 1157
struct is_trivially_copy_constructible : public __is_trivially_copy_constructible_impl< _Tp>  { 
# 1159
}; 
# 1163
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_trivially_move_constructible_impl; 
# 1166
template< class _Tp> 
# 1167
struct __is_trivially_move_constructible_impl< _Tp, false>  : public false_type { 
# 1168
}; 
# 1170
template< class _Tp> 
# 1171
struct __is_trivially_move_constructible_impl< _Tp, true>  : public __and_< is_move_constructible< _Tp> , integral_constant< bool, __is_trivially_constructible(_Tp, _Tp &&)> >  { 
# 1175
}; 
# 1177
template< class _Tp> 
# 1178
struct is_trivially_move_constructible : public __is_trivially_move_constructible_impl< _Tp>  { 
# 1180
}; 
# 1183
template< class _Tp, class _Up> 
# 1184
struct is_trivially_assignable : public __bool_constant< __is_trivially_assignable(_Tp, _Up)>  { 
# 1186
}; 
# 1190
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_trivially_copy_assignable_impl; 
# 1193
template< class _Tp> 
# 1194
struct __is_trivially_copy_assignable_impl< _Tp, false>  : public false_type { 
# 1195
}; 
# 1197
template< class _Tp> 
# 1198
struct __is_trivially_copy_assignable_impl< _Tp, true>  : public __bool_constant< __is_trivially_assignable(_Tp &, const _Tp &)>  { 
# 1200
}; 
# 1202
template< class _Tp> 
# 1203
struct is_trivially_copy_assignable : public __is_trivially_copy_assignable_impl< _Tp>  { 
# 1205
}; 
# 1209
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_trivially_move_assignable_impl; 
# 1212
template< class _Tp> 
# 1213
struct __is_trivially_move_assignable_impl< _Tp, false>  : public false_type { 
# 1214
}; 
# 1216
template< class _Tp> 
# 1217
struct __is_trivially_move_assignable_impl< _Tp, true>  : public __bool_constant< __is_trivially_assignable(_Tp &, _Tp &&)>  { 
# 1219
}; 
# 1221
template< class _Tp> 
# 1222
struct is_trivially_move_assignable : public __is_trivially_move_assignable_impl< _Tp>  { 
# 1224
}; 
# 1227
template< class _Tp> 
# 1228
struct is_trivially_destructible : public __and_< is_destructible< _Tp> , __bool_constant< __has_trivial_destructor(_Tp)> >  { 
# 1231
}; 
# 1235
template< class _Tp> 
# 1236
struct has_virtual_destructor : public integral_constant< bool, __has_virtual_destructor(_Tp)>  { 
# 1238
}; 
# 1244
template< class _Tp> 
# 1245
struct alignment_of : public integral_constant< unsigned long, __alignof__(_Tp)>  { 
# 1246
}; 
# 1249
template< class > 
# 1250
struct rank : public integral_constant< unsigned long, 0UL>  { 
# 1251
}; 
# 1253
template< class _Tp, size_t _Size> 
# 1254
struct rank< _Tp [_Size]>  : public integral_constant< unsigned long, 1 + std::rank< _Tp> ::value>  { 
# 1255
}; 
# 1257
template< class _Tp> 
# 1258
struct rank< _Tp []>  : public integral_constant< unsigned long, 1 + std::rank< _Tp> ::value>  { 
# 1259
}; 
# 1262
template< class , unsigned _Uint> 
# 1263
struct extent : public integral_constant< unsigned long, 0UL>  { 
# 1264
}; 
# 1266
template< class _Tp, unsigned _Uint, size_t _Size> 
# 1267
struct extent< _Tp [_Size], _Uint>  : public integral_constant< unsigned long, (_Uint == (0)) ? _Size : std::extent< _Tp, _Uint - (1)> ::value>  { 
# 1271
}; 
# 1273
template< class _Tp, unsigned _Uint> 
# 1274
struct extent< _Tp [], _Uint>  : public integral_constant< unsigned long, (_Uint == (0)) ? 0 : std::extent< _Tp, _Uint - (1)> ::value>  { 
# 1278
}; 
# 1284
template< class , class > 
# 1285
struct is_same : public false_type { 
# 1286
}; 
# 1288
template< class _Tp> 
# 1289
struct is_same< _Tp, _Tp>  : public true_type { 
# 1290
}; 
# 1293
template< class _Base, class _Derived> 
# 1294
struct is_base_of : public integral_constant< bool, __is_base_of(_Base, _Derived)>  { 
# 1296
}; 
# 1298
template< class _From, class _To, bool 
# 1299
 = __or_< is_void< _From> , is_function< _To> , is_array< _To> > ::value> 
# 1301
struct __is_convertible_helper { 
# 1303
typedef typename is_void< _To> ::type type; 
# 1304
}; 
# 1306
template< class _From, class _To> 
# 1307
class __is_convertible_helper< _From, _To, false>  { 
# 1309
template< class _To1> static void __test_aux(_To1) noexcept; 
# 1312
template< class _From1, class _To1, class 
# 1313
 = __decltype((__test_aux< _To1> (std::declval< _From1> ())))> static true_type 
# 1312
__test(int); 
# 1317
template< class , class > static false_type __test(...); 
# 1322
public: typedef __decltype((__test< _From, _To> (0))) type; 
# 1323
}; 
# 1327
template< class _From, class _To> 
# 1328
struct is_convertible : public __is_convertible_helper< _From, _To> ::type { 
# 1330
}; 
# 1374 "/usr/include/c++/9/type_traits" 3
template< class _Tp> 
# 1375
struct remove_const { 
# 1376
typedef _Tp type; }; 
# 1378
template< class _Tp> 
# 1379
struct remove_const< const _Tp>  { 
# 1380
typedef _Tp type; }; 
# 1383
template< class _Tp> 
# 1384
struct remove_volatile { 
# 1385
typedef _Tp type; }; 
# 1387
template< class _Tp> 
# 1388
struct remove_volatile< volatile _Tp>  { 
# 1389
typedef _Tp type; }; 
# 1392
template< class _Tp> 
# 1393
struct remove_cv { 
# 1396
typedef typename remove_const< typename remove_volatile< _Tp> ::type> ::type type; 
# 1397
}; 
# 1400
template< class _Tp> 
# 1401
struct add_const { 
# 1402
typedef const _Tp type; }; 
# 1405
template< class _Tp> 
# 1406
struct add_volatile { 
# 1407
typedef volatile _Tp type; }; 
# 1410
template< class _Tp> 
# 1411
struct add_cv { 
# 1414
typedef typename add_const< typename add_volatile< _Tp> ::type> ::type type; 
# 1415
}; 
# 1422
template< class _Tp> using remove_const_t = typename remove_const< _Tp> ::type; 
# 1426
template< class _Tp> using remove_volatile_t = typename remove_volatile< _Tp> ::type; 
# 1430
template< class _Tp> using remove_cv_t = typename remove_cv< _Tp> ::type; 
# 1434
template< class _Tp> using add_const_t = typename add_const< _Tp> ::type; 
# 1438
template< class _Tp> using add_volatile_t = typename add_volatile< _Tp> ::type; 
# 1442
template< class _Tp> using add_cv_t = typename add_cv< _Tp> ::type; 
# 1449
template< class _Tp> 
# 1450
struct remove_reference { 
# 1451
typedef _Tp type; }; 
# 1453
template< class _Tp> 
# 1454
struct remove_reference< _Tp &>  { 
# 1455
typedef _Tp type; }; 
# 1457
template< class _Tp> 
# 1458
struct remove_reference< _Tp &&>  { 
# 1459
typedef _Tp type; }; 
# 1461
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> 
# 1462
struct __add_lvalue_reference_helper { 
# 1463
typedef _Tp type; }; 
# 1465
template< class _Tp> 
# 1466
struct __add_lvalue_reference_helper< _Tp, true>  { 
# 1467
typedef _Tp &type; }; 
# 1470
template< class _Tp> 
# 1471
struct add_lvalue_reference : public __add_lvalue_reference_helper< _Tp>  { 
# 1473
}; 
# 1475
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> 
# 1476
struct __add_rvalue_reference_helper { 
# 1477
typedef _Tp type; }; 
# 1479
template< class _Tp> 
# 1480
struct __add_rvalue_reference_helper< _Tp, true>  { 
# 1481
typedef _Tp &&type; }; 
# 1484
template< class _Tp> 
# 1485
struct add_rvalue_reference : public __add_rvalue_reference_helper< _Tp>  { 
# 1487
}; 
# 1491
template< class _Tp> using remove_reference_t = typename remove_reference< _Tp> ::type; 
# 1495
template< class _Tp> using add_lvalue_reference_t = typename add_lvalue_reference< _Tp> ::type; 
# 1499
template< class _Tp> using add_rvalue_reference_t = typename add_rvalue_reference< _Tp> ::type; 
# 1506
template< class _Unqualified, bool _IsConst, bool _IsVol> struct __cv_selector; 
# 1509
template< class _Unqualified> 
# 1510
struct __cv_selector< _Unqualified, false, false>  { 
# 1511
typedef _Unqualified __type; }; 
# 1513
template< class _Unqualified> 
# 1514
struct __cv_selector< _Unqualified, false, true>  { 
# 1515
typedef volatile _Unqualified __type; }; 
# 1517
template< class _Unqualified> 
# 1518
struct __cv_selector< _Unqualified, true, false>  { 
# 1519
typedef const _Unqualified __type; }; 
# 1521
template< class _Unqualified> 
# 1522
struct __cv_selector< _Unqualified, true, true>  { 
# 1523
typedef const volatile _Unqualified __type; }; 
# 1525
template< class _Qualified, class _Unqualified, bool 
# 1526
_IsConst = is_const< _Qualified> ::value, bool 
# 1527
_IsVol = is_volatile< _Qualified> ::value> 
# 1528
class __match_cv_qualifiers { 
# 1530
typedef __cv_selector< _Unqualified, _IsConst, _IsVol>  __match; 
# 1533
public: typedef typename __cv_selector< _Unqualified, _IsConst, _IsVol> ::__type __type; 
# 1534
}; 
# 1537
template< class _Tp> 
# 1538
struct __make_unsigned { 
# 1539
typedef _Tp __type; }; 
# 1542
template<> struct __make_unsigned< char>  { 
# 1543
typedef unsigned char __type; }; 
# 1546
template<> struct __make_unsigned< signed char>  { 
# 1547
typedef unsigned char __type; }; 
# 1550
template<> struct __make_unsigned< short>  { 
# 1551
typedef unsigned short __type; }; 
# 1554
template<> struct __make_unsigned< int>  { 
# 1555
typedef unsigned __type; }; 
# 1558
template<> struct __make_unsigned< long>  { 
# 1559
typedef unsigned long __type; }; 
# 1562
template<> struct __make_unsigned< long long>  { 
# 1563
typedef unsigned long long __type; }; 
# 1567
template<> struct __make_unsigned< __int128>  { 
# 1568
typedef unsigned __int128 __type; }; 
# 1587 "/usr/include/c++/9/type_traits" 3
template< class _Tp, bool 
# 1588
_IsInt = is_integral< _Tp> ::value, bool 
# 1589
_IsEnum = is_enum< _Tp> ::value> class __make_unsigned_selector; 
# 1592
template< class _Tp> 
# 1593
class __make_unsigned_selector< _Tp, true, false>  { 
# 1595
using __unsigned_type = typename __make_unsigned< typename remove_cv< _Tp> ::type> ::__type; 
# 1599
public: using __type = typename __match_cv_qualifiers< _Tp, __unsigned_type> ::__type; 
# 1601
}; 
# 1603
class __make_unsigned_selector_base { 
# 1606
protected: template< class ...> struct _List { }; 
# 1608
template< class _Tp, class ..._Up> 
# 1609
struct _List< _Tp, _Up...>  : public __make_unsigned_selector_base::_List< _Up...>  { 
# 1610
static constexpr std::size_t __size = sizeof(_Tp); }; 
# 1612
template< size_t _Sz, class _Tp, bool  = _Sz <= _Tp::__size> struct __select; 
# 1615
template< size_t _Sz, class _Uint, class ..._UInts> 
# 1616
struct __select< _Sz, _List< _Uint, _UInts...> , true>  { 
# 1617
using __type = _Uint; }; 
# 1619
template< size_t _Sz, class _Uint, class ..._UInts> 
# 1620
struct __select< _Sz, _List< _Uint, _UInts...> , false>  : public __make_unsigned_selector_base::__select< _Sz, _List< _UInts...> >  { 
# 1622
}; 
# 1623
}; 
# 1626
template< class _Tp> 
# 1627
class __make_unsigned_selector< _Tp, false, true>  : private __make_unsigned_selector_base { 
# 1631
using _UInts = _List< unsigned char, unsigned short, unsigned, unsigned long, unsigned long long> ; 
# 1634
using __unsigned_type = typename __select< sizeof(_Tp), _List< unsigned char, unsigned short, unsigned, unsigned long, unsigned long long> > ::__type; 
# 1637
public: using __type = typename __match_cv_qualifiers< _Tp, __unsigned_type> ::__type; 
# 1639
}; 
# 1647
template<> struct __make_unsigned< wchar_t>  { 
# 1649
using __type = __make_unsigned_selector< wchar_t, false, true> ::__type; 
# 1651
}; 
# 1664 "/usr/include/c++/9/type_traits" 3
template<> struct __make_unsigned< char16_t>  { 
# 1666
using __type = __make_unsigned_selector< char16_t, false, true> ::__type; 
# 1668
}; 
# 1671
template<> struct __make_unsigned< char32_t>  { 
# 1673
using __type = __make_unsigned_selector< char32_t, false, true> ::__type; 
# 1675
}; 
# 1681
template< class _Tp> 
# 1682
struct make_unsigned { 
# 1683
typedef typename __make_unsigned_selector< _Tp> ::__type type; }; 
# 1687
template<> struct make_unsigned< bool> ; 
# 1691
template< class _Tp> 
# 1692
struct __make_signed { 
# 1693
typedef _Tp __type; }; 
# 1696
template<> struct __make_signed< char>  { 
# 1697
typedef signed char __type; }; 
# 1700
template<> struct __make_signed< unsigned char>  { 
# 1701
typedef signed char __type; }; 
# 1704
template<> struct __make_signed< unsigned short>  { 
# 1705
typedef signed short __type; }; 
# 1708
template<> struct __make_signed< unsigned>  { 
# 1709
typedef signed int __type; }; 
# 1712
template<> struct __make_signed< unsigned long>  { 
# 1713
typedef signed long __type; }; 
# 1716
template<> struct __make_signed< unsigned long long>  { 
# 1717
typedef signed long long __type; }; 
# 1721
template<> struct __make_signed< unsigned __int128>  { 
# 1722
typedef __int128 __type; }; 
# 1741 "/usr/include/c++/9/type_traits" 3
template< class _Tp, bool 
# 1742
_IsInt = is_integral< _Tp> ::value, bool 
# 1743
_IsEnum = is_enum< _Tp> ::value> class __make_signed_selector; 
# 1746
template< class _Tp> 
# 1747
class __make_signed_selector< _Tp, true, false>  { 
# 1749
using __signed_type = typename __make_signed< typename remove_cv< _Tp> ::type> ::__type; 
# 1753
public: using __type = typename __match_cv_qualifiers< _Tp, __signed_type> ::__type; 
# 1755
}; 
# 1758
template< class _Tp> 
# 1759
class __make_signed_selector< _Tp, false, true>  { 
# 1761
typedef typename __make_unsigned_selector< _Tp> ::__type __unsigned_type; 
# 1764
public: typedef typename std::__make_signed_selector< __unsigned_type> ::__type __type; 
# 1765
}; 
# 1773
template<> struct __make_signed< wchar_t>  { 
# 1775
using __type = __make_signed_selector< wchar_t, false, true> ::__type; 
# 1777
}; 
# 1790 "/usr/include/c++/9/type_traits" 3
template<> struct __make_signed< char16_t>  { 
# 1792
using __type = __make_signed_selector< char16_t, false, true> ::__type; 
# 1794
}; 
# 1797
template<> struct __make_signed< char32_t>  { 
# 1799
using __type = __make_signed_selector< char32_t, false, true> ::__type; 
# 1801
}; 
# 1807
template< class _Tp> 
# 1808
struct make_signed { 
# 1809
typedef typename __make_signed_selector< _Tp> ::__type type; }; 
# 1813
template<> struct make_signed< bool> ; 
# 1817
template< class _Tp> using make_signed_t = typename make_signed< _Tp> ::type; 
# 1821
template< class _Tp> using make_unsigned_t = typename make_unsigned< _Tp> ::type; 
# 1828
template< class _Tp> 
# 1829
struct remove_extent { 
# 1830
typedef _Tp type; }; 
# 1832
template< class _Tp, size_t _Size> 
# 1833
struct remove_extent< _Tp [_Size]>  { 
# 1834
typedef _Tp type; }; 
# 1836
template< class _Tp> 
# 1837
struct remove_extent< _Tp []>  { 
# 1838
typedef _Tp type; }; 
# 1841
template< class _Tp> 
# 1842
struct remove_all_extents { 
# 1843
typedef _Tp type; }; 
# 1845
template< class _Tp, size_t _Size> 
# 1846
struct remove_all_extents< _Tp [_Size]>  { 
# 1847
typedef typename std::remove_all_extents< _Tp> ::type type; }; 
# 1849
template< class _Tp> 
# 1850
struct remove_all_extents< _Tp []>  { 
# 1851
typedef typename std::remove_all_extents< _Tp> ::type type; }; 
# 1855
template< class _Tp> using remove_extent_t = typename remove_extent< _Tp> ::type; 
# 1859
template< class _Tp> using remove_all_extents_t = typename remove_all_extents< _Tp> ::type; 
# 1865
template< class _Tp, class > 
# 1866
struct __remove_pointer_helper { 
# 1867
typedef _Tp type; }; 
# 1869
template< class _Tp, class _Up> 
# 1870
struct __remove_pointer_helper< _Tp, _Up *>  { 
# 1871
typedef _Up type; }; 
# 1874
template< class _Tp> 
# 1875
struct remove_pointer : public __remove_pointer_helper< _Tp, typename remove_cv< _Tp> ::type>  { 
# 1877
}; 
# 1880
template< class _Tp, bool  = __or_< __is_referenceable< _Tp> , is_void< _Tp> > ::value> 
# 1882
struct __add_pointer_helper { 
# 1883
typedef _Tp type; }; 
# 1885
template< class _Tp> 
# 1886
struct __add_pointer_helper< _Tp, true>  { 
# 1887
typedef typename remove_reference< _Tp> ::type *type; }; 
# 1889
template< class _Tp> 
# 1890
struct add_pointer : public __add_pointer_helper< _Tp>  { 
# 1892
}; 
# 1896
template< class _Tp> using remove_pointer_t = typename remove_pointer< _Tp> ::type; 
# 1900
template< class _Tp> using add_pointer_t = typename add_pointer< _Tp> ::type; 
# 1904
template< size_t _Len> 
# 1905
struct __aligned_storage_msa { 
# 1907
union __type { 
# 1909
unsigned char __data[_Len]; 
# 1910
struct __attribute((__aligned__)) { } __align; 
# 1911
}; 
# 1912
}; 
# 1924 "/usr/include/c++/9/type_traits" 3
template< size_t _Len, size_t _Align = __alignof__(typename __aligned_storage_msa< _Len> ::__type)> 
# 1926
struct aligned_storage { 
# 1928
union type { 
# 1930
unsigned char __data[_Len]; 
# 1931
struct __attribute((__aligned__(_Align))) { } __align; 
# 1932
}; 
# 1933
}; 
# 1935
template< class ..._Types> 
# 1936
struct __strictest_alignment { 
# 1938
static const size_t _S_alignment = (0); 
# 1939
static const size_t _S_size = (0); 
# 1940
}; 
# 1942
template< class _Tp, class ..._Types> 
# 1943
struct __strictest_alignment< _Tp, _Types...>  { 
# 1945
static const size_t _S_alignment = ((__alignof__(_Tp) > __strictest_alignment< _Types...> ::_S_alignment) ? __alignof__(_Tp) : __strictest_alignment< _Types...> ::_S_alignment); 
# 1948
static const size_t _S_size = ((sizeof(_Tp) > __strictest_alignment< _Types...> ::_S_size) ? sizeof(_Tp) : __strictest_alignment< _Types...> ::_S_size); 
# 1951
}; 
# 1963 "/usr/include/c++/9/type_traits" 3
template< size_t _Len, class ..._Types> 
# 1964
struct aligned_union { 
# 1967
static_assert((sizeof...(_Types) != (0)), "At least one type is required");
# 1969
private: using __strictest = __strictest_alignment< _Types...> ; 
# 1970
static const size_t _S_len = ((_Len > __strictest::_S_size) ? _Len : __strictest::_S_size); 
# 1974
public: static const size_t alignment_value = (__strictest::_S_alignment); 
# 1976
typedef typename aligned_storage< _S_len, alignment_value> ::type type; 
# 1977
}; 
# 1979
template< size_t _Len, class ..._Types> const size_t aligned_union< _Len, _Types...> ::alignment_value; 
# 1984
template< class _Up, bool 
# 1985
_IsArray = is_array< _Up> ::value, bool 
# 1986
_IsFunction = is_function< _Up> ::value> struct __decay_selector; 
# 1990
template< class _Up> 
# 1991
struct __decay_selector< _Up, false, false>  { 
# 1992
typedef typename remove_cv< _Up> ::type __type; }; 
# 1994
template< class _Up> 
# 1995
struct __decay_selector< _Up, true, false>  { 
# 1996
typedef typename remove_extent< _Up> ::type *__type; }; 
# 1998
template< class _Up> 
# 1999
struct __decay_selector< _Up, false, true>  { 
# 2000
typedef typename add_pointer< _Up> ::type __type; }; 
# 2003
template< class _Tp> 
# 2004
class decay { 
# 2006
typedef typename remove_reference< _Tp> ::type __remove_type; 
# 2009
public: typedef typename __decay_selector< __remove_type> ::__type type; 
# 2010
}; 
# 2012
template< class _Tp> class reference_wrapper; 
# 2016
template< class _Tp> 
# 2017
struct __strip_reference_wrapper { 
# 2019
typedef _Tp __type; 
# 2020
}; 
# 2022
template< class _Tp> 
# 2023
struct __strip_reference_wrapper< reference_wrapper< _Tp> >  { 
# 2025
typedef _Tp &__type; 
# 2026
}; 
# 2028
template< class _Tp> 
# 2029
struct __decay_and_strip { 
# 2032
typedef typename __strip_reference_wrapper< typename decay< _Tp> ::type> ::__type __type; 
# 2033
}; 
# 2038
template< bool , class _Tp = void> 
# 2039
struct enable_if { 
# 2040
}; 
# 2043
template< class _Tp> 
# 2044
struct enable_if< true, _Tp>  { 
# 2045
typedef _Tp type; }; 
# 2047
template< class ..._Cond> using _Require = typename enable_if< __and_< _Cond...> ::value> ::type; 
# 2052
template< bool _Cond, class _Iftrue, class _Iffalse> 
# 2053
struct conditional { 
# 2054
typedef _Iftrue type; }; 
# 2057
template< class _Iftrue, class _Iffalse> 
# 2058
struct conditional< false, _Iftrue, _Iffalse>  { 
# 2059
typedef _Iffalse type; }; 
# 2062
template< class ..._Tp> struct common_type; 
# 2067
struct __do_common_type_impl { 
# 2069
template< class _Tp, class _Up> static __success_type< typename decay< __decltype((true ? std::declval< _Tp> () : std::declval< _Up> ()))> ::type>  _S_test(int); 
# 2074
template< class , class > static __failure_type _S_test(...); 
# 2076
}; 
# 2078
template< class _Tp, class _Up> 
# 2079
struct __common_type_impl : private __do_common_type_impl { 
# 2082
typedef __decltype((_S_test< _Tp, _Up> (0))) type; 
# 2083
}; 
# 2085
struct __do_member_type_wrapper { 
# 2087
template< class _Tp> static __success_type< typename _Tp::type>  _S_test(int); 
# 2090
template< class > static __failure_type _S_test(...); 
# 2092
}; 
# 2094
template< class _Tp> 
# 2095
struct __member_type_wrapper : private __do_member_type_wrapper { 
# 2098
typedef __decltype((_S_test< _Tp> (0))) type; 
# 2099
}; 
# 2101
template< class _CTp, class ..._Args> 
# 2102
struct __expanded_common_type_wrapper { 
# 2104
typedef common_type< typename _CTp::type, _Args...>  type; 
# 2105
}; 
# 2107
template< class ..._Args> 
# 2108
struct __expanded_common_type_wrapper< __failure_type, _Args...>  { 
# 2109
typedef __failure_type type; }; 
# 2112
template<> struct common_type< >  { 
# 2113
}; 
# 2115
template< class _Tp> 
# 2116
struct common_type< _Tp>  : public std::common_type< _Tp, _Tp>  { 
# 2118
}; 
# 2120
template< class _Tp, class _Up> 
# 2121
struct common_type< _Tp, _Up>  : public __common_type_impl< _Tp, _Up> ::type { 
# 2123
}; 
# 2125
template< class _Tp, class _Up, class ..._Vp> 
# 2126
struct common_type< _Tp, _Up, _Vp...>  : public __expanded_common_type_wrapper< typename __member_type_wrapper< std::common_type< _Tp, _Up> > ::type, _Vp...> ::type { 
# 2129
}; 
# 2131
template< class _Tp, bool  = is_enum< _Tp> ::value> 
# 2132
struct __underlying_type_impl { 
# 2134
using type = __underlying_type(_Tp); 
# 2135
}; 
# 2137
template< class _Tp> 
# 2138
struct __underlying_type_impl< _Tp, false>  { 
# 2139
}; 
# 2142
template< class _Tp> 
# 2143
struct underlying_type : public __underlying_type_impl< _Tp>  { 
# 2145
}; 
# 2147
template< class _Tp> 
# 2148
struct __declval_protector { 
# 2150
static const bool __stop = false; 
# 2151
}; 
# 2153
template< class _Tp> auto 
# 2154
declval() noexcept->__decltype((__declval< _Tp> (0))) 
# 2155
{ 
# 2156
static_assert((__declval_protector< _Tp> ::__stop), "declval() must not be used!");
# 2158
return __declval< _Tp> (0); 
# 2159
} 
# 2162
template< class _Tp> using __remove_cvref_t = typename remove_cv< typename remove_reference< _Tp> ::type> ::type; 
# 2167
template< class _Signature> class result_of; 
# 2174
struct __invoke_memfun_ref { }; 
# 2175
struct __invoke_memfun_deref { }; 
# 2176
struct __invoke_memobj_ref { }; 
# 2177
struct __invoke_memobj_deref { }; 
# 2178
struct __invoke_other { }; 
# 2181
template< class _Tp, class _Tag> 
# 2182
struct __result_of_success : public __success_type< _Tp>  { 
# 2183
using __invoke_type = _Tag; }; 
# 2186
struct __result_of_memfun_ref_impl { 
# 2188
template< class _Fp, class _Tp1, class ..._Args> static __result_of_success< __decltype(((std::declval< _Tp1> ().*std::declval< _Fp> ())(std::declval< _Args> ()...))), __invoke_memfun_ref>  _S_test(int); 
# 2193
template< class ...> static __failure_type _S_test(...); 
# 2195
}; 
# 2197
template< class _MemPtr, class _Arg, class ..._Args> 
# 2198
struct __result_of_memfun_ref : private __result_of_memfun_ref_impl { 
# 2201
typedef __decltype((_S_test< _MemPtr, _Arg, _Args...> (0))) type; 
# 2202
}; 
# 2205
struct __result_of_memfun_deref_impl { 
# 2207
template< class _Fp, class _Tp1, class ..._Args> static __result_of_success< __decltype((((*std::declval< _Tp1> ()).*std::declval< _Fp> ())(std::declval< _Args> ()...))), __invoke_memfun_deref>  _S_test(int); 
# 2212
template< class ...> static __failure_type _S_test(...); 
# 2214
}; 
# 2216
template< class _MemPtr, class _Arg, class ..._Args> 
# 2217
struct __result_of_memfun_deref : private __result_of_memfun_deref_impl { 
# 2220
typedef __decltype((_S_test< _MemPtr, _Arg, _Args...> (0))) type; 
# 2221
}; 
# 2224
struct __result_of_memobj_ref_impl { 
# 2226
template< class _Fp, class _Tp1> static __result_of_success< __decltype((std::declval< _Tp1> ().*std::declval< _Fp> ())), __invoke_memobj_ref>  _S_test(int); 
# 2231
template< class , class > static __failure_type _S_test(...); 
# 2233
}; 
# 2235
template< class _MemPtr, class _Arg> 
# 2236
struct __result_of_memobj_ref : private __result_of_memobj_ref_impl { 
# 2239
typedef __decltype((_S_test< _MemPtr, _Arg> (0))) type; 
# 2240
}; 
# 2243
struct __result_of_memobj_deref_impl { 
# 2245
template< class _Fp, class _Tp1> static __result_of_success< __decltype(((*std::declval< _Tp1> ()).*std::declval< _Fp> ())), __invoke_memobj_deref>  _S_test(int); 
# 2250
template< class , class > static __failure_type _S_test(...); 
# 2252
}; 
# 2254
template< class _MemPtr, class _Arg> 
# 2255
struct __result_of_memobj_deref : private __result_of_memobj_deref_impl { 
# 2258
typedef __decltype((_S_test< _MemPtr, _Arg> (0))) type; 
# 2259
}; 
# 2261
template< class _MemPtr, class _Arg> struct __result_of_memobj; 
# 2264
template< class _Res, class _Class, class _Arg> 
# 2265
struct __result_of_memobj< _Res (_Class::*), _Arg>  { 
# 2267
typedef __remove_cvref_t< _Arg>  _Argval; 
# 2268
typedef _Res (_Class::*_MemPtr); 
# 2273
typedef typename conditional< __or_< is_same< _Argval, _Class> , is_base_of< _Class, _Argval> > ::value, __result_of_memobj_ref< _MemPtr, _Arg> , __result_of_memobj_deref< _MemPtr, _Arg> > ::type::type type; 
# 2274
}; 
# 2276
template< class _MemPtr, class _Arg, class ..._Args> struct __result_of_memfun; 
# 2279
template< class _Res, class _Class, class _Arg, class ..._Args> 
# 2280
struct __result_of_memfun< _Res (_Class::*), _Arg, _Args...>  { 
# 2282
typedef typename remove_reference< _Arg> ::type _Argval; 
# 2283
typedef _Res (_Class::*_MemPtr); 
# 2287
typedef typename conditional< is_base_of< _Class, _Argval> ::value, __result_of_memfun_ref< _MemPtr, _Arg, _Args...> , __result_of_memfun_deref< _MemPtr, _Arg, _Args...> > ::type::type type; 
# 2288
}; 
# 2295
template< class _Tp, class _Up = __remove_cvref_t< _Tp> > 
# 2296
struct __inv_unwrap { 
# 2298
using type = _Tp; 
# 2299
}; 
# 2301
template< class _Tp, class _Up> 
# 2302
struct __inv_unwrap< _Tp, reference_wrapper< _Up> >  { 
# 2304
using type = _Up &; 
# 2305
}; 
# 2307
template< bool , bool , class _Functor, class ..._ArgTypes> 
# 2308
struct __result_of_impl { 
# 2310
typedef __failure_type type; 
# 2311
}; 
# 2313
template< class _MemPtr, class _Arg> 
# 2314
struct __result_of_impl< true, false, _MemPtr, _Arg>  : public __result_of_memobj< typename decay< _MemPtr> ::type, typename __inv_unwrap< _Arg> ::type>  { 
# 2317
}; 
# 2319
template< class _MemPtr, class _Arg, class ..._Args> 
# 2320
struct __result_of_impl< false, true, _MemPtr, _Arg, _Args...>  : public __result_of_memfun< typename decay< _MemPtr> ::type, typename __inv_unwrap< _Arg> ::type, _Args...>  { 
# 2323
}; 
# 2326
struct __result_of_other_impl { 
# 2328
template< class _Fn, class ..._Args> static __result_of_success< __decltype((std::declval< _Fn> ()(std::declval< _Args> ()...))), __invoke_other>  _S_test(int); 
# 2333
template< class ...> static __failure_type _S_test(...); 
# 2335
}; 
# 2337
template< class _Functor, class ..._ArgTypes> 
# 2338
struct __result_of_impl< false, false, _Functor, _ArgTypes...>  : private __result_of_other_impl { 
# 2341
typedef __decltype((_S_test< _Functor, _ArgTypes...> (0))) type; 
# 2342
}; 
# 2345
template< class _Functor, class ..._ArgTypes> 
# 2346
struct __invoke_result : public __result_of_impl< is_member_object_pointer< typename remove_reference< _Functor> ::type> ::value, is_member_function_pointer< typename remove_reference< _Functor> ::type> ::value, _Functor, _ArgTypes...> ::type { 
# 2356
}; 
# 2358
template< class _Functor, class ..._ArgTypes> 
# 2359
struct result_of< _Functor (_ArgTypes ...)>  : public __invoke_result< _Functor, _ArgTypes...>  { 
# 2361
}; 
# 2365
template< size_t _Len, size_t _Align = __alignof__(typename __aligned_storage_msa< _Len> ::__type)> using aligned_storage_t = typename aligned_storage< _Len, _Align> ::type; 
# 2369
template< size_t _Len, class ..._Types> using aligned_union_t = typename aligned_union< _Len, _Types...> ::type; 
# 2373
template< class _Tp> using decay_t = typename decay< _Tp> ::type; 
# 2377
template< bool _Cond, class _Tp = void> using enable_if_t = typename enable_if< _Cond, _Tp> ::type; 
# 2381
template< bool _Cond, class _Iftrue, class _Iffalse> using conditional_t = typename conditional< _Cond, _Iftrue, _Iffalse> ::type; 
# 2385
template< class ..._Tp> using common_type_t = typename common_type< _Tp...> ::type; 
# 2389
template< class _Tp> using underlying_type_t = typename underlying_type< _Tp> ::type; 
# 2393
template< class _Tp> using result_of_t = typename result_of< _Tp> ::type; 
# 2398
template< bool _Cond, class _Tp = void> using __enable_if_t = typename enable_if< _Cond, _Tp> ::type; 
# 2402
template< class ...> using __void_t = void; 
# 2407
template< class ...> using void_t = void; 
# 2411
template< class _Default, class _AlwaysVoid, 
# 2412
template< class ...>  class _Op, class ..._Args> 
# 2413
struct __detector { 
# 2415
using value_t = false_type; 
# 2416
using type = _Default; 
# 2417
}; 
# 2420
template< class _Default, template< class ...>  class _Op, class ...
# 2421
_Args> 
# 2422
struct __detector< _Default, __void_t< _Op< _Args...> > , _Op, _Args...>  { 
# 2424
using value_t = true_type; 
# 2425
using type = _Op< _Args...> ; 
# 2426
}; 
# 2429
template< class _Default, template< class ...>  class _Op, class ...
# 2430
_Args> using __detected_or = __detector< _Default, void, _Op, _Args...> ; 
# 2434
template< class _Default, template< class ...>  class _Op, class ...
# 2435
_Args> using __detected_or_t = typename __detector< _Default, void, _Op, _Args...> ::type; 
# 2455 "/usr/include/c++/9/type_traits" 3
template< class _Tp> struct __is_swappable; 
# 2458
template< class _Tp> struct __is_nothrow_swappable; 
# 2461
template< class ..._Elements> class tuple; 
# 2464
template< class > 
# 2465
struct __is_tuple_like_impl : public false_type { 
# 2466
}; 
# 2468
template< class ..._Tps> 
# 2469
struct __is_tuple_like_impl< tuple< _Tps...> >  : public true_type { 
# 2470
}; 
# 2473
template< class _Tp> 
# 2474
struct __is_tuple_like : public __is_tuple_like_impl< __remove_cvref_t< _Tp> > ::type { 
# 2476
}; 
# 2478
template< class _Tp> inline typename enable_if< __and_< __not_< __is_tuple_like< _Tp> > , is_move_constructible< _Tp> , is_move_assignable< _Tp> > ::value> ::type swap(_Tp &, _Tp &) noexcept(__and_< is_nothrow_move_constructible< _Tp> , is_nothrow_move_assignable< _Tp> > ::value); 
# 2487
template< class _Tp, size_t _Nm> inline typename enable_if< __is_swappable< _Tp> ::value> ::type swap(_Tp (& __a)[_Nm], _Tp (& __b)[_Nm]) noexcept(__is_nothrow_swappable< _Tp> ::value); 
# 2493
namespace __swappable_details { 
# 2494
using std::swap;
# 2496
struct __do_is_swappable_impl { 
# 2498
template< class _Tp, class 
# 2499
 = __decltype((swap(std::declval< _Tp &> (), std::declval< _Tp &> ())))> static true_type 
# 2498
__test(int); 
# 2502
template< class > static false_type __test(...); 
# 2504
}; 
# 2506
struct __do_is_nothrow_swappable_impl { 
# 2508
template< class _Tp> static __bool_constant< noexcept(swap(std::declval< _Tp &> (), std::declval< _Tp &> ()))>  __test(int); 
# 2513
template< class > static false_type __test(...); 
# 2515
}; 
# 2517
}
# 2519
template< class _Tp> 
# 2520
struct __is_swappable_impl : public __swappable_details::__do_is_swappable_impl { 
# 2523
typedef __decltype((__test< _Tp> (0))) type; 
# 2524
}; 
# 2526
template< class _Tp> 
# 2527
struct __is_nothrow_swappable_impl : public __swappable_details::__do_is_nothrow_swappable_impl { 
# 2530
typedef __decltype((__test< _Tp> (0))) type; 
# 2531
}; 
# 2533
template< class _Tp> 
# 2534
struct __is_swappable : public __is_swappable_impl< _Tp> ::type { 
# 2536
}; 
# 2538
template< class _Tp> 
# 2539
struct __is_nothrow_swappable : public __is_nothrow_swappable_impl< _Tp> ::type { 
# 2541
}; 
# 2548
template< class _Tp> 
# 2549
struct is_swappable : public __is_swappable_impl< _Tp> ::type { 
# 2551
}; 
# 2554
template< class _Tp> 
# 2555
struct is_nothrow_swappable : public __is_nothrow_swappable_impl< _Tp> ::type { 
# 2557
}; 
# 2561
template< class _Tp> constexpr bool 
# 2562
is_swappable_v = (is_swappable< _Tp> ::value); 
# 2566
template< class _Tp> constexpr bool 
# 2567
is_nothrow_swappable_v = (is_nothrow_swappable< _Tp> ::value); 
# 2571
namespace __swappable_with_details { 
# 2572
using std::swap;
# 2574
struct __do_is_swappable_with_impl { 
# 2576
template< class _Tp, class _Up, class 
# 2577
 = __decltype((swap(std::declval< _Tp> (), std::declval< _Up> ()))), class 
# 2579
 = __decltype((swap(std::declval< _Up> (), std::declval< _Tp> ())))> static true_type 
# 2576
__test(int); 
# 2582
template< class , class > static false_type __test(...); 
# 2584
}; 
# 2586
struct __do_is_nothrow_swappable_with_impl { 
# 2588
template< class _Tp, class _Up> static __bool_constant< noexcept(swap(std::declval< _Tp> (), std::declval< _Up> ())) && noexcept(swap(std::declval< _Up> (), std::declval< _Tp> ()))>  __test(int); 
# 2595
template< class , class > static false_type __test(...); 
# 2597
}; 
# 2599
}
# 2601
template< class _Tp, class _Up> 
# 2602
struct __is_swappable_with_impl : public __swappable_with_details::__do_is_swappable_with_impl { 
# 2605
typedef __decltype((__test< _Tp, _Up> (0))) type; 
# 2606
}; 
# 2609
template< class _Tp> 
# 2610
struct __is_swappable_with_impl< _Tp &, _Tp &>  : public __swappable_details::__do_is_swappable_impl { 
# 2613
typedef __decltype((__test< _Tp &> (0))) type; 
# 2614
}; 
# 2616
template< class _Tp, class _Up> 
# 2617
struct __is_nothrow_swappable_with_impl : public __swappable_with_details::__do_is_nothrow_swappable_with_impl { 
# 2620
typedef __decltype((__test< _Tp, _Up> (0))) type; 
# 2621
}; 
# 2624
template< class _Tp> 
# 2625
struct __is_nothrow_swappable_with_impl< _Tp &, _Tp &>  : public __swappable_details::__do_is_nothrow_swappable_impl { 
# 2628
typedef __decltype((__test< _Tp &> (0))) type; 
# 2629
}; 
# 2632
template< class _Tp, class _Up> 
# 2633
struct is_swappable_with : public __is_swappable_with_impl< _Tp, _Up> ::type { 
# 2635
}; 
# 2638
template< class _Tp, class _Up> 
# 2639
struct is_nothrow_swappable_with : public __is_nothrow_swappable_with_impl< _Tp, _Up> ::type { 
# 2641
}; 
# 2645
template< class _Tp, class _Up> constexpr bool 
# 2646
is_swappable_with_v = (is_swappable_with< _Tp, _Up> ::value); 
# 2650
template< class _Tp, class _Up> constexpr bool 
# 2651
is_nothrow_swappable_with_v = (is_nothrow_swappable_with< _Tp, _Up> ::value); 
# 2660
template< class _Result, class _Ret, bool 
# 2661
 = is_void< _Ret> ::value, class  = void> 
# 2662
struct __is_invocable_impl : public false_type { }; 
# 2665
template< class _Result, class _Ret> 
# 2666
struct __is_invocable_impl< _Result, _Ret, true, __void_t< typename _Result::type> >  : public true_type { 
# 2670
}; 
# 2672
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wctor-dtor-privacy"
# 2675
template< class _Result, class _Ret> 
# 2676
struct __is_invocable_impl< _Result, _Ret, false, __void_t< typename _Result::type> >  { 
# 2683
private: static typename _Result::type _S_get(); 
# 2685
template< class _Tp> static void _S_conv(_Tp); 
# 2689
template< class _Tp, class  = __decltype((_S_conv< _Tp> ((_S_get)())))> static true_type _S_test(int); 
# 2693
template< class _Tp> static false_type _S_test(...); 
# 2698
public: using type = __decltype((_S_test< _Ret> (1))); 
# 2699
}; 
#pragma GCC diagnostic pop
# 2702
template< class _Fn, class ..._ArgTypes> 
# 2703
struct __is_invocable : public __is_invocable_impl< __invoke_result< _Fn, _ArgTypes...> , void> ::type { 
# 2705
}; 
# 2707
template< class _Fn, class _Tp, class ..._Args> constexpr bool 
# 2708
__call_is_nt(__invoke_memfun_ref) 
# 2709
{ 
# 2710
using _Up = typename __inv_unwrap< _Tp> ::type; 
# 2711
return noexcept((std::declval< typename __inv_unwrap< _Tp> ::type> ().*std::declval< _Fn> ())(std::declval< _Args> ()...)); 
# 2713
} 
# 2715
template< class _Fn, class _Tp, class ..._Args> constexpr bool 
# 2716
__call_is_nt(__invoke_memfun_deref) 
# 2717
{ 
# 2718
return noexcept(((*std::declval< _Tp> ()).*std::declval< _Fn> ())(std::declval< _Args> ()...)); 
# 2720
} 
# 2722
template< class _Fn, class _Tp> constexpr bool 
# 2723
__call_is_nt(__invoke_memobj_ref) 
# 2724
{ 
# 2725
using _Up = typename __inv_unwrap< _Tp> ::type; 
# 2726
return noexcept((std::declval< typename __inv_unwrap< _Tp> ::type> ().*std::declval< _Fn> ())); 
# 2727
} 
# 2729
template< class _Fn, class _Tp> constexpr bool 
# 2730
__call_is_nt(__invoke_memobj_deref) 
# 2731
{ 
# 2732
return noexcept(((*std::declval< _Tp> ()).*std::declval< _Fn> ())); 
# 2733
} 
# 2735
template< class _Fn, class ..._Args> constexpr bool 
# 2736
__call_is_nt(__invoke_other) 
# 2737
{ 
# 2738
return noexcept(std::declval< _Fn> ()(std::declval< _Args> ()...)); 
# 2739
} 
# 2741
template< class _Result, class _Fn, class ..._Args> 
# 2742
struct __call_is_nothrow : public __bool_constant< std::__call_is_nt< _Fn, _Args...> (typename _Result::__invoke_type{})>  { 
# 2746
}; 
# 2748
template< class _Fn, class ..._Args> using __call_is_nothrow_ = __call_is_nothrow< __invoke_result< _Fn, _Args...> , _Fn, _Args...> ; 
# 2753
template< class _Fn, class ..._Args> 
# 2754
struct __is_nothrow_invocable : public __and_< __is_invocable< _Fn, _Args...> , __call_is_nothrow_< _Fn, _Args...> > ::type { 
# 2757
}; 
# 2759
struct __nonesuch { 
# 2760
__nonesuch() = delete;
# 2761
~__nonesuch() = delete;
# 2762
__nonesuch(const __nonesuch &) = delete;
# 2763
void operator=(const __nonesuch &) = delete;
# 2764
}; 
# 3097 "/usr/include/c++/9/type_traits" 3
}
# 57 "/usr/include/c++/9/bits/move.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 72 "/usr/include/c++/9/bits/move.h" 3
template< class _Tp> constexpr _Tp &&
# 74
forward(typename remove_reference< _Tp> ::type &__t) noexcept 
# 75
{ return static_cast< _Tp &&>(__t); } 
# 83
template< class _Tp> constexpr _Tp &&
# 85
forward(typename remove_reference< _Tp> ::type &&__t) noexcept 
# 86
{ 
# 87
static_assert((!std::is_lvalue_reference< _Tp> ::value), "template argument substituting _Tp is an lvalue reference type");
# 89
return static_cast< _Tp &&>(__t); 
# 90
} 
# 97
template< class _Tp> constexpr typename remove_reference< _Tp> ::type &&
# 99
move(_Tp &&__t) noexcept 
# 100
{ return static_cast< typename remove_reference< _Tp> ::type &&>(__t); } 
# 103
template< class _Tp> 
# 104
struct __move_if_noexcept_cond : public __and_< __not_< is_nothrow_move_constructible< _Tp> > , is_copy_constructible< _Tp> > ::type { 
# 106
}; 
# 116 "/usr/include/c++/9/bits/move.h" 3
template< class _Tp> constexpr typename conditional< __move_if_noexcept_cond< _Tp> ::value, const _Tp &, _Tp &&> ::type 
# 119
move_if_noexcept(_Tp &__x) noexcept 
# 120
{ return std::move(__x); } 
# 136 "/usr/include/c++/9/bits/move.h" 3
template< class _Tp> inline _Tp *
# 138
addressof(_Tp &__r) noexcept 
# 139
{ return std::__addressof(__r); } 
# 143
template < typename _Tp >
    const _Tp * addressof ( const _Tp && ) = delete;
# 147
template< class _Tp, class _Up = _Tp> inline _Tp 
# 149
__exchange(_Tp &__obj, _Up &&__new_val) 
# 150
{ 
# 151
_Tp __old_val = std::move(__obj); 
# 152
__obj = std::forward< _Up> (__new_val); 
# 153
return __old_val; 
# 154
} 
# 176 "/usr/include/c++/9/bits/move.h" 3
template< class _Tp> inline typename enable_if< __and_< __not_< __is_tuple_like< _Tp> > , is_move_constructible< _Tp> , is_move_assignable< _Tp> > ::value> ::type 
# 182
swap(_Tp &__a, _Tp &__b) noexcept(__and_< is_nothrow_move_constructible< _Tp> , is_nothrow_move_assignable< _Tp> > ::value) 
# 189
{ 
# 193
_Tp __tmp = std::move(__a); 
# 194
__a = std::move(__b); 
# 195
__b = std::move(__tmp); 
# 196
} 
# 201
template< class _Tp, size_t _Nm> inline typename enable_if< __is_swappable< _Tp> ::value> ::type 
# 205
swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm]) noexcept(__is_nothrow_swappable< _Tp> ::value) 
# 211
{ 
# 212
for (size_t __n = (0); __n < _Nm; ++__n) { 
# 213
swap(__a[__n], __b[__n]); }  
# 214
} 
# 218
}
# 65 "/usr/include/c++/9/bits/stl_pair.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 76 "/usr/include/c++/9/bits/stl_pair.h" 3
struct piecewise_construct_t { explicit piecewise_construct_t() = default;}; 
# 79
constexpr piecewise_construct_t piecewise_construct = piecewise_construct_t(); 
# 83
template< class ...> class tuple; 
# 86
template< size_t ...> struct _Index_tuple; 
# 94
template< bool , class _T1, class _T2> 
# 95
struct _PCC { 
# 97
template< class _U1, class _U2> static constexpr bool 
# 98
_ConstructiblePair() 
# 99
{ 
# 100
return __and_< is_constructible< _T1, const _U1 &> , is_constructible< _T2, const _U2 &> > ::value; 
# 102
} 
# 104
template< class _U1, class _U2> static constexpr bool 
# 105
_ImplicitlyConvertiblePair() 
# 106
{ 
# 107
return __and_< is_convertible< const _U1 &, _T1> , is_convertible< const _U2 &, _T2> > ::value; 
# 109
} 
# 111
template< class _U1, class _U2> static constexpr bool 
# 112
_MoveConstructiblePair() 
# 113
{ 
# 114
return __and_< is_constructible< _T1, _U1 &&> , is_constructible< _T2, _U2 &&> > ::value; 
# 116
} 
# 118
template< class _U1, class _U2> static constexpr bool 
# 119
_ImplicitlyMoveConvertiblePair() 
# 120
{ 
# 121
return __and_< is_convertible< _U1 &&, _T1> , is_convertible< _U2 &&, _T2> > ::value; 
# 123
} 
# 125
template< bool __implicit, class _U1, class _U2> static constexpr bool 
# 126
_CopyMovePair() 
# 127
{ 
# 128
using __do_converts = __and_< is_convertible< const _U1 &, _T1> , is_convertible< _U2 &&, _T2> > ; 
# 130
using __converts = typename conditional< __implicit, __and_< is_convertible< const _U1 &, _T1> , is_convertible< _U2 &&, _T2> > , __not_< __and_< is_convertible< const _U1 &, _T1> , is_convertible< _U2 &&, _T2> > > > ::type; 
# 133
return __and_< is_constructible< _T1, const _U1 &> , is_constructible< _T2, _U2 &&> , typename conditional< __implicit, __and_< is_convertible< const _U1 &, _T1> , is_convertible< _U2 &&, _T2> > , __not_< __and_< is_convertible< const _U1 &, _T1> , is_convertible< _U2 &&, _T2> > > > ::type> ::value; 
# 137
} 
# 139
template< bool __implicit, class _U1, class _U2> static constexpr bool 
# 140
_MoveCopyPair() 
# 141
{ 
# 142
using __do_converts = __and_< is_convertible< _U1 &&, _T1> , is_convertible< const _U2 &, _T2> > ; 
# 144
using __converts = typename conditional< __implicit, __and_< is_convertible< _U1 &&, _T1> , is_convertible< const _U2 &, _T2> > , __not_< __and_< is_convertible< _U1 &&, _T1> , is_convertible< const _U2 &, _T2> > > > ::type; 
# 147
return __and_< is_constructible< _T1, _U1 &&> , is_constructible< _T2, const _U2 &&> , typename conditional< __implicit, __and_< is_convertible< _U1 &&, _T1> , is_convertible< const _U2 &, _T2> > , __not_< __and_< is_convertible< _U1 &&, _T1> , is_convertible< const _U2 &, _T2> > > > ::type> ::value; 
# 151
} 
# 152
}; 
# 154
template< class _T1, class _T2> 
# 155
struct _PCC< false, _T1, _T2>  { 
# 157
template< class _U1, class _U2> static constexpr bool 
# 158
_ConstructiblePair() 
# 159
{ 
# 160
return false; 
# 161
} 
# 163
template< class _U1, class _U2> static constexpr bool 
# 164
_ImplicitlyConvertiblePair() 
# 165
{ 
# 166
return false; 
# 167
} 
# 169
template< class _U1, class _U2> static constexpr bool 
# 170
_MoveConstructiblePair() 
# 171
{ 
# 172
return false; 
# 173
} 
# 175
template< class _U1, class _U2> static constexpr bool 
# 176
_ImplicitlyMoveConvertiblePair() 
# 177
{ 
# 178
return false; 
# 179
} 
# 180
}; 
# 185
struct __nonesuch_no_braces : public __nonesuch { 
# 186
explicit __nonesuch_no_braces(const __nonesuch &) = delete;
# 187
}; 
# 190
template< class _U1, class _U2> class __pair_base { 
# 193
template< class _T1, class _T2> friend struct pair; 
# 194
__pair_base() = default;
# 195
~__pair_base() = default;
# 196
__pair_base(const __pair_base &) = default;
# 197
__pair_base &operator=(const __pair_base &) = delete;
# 199
}; 
# 207
template< class _T1, class _T2> 
# 208
struct pair : private __pair_base< _T1, _T2>  { 
# 211
typedef _T1 first_type; 
# 212
typedef _T2 second_type; 
# 214
_T1 first; 
# 215
_T2 second; 
# 222
template< class _U1 = _T1, class 
# 223
_U2 = _T2, typename enable_if< __and_< __is_implicitly_default_constructible< _U1> , __is_implicitly_default_constructible< _U2> > ::value, bool> ::type 
# 227
 = true> constexpr 
# 229
pair() : first(), second() 
# 230
{ } 
# 233
template< class _U1 = _T1, class 
# 234
_U2 = _T2, typename enable_if< __and_< is_default_constructible< _U1> , is_default_constructible< _U2> , __not_< __and_< __is_implicitly_default_constructible< _U1> , __is_implicitly_default_constructible< _U2> > > > ::value, bool> ::type 
# 241
 = false> constexpr explicit 
# 242
pair() : first(), second() 
# 243
{ } 
# 252 "/usr/include/c++/9/bits/stl_pair.h" 3
using _PCCP = _PCC< true, _T1, _T2> ; 
# 254
template< class _U1 = _T1, class _U2 = _T2, typename enable_if< _PCC< true, _T1, _T2> ::template _ConstructiblePair< _U1, _U2> () && _PCC< true, _T1, _T2> ::template _ImplicitlyConvertiblePair< _U1, _U2> (), bool> ::type 
# 259
 = true> constexpr 
# 260
pair(const _T1 &__a, const _T2 &__b) : first(__a), second(__b) 
# 261
{ } 
# 263
template< class _U1 = _T1, class _U2 = _T2, typename enable_if< _PCC< true, _T1, _T2> ::template _ConstructiblePair< _U1, _U2> () && (!_PCC< true, _T1, _T2> ::template _ImplicitlyConvertiblePair< _U1, _U2> ()), bool> ::type 
# 268
 = false> constexpr explicit 
# 269
pair(const _T1 &__a, const _T2 &__b) : first(__a), second(__b) 
# 270
{ } 
# 280 "/usr/include/c++/9/bits/stl_pair.h" 3
template< class _U1, class _U2> using _PCCFP = _PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ; 
# 285
template< class _U1, class _U2, typename enable_if< _PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ::template _ConstructiblePair< _U1, _U2> () && _PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ::template _ImplicitlyConvertiblePair< _U1, _U2> (), bool> ::type 
# 290
 = true> constexpr 
# 291
pair(const std::pair< _U1, _U2>  &__p) : first((__p.first)), second((__p.second)) 
# 292
{ } 
# 294
template< class _U1, class _U2, typename enable_if< _PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ::template _ConstructiblePair< _U1, _U2> () && (!_PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ::template _ImplicitlyConvertiblePair< _U1, _U2> ()), bool> ::type 
# 299
 = false> constexpr explicit 
# 300
pair(const std::pair< _U1, _U2>  &__p) : first((__p.first)), second((__p.second)) 
# 301
{ } 
# 303
constexpr pair(const pair &) = default;
# 304
constexpr pair(pair &&) = default;
# 307
template< class _U1, typename enable_if< _PCC< true, _T1, _T2> ::template _MoveCopyPair< true, _U1, _T2> (), bool> ::type 
# 310
 = true> constexpr 
# 311
pair(_U1 &&__x, const _T2 &__y) : first(std::forward< _U1> (__x)), second(__y) 
# 312
{ } 
# 314
template< class _U1, typename enable_if< _PCC< true, _T1, _T2> ::template _MoveCopyPair< false, _U1, _T2> (), bool> ::type 
# 317
 = false> constexpr explicit 
# 318
pair(_U1 &&__x, const _T2 &__y) : first(std::forward< _U1> (__x)), second(__y) 
# 319
{ } 
# 321
template< class _U2, typename enable_if< _PCC< true, _T1, _T2> ::template _CopyMovePair< true, _T1, _U2> (), bool> ::type 
# 324
 = true> constexpr 
# 325
pair(const _T1 &__x, _U2 &&__y) : first(__x), second(std::forward< _U2> (__y)) 
# 326
{ } 
# 328
template< class _U2, typename enable_if< _PCC< true, _T1, _T2> ::template _CopyMovePair< false, _T1, _U2> (), bool> ::type 
# 331
 = false> explicit 
# 332
pair(const _T1 &__x, _U2 &&__y) : first(__x), second(std::forward< _U2> (__y)) 
# 333
{ } 
# 335
template< class _U1, class _U2, typename enable_if< _PCC< true, _T1, _T2> ::template _MoveConstructiblePair< _U1, _U2> () && _PCC< true, _T1, _T2> ::template _ImplicitlyMoveConvertiblePair< _U1, _U2> (), bool> ::type 
# 340
 = true> constexpr 
# 341
pair(_U1 &&__x, _U2 &&__y) : first(std::forward< _U1> (__x)), second(std::forward< _U2> (__y)) 
# 342
{ } 
# 344
template< class _U1, class _U2, typename enable_if< _PCC< true, _T1, _T2> ::template _MoveConstructiblePair< _U1, _U2> () && (!_PCC< true, _T1, _T2> ::template _ImplicitlyMoveConvertiblePair< _U1, _U2> ()), bool> ::type 
# 349
 = false> constexpr explicit 
# 350
pair(_U1 &&__x, _U2 &&__y) : first(std::forward< _U1> (__x)), second(std::forward< _U2> (__y)) 
# 351
{ } 
# 354
template< class _U1, class _U2, typename enable_if< _PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ::template _MoveConstructiblePair< _U1, _U2> () && _PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ::template _ImplicitlyMoveConvertiblePair< _U1, _U2> (), bool> ::type 
# 359
 = true> constexpr 
# 360
pair(std::pair< _U1, _U2>  &&__p) : first(std::forward< _U1> ((__p.first))), second(std::forward< _U2> ((__p.second))) 
# 362
{ } 
# 364
template< class _U1, class _U2, typename enable_if< _PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ::template _MoveConstructiblePair< _U1, _U2> () && (!_PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ::template _ImplicitlyMoveConvertiblePair< _U1, _U2> ()), bool> ::type 
# 369
 = false> constexpr explicit 
# 370
pair(std::pair< _U1, _U2>  &&__p) : first(std::forward< _U1> ((__p.first))), second(std::forward< _U2> ((__p.second))) 
# 372
{ } 
# 374
template< class ..._Args1, class ..._Args2> pair(std::piecewise_construct_t, tuple< _Args1...> , tuple< _Args2...> ); 
# 378
pair &operator=(typename conditional< __and_< is_copy_assignable< _T1> , is_copy_assignable< _T2> > ::value, const pair &, const std::__nonesuch_no_braces &> ::type 
# 381
__p) 
# 382
{ 
# 383
(first) = (__p.first); 
# 384
(second) = (__p.second); 
# 385
return *this; 
# 386
} 
# 389
pair &operator=(typename conditional< __and_< is_move_assignable< _T1> , is_move_assignable< _T2> > ::value, pair &&, std::__nonesuch_no_braces &&> ::type 
# 392
__p) noexcept(__and_< is_nothrow_move_assignable< _T1> , is_nothrow_move_assignable< _T2> > ::value) 
# 395
{ 
# 396
(first) = std::forward< first_type> ((__p.first)); 
# 397
(second) = std::forward< second_type> ((__p.second)); 
# 398
return *this; 
# 399
} 
# 401
template< class _U1, class _U2> typename enable_if< __and_< is_assignable< _T1 &, const _U1 &> , is_assignable< _T2 &, const _U2 &> > ::value, pair &> ::type 
# 405
operator=(const std::pair< _U1, _U2>  &__p) 
# 406
{ 
# 407
(first) = (__p.first); 
# 408
(second) = (__p.second); 
# 409
return *this; 
# 410
} 
# 412
template< class _U1, class _U2> typename enable_if< __and_< is_assignable< _T1 &, _U1 &&> , is_assignable< _T2 &, _U2 &&> > ::value, pair &> ::type 
# 416
operator=(std::pair< _U1, _U2>  &&__p) 
# 417
{ 
# 418
(first) = std::forward< _U1> ((__p.first)); 
# 419
(second) = std::forward< _U2> ((__p.second)); 
# 420
return *this; 
# 421
} 
# 424
void swap(pair &__p) noexcept(__and_< __is_nothrow_swappable< _T1> , __is_nothrow_swappable< _T2> > ::value) 
# 427
{ 
# 428
using std::swap;
# 429
swap(first, __p.first); 
# 430
swap(second, __p.second); 
# 431
} 
# 434
private: template< class ..._Args1, std::size_t ..._Indexes1, class ...
# 435
_Args2, std::size_t ..._Indexes2> 
# 434
pair(tuple< _Args1...>  &, tuple< _Args2...>  &, _Index_tuple< _Indexes1...> , _Index_tuple< _Indexes2...> ); 
# 439
}; 
# 446
template< class _T1, class _T2> constexpr bool 
# 448
operator==(const pair< _T1, _T2>  &__x, const pair< _T1, _T2>  &__y) 
# 449
{ return ((__x.first) == (__y.first)) && ((__x.second) == (__y.second)); } 
# 452
template< class _T1, class _T2> constexpr bool 
# 454
operator<(const pair< _T1, _T2>  &__x, const pair< _T1, _T2>  &__y) 
# 455
{ return ((__x.first) < (__y.first)) || ((!((__y.first) < (__x.first))) && ((__x.second) < (__y.second))); 
# 456
} 
# 459
template< class _T1, class _T2> constexpr bool 
# 461
operator!=(const pair< _T1, _T2>  &__x, const pair< _T1, _T2>  &__y) 
# 462
{ return !(__x == __y); } 
# 465
template< class _T1, class _T2> constexpr bool 
# 467
operator>(const pair< _T1, _T2>  &__x, const pair< _T1, _T2>  &__y) 
# 468
{ return __y < __x; } 
# 471
template< class _T1, class _T2> constexpr bool 
# 473
operator<=(const pair< _T1, _T2>  &__x, const pair< _T1, _T2>  &__y) 
# 474
{ return !(__y < __x); } 
# 477
template< class _T1, class _T2> constexpr bool 
# 479
operator>=(const pair< _T1, _T2>  &__x, const pair< _T1, _T2>  &__y) 
# 480
{ return !(__x < __y); } 
# 486
template< class _T1, class _T2> inline typename enable_if< __and_< __is_swappable< _T1> , __is_swappable< _T2> > ::value> ::type 
# 495
swap(pair< _T1, _T2>  &__x, pair< _T1, _T2>  &__y) noexcept(noexcept(__x.swap(__y))) 
# 497
{ __x.swap(__y); } 
# 500
template < typename _T1, typename _T2 >
    typename enable_if < ! __and_ < __is_swappable < _T1 >,
          __is_swappable < _T2 > > :: value > :: type
    swap ( pair < _T1, _T2 > &, pair < _T1, _T2 > & ) = delete;
# 521 "/usr/include/c++/9/bits/stl_pair.h" 3
template< class _T1, class _T2> constexpr pair< typename __decay_and_strip< _T1> ::__type, typename __decay_and_strip< _T2> ::__type>  
# 524
make_pair(_T1 &&__x, _T2 &&__y) 
# 525
{ 
# 526
typedef typename __decay_and_strip< _T1> ::__type __ds_type1; 
# 527
typedef typename __decay_and_strip< _T2> ::__type __ds_type2; 
# 528
typedef pair< typename __decay_and_strip< _T1> ::__type, typename __decay_and_strip< _T2> ::__type>  __pair_type; 
# 529
return __pair_type(std::forward< _T1> (__x), std::forward< _T2> (__y)); 
# 530
} 
# 541 "/usr/include/c++/9/bits/stl_pair.h" 3
}
# 70 "/usr/include/c++/9/bits/stl_iterator_base_types.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 89 "/usr/include/c++/9/bits/stl_iterator_base_types.h" 3
struct input_iterator_tag { }; 
# 92
struct output_iterator_tag { }; 
# 95
struct forward_iterator_tag : public input_iterator_tag { }; 
# 99
struct bidirectional_iterator_tag : public forward_iterator_tag { }; 
# 103
struct random_access_iterator_tag : public bidirectional_iterator_tag { }; 
# 116 "/usr/include/c++/9/bits/stl_iterator_base_types.h" 3
template< class _Category, class _Tp, class _Distance = ptrdiff_t, class 
# 117
_Pointer = _Tp *, class _Reference = _Tp &> 
# 118
struct iterator { 
# 121
typedef _Category iterator_category; 
# 123
typedef _Tp value_type; 
# 125
typedef _Distance difference_type; 
# 127
typedef _Pointer pointer; 
# 129
typedef _Reference reference; 
# 130
}; 
# 143 "/usr/include/c++/9/bits/stl_iterator_base_types.h" 3
template< class _Iterator, class  = __void_t< > > 
# 144
struct __iterator_traits { }; 
# 146
template< class _Iterator> 
# 147
struct __iterator_traits< _Iterator, __void_t< typename _Iterator::iterator_category, typename _Iterator::value_type, typename _Iterator::difference_type, typename _Iterator::pointer, typename _Iterator::reference> >  { 
# 154
typedef typename _Iterator::iterator_category iterator_category; 
# 155
typedef typename _Iterator::value_type value_type; 
# 156
typedef typename _Iterator::difference_type difference_type; 
# 157
typedef typename _Iterator::pointer pointer; 
# 158
typedef typename _Iterator::reference reference; 
# 159
}; 
# 161
template< class _Iterator> 
# 162
struct iterator_traits : public __iterator_traits< _Iterator>  { 
# 163
}; 
# 177 "/usr/include/c++/9/bits/stl_iterator_base_types.h" 3
template< class _Tp> 
# 178
struct iterator_traits< _Tp *>  { 
# 180
typedef random_access_iterator_tag iterator_category; 
# 181
typedef _Tp value_type; 
# 182
typedef ptrdiff_t difference_type; 
# 183
typedef _Tp *pointer; 
# 184
typedef _Tp &reference; 
# 185
}; 
# 188
template< class _Tp> 
# 189
struct iterator_traits< const _Tp *>  { 
# 191
typedef random_access_iterator_tag iterator_category; 
# 192
typedef _Tp value_type; 
# 193
typedef ptrdiff_t difference_type; 
# 194
typedef const _Tp *pointer; 
# 195
typedef const _Tp &reference; 
# 196
}; 
# 202
template< class _Iter> constexpr typename iterator_traits< _Iter> ::iterator_category 
# 205
__iterator_category(const _Iter &) 
# 206
{ return typename iterator_traits< _Iter> ::iterator_category(); } 
# 231 "/usr/include/c++/9/bits/stl_iterator_base_types.h" 3
template< class _InIter> using _RequireInputIter = typename enable_if< is_convertible< typename iterator_traits< _InIter> ::iterator_category, input_iterator_tag> ::value> ::type; 
# 239
}
# 67 "/usr/include/c++/9/bits/stl_iterator_base_funcs.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 73
template< class > struct _List_iterator; 
# 74
template< class > struct _List_const_iterator; 
# 77
template< class _InputIterator> constexpr typename iterator_traits< _InputIterator> ::difference_type 
# 80
__distance(_InputIterator __first, _InputIterator __last, input_iterator_tag) 
# 82
{ 
# 86
typename iterator_traits< _InputIterator> ::difference_type __n = (0); 
# 87
while (__first != __last) 
# 88
{ 
# 89
++__first; 
# 90
++__n; 
# 91
}  
# 92
return __n; 
# 93
} 
# 95
template< class _RandomAccessIterator> constexpr typename iterator_traits< _RandomAccessIterator> ::difference_type 
# 98
__distance(_RandomAccessIterator __first, _RandomAccessIterator __last, random_access_iterator_tag) 
# 100
{ 
# 104
return __last - __first; 
# 105
} 
# 109
template< class _Tp> ptrdiff_t __distance(_List_iterator< _Tp> , _List_iterator< _Tp> , input_iterator_tag); 
# 115
template< class _Tp> ptrdiff_t __distance(_List_const_iterator< _Tp> , _List_const_iterator< _Tp> , input_iterator_tag); 
# 135 "/usr/include/c++/9/bits/stl_iterator_base_funcs.h" 3
template< class _InputIterator> inline typename iterator_traits< _InputIterator> ::difference_type 
# 138
distance(_InputIterator __first, _InputIterator __last) 
# 139
{ 
# 141
return std::__distance(__first, __last, std::__iterator_category(__first)); 
# 143
} 
# 145
template< class _InputIterator, class _Distance> constexpr void 
# 147
__advance(_InputIterator &__i, _Distance __n, input_iterator_tag) 
# 148
{ 
# 151
; 
# 152
while (__n--) { 
# 153
++__i; }  
# 154
} 
# 156
template< class _BidirectionalIterator, class _Distance> constexpr void 
# 158
__advance(_BidirectionalIterator &__i, _Distance __n, bidirectional_iterator_tag) 
# 160
{ 
# 164
if (__n > 0) { 
# 165
while (__n--) { 
# 166
++__i; }  } else { 
# 168
while (__n++) { 
# 169
--__i; }  }  
# 170
} 
# 172
template< class _RandomAccessIterator, class _Distance> constexpr void 
# 174
__advance(_RandomAccessIterator &__i, _Distance __n, random_access_iterator_tag) 
# 176
{ 
# 180
if (__builtin_constant_p(__n) && (__n == 1)) { 
# 181
++__i; } else { 
# 182
if (__builtin_constant_p(__n) && (__n == (-1))) { 
# 183
--__i; } else { 
# 185
__i += __n; }  }  
# 186
} 
# 200 "/usr/include/c++/9/bits/stl_iterator_base_funcs.h" 3
template< class _InputIterator, class _Distance> inline void 
# 202
advance(_InputIterator &__i, _Distance __n) 
# 203
{ 
# 205
typename iterator_traits< _InputIterator> ::difference_type __d = __n; 
# 206
std::__advance(__i, __d, std::__iterator_category(__i)); 
# 207
} 
# 211
template< class _InputIterator> inline _InputIterator 
# 213
next(_InputIterator __x, typename iterator_traits< _InputIterator> ::difference_type 
# 214
__n = 1) 
# 215
{ 
# 218
std::advance(__x, __n); 
# 219
return __x; 
# 220
} 
# 222
template< class _BidirectionalIterator> inline _BidirectionalIterator 
# 224
prev(_BidirectionalIterator __x, typename iterator_traits< _BidirectionalIterator> ::difference_type 
# 225
__n = 1) 
# 226
{ 
# 230
std::advance(__x, -__n); 
# 231
return __x; 
# 232
} 
# 237
}
# 42 "/usr/include/c++/9/bits/ptr_traits.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 46
class __undefined; 
# 49
template< class _Tp> 
# 50
struct __get_first_arg { 
# 51
using type = __undefined; }; 
# 53
template< template< class , class ...>  class _Template, class _Tp, class ...
# 54
_Types> 
# 55
struct __get_first_arg< _Template< _Tp, _Types...> >  { 
# 56
using type = _Tp; }; 
# 58
template< class _Tp> using __get_first_arg_t = typename __get_first_arg< _Tp> ::type; 
# 62
template< class _Tp, class _Up> 
# 63
struct __replace_first_arg { 
# 64
}; 
# 66
template< template< class , class ...>  class _Template, class _Up, class 
# 67
_Tp, class ..._Types> 
# 68
struct __replace_first_arg< _Template< _Tp, _Types...> , _Up>  { 
# 69
using type = _Template< _Up, _Types...> ; }; 
# 71
template< class _Tp, class _Up> using __replace_first_arg_t = typename __replace_first_arg< _Tp, _Up> ::type; 
# 74
template< class _Tp> using __make_not_void = typename conditional< is_void< _Tp> ::value, __undefined, _Tp> ::type; 
# 82
template< class _Ptr> 
# 83
struct pointer_traits { 
# 87
private: 
# 86
template< class _Tp> using __element_type = typename _Tp::element_type; 
# 89
template< class _Tp> using __difference_type = typename _Tp::difference_type; 
# 92
template< class _Tp, class _Up, class  = void> 
# 93
struct __rebind : public __replace_first_arg< _Tp, _Up>  { }; 
# 95
template< class _Tp, class _Up> 
# 96
struct __rebind< _Tp, _Up, __void_t< typename _Tp::template rebind< _Up> > >  { 
# 97
using type = typename _Tp::template rebind< _Up> ; }; 
# 101
public: using pointer = _Ptr; 
# 104
using element_type = __detected_or_t< __get_first_arg_t< _Ptr> , __element_type, _Ptr> ; 
# 108
using difference_type = __detected_or_t< ptrdiff_t, __difference_type, _Ptr> ; 
# 112
template< class _Up> using rebind = typename __rebind< _Ptr, _Up> ::type; 
# 116
static _Ptr pointer_to(__make_not_void< element_type>  &__e) 
# 117
{ return _Ptr::pointer_to(__e); } 
# 119
static_assert((!is_same< element_type, __undefined> ::value), "pointer type defines element_type or is like SomePointer<T, Args>");
# 121
}; 
# 127
template< class _Tp> 
# 128
struct pointer_traits< _Tp *>  { 
# 131
typedef _Tp *pointer; 
# 133
typedef _Tp element_type; 
# 135
typedef ptrdiff_t difference_type; 
# 137
template< class _Up> using rebind = _Up *; 
# 146
static pointer pointer_to(__make_not_void< element_type>  &__r) noexcept 
# 147
{ return std::addressof(__r); } 
# 148
}; 
# 151
template< class _Ptr, class _Tp> using __ptr_rebind = typename pointer_traits< _Ptr> ::template rebind< _Tp> ; 
# 154
template< class _Tp> constexpr _Tp *
# 156
__to_address(_Tp *__ptr) noexcept 
# 157
{ 
# 158
static_assert((!std::is_function< _Tp> ::value), "not a function pointer");
# 159
return __ptr; 
# 160
} 
# 163
template< class _Ptr> constexpr typename pointer_traits< _Ptr> ::element_type *
# 165
__to_address(const _Ptr &__ptr) 
# 166
{ return std::__to_address(__ptr.operator->()); } 
# 211 "/usr/include/c++/9/bits/ptr_traits.h" 3
}
# 76 "/usr/include/c++/9/bits/stl_iterator.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 104 "/usr/include/c++/9/bits/stl_iterator.h" 3
template< class _Iterator> 
# 105
class reverse_iterator : public iterator< typename iterator_traits< _Iterator> ::iterator_category, typename iterator_traits< _Iterator> ::value_type, typename iterator_traits< _Iterator> ::difference_type, typename iterator_traits< _Iterator> ::pointer, typename iterator_traits< _Iterator> ::reference>  { 
# 113
protected: _Iterator current; 
# 115
typedef iterator_traits< _Iterator>  __traits_type; 
# 118
public: typedef _Iterator iterator_type; 
# 119
typedef typename iterator_traits< _Iterator> ::difference_type difference_type; 
# 120
typedef typename iterator_traits< _Iterator> ::pointer pointer; 
# 121
typedef typename iterator_traits< _Iterator> ::reference reference; 
# 131 "/usr/include/c++/9/bits/stl_iterator.h" 3
reverse_iterator() : current() { } 
# 137
explicit reverse_iterator(iterator_type __x) : current(__x) { } 
# 143
reverse_iterator(const reverse_iterator &__x) : current(__x.current) 
# 144
{ } 
# 147
reverse_iterator &operator=(const reverse_iterator &) = default;
# 154
template< class _Iter> 
# 156
reverse_iterator(const reverse_iterator< _Iter>  &__x) : current(__x.base()) 
# 157
{ } 
# 163
iterator_type base() const 
# 164
{ return current; } 
# 177 "/usr/include/c++/9/bits/stl_iterator.h" 3
reference operator*() const 
# 178
{ 
# 179
_Iterator __tmp = current; 
# 180
return *(--__tmp); 
# 181
} 
# 189
pointer operator->() const 
# 190
{ 
# 193
_Iterator __tmp = current; 
# 194
--__tmp; 
# 195
return _S_to_pointer(__tmp); 
# 196
} 
# 204
reverse_iterator &operator++() 
# 205
{ 
# 206
--(current); 
# 207
return *this; 
# 208
} 
# 216
reverse_iterator operator++(int) 
# 217
{ 
# 218
reverse_iterator __tmp = *this; 
# 219
--(current); 
# 220
return __tmp; 
# 221
} 
# 229
reverse_iterator &operator--() 
# 230
{ 
# 231
++(current); 
# 232
return *this; 
# 233
} 
# 241
reverse_iterator operator--(int) 
# 242
{ 
# 243
reverse_iterator __tmp = *this; 
# 244
++(current); 
# 245
return __tmp; 
# 246
} 
# 254
reverse_iterator operator+(difference_type __n) const 
# 255
{ return ((reverse_iterator)((current) - __n)); } 
# 264
reverse_iterator &operator+=(difference_type __n) 
# 265
{ 
# 266
(current) -= __n; 
# 267
return *this; 
# 268
} 
# 276
reverse_iterator operator-(difference_type __n) const 
# 277
{ return ((reverse_iterator)((current) + __n)); } 
# 286
reverse_iterator &operator-=(difference_type __n) 
# 287
{ 
# 288
(current) += __n; 
# 289
return *this; 
# 290
} 
# 298
reference operator[](difference_type __n) const 
# 299
{ return *((*this) + __n); } 
# 304
private: 
# 302
template< class _Tp> static _Tp *
# 304
_S_to_pointer(_Tp *__p) 
# 305
{ return __p; } 
# 307
template< class _Tp> static pointer 
# 309
_S_to_pointer(_Tp __t) 
# 310
{ return __t.operator->(); } 
# 311
}; 
# 323 "/usr/include/c++/9/bits/stl_iterator.h" 3
template< class _Iterator> inline bool 
# 325
operator==(const reverse_iterator< _Iterator>  &__x, const reverse_iterator< _Iterator>  &
# 326
__y) 
# 327
{ return __x.base() == __y.base(); } 
# 329
template< class _Iterator> inline bool 
# 331
operator<(const reverse_iterator< _Iterator>  &__x, const reverse_iterator< _Iterator>  &
# 332
__y) 
# 333
{ return __y.base() < __x.base(); } 
# 335
template< class _Iterator> inline bool 
# 337
operator!=(const reverse_iterator< _Iterator>  &__x, const reverse_iterator< _Iterator>  &
# 338
__y) 
# 339
{ return !(__x == __y); } 
# 341
template< class _Iterator> inline bool 
# 343
operator>(const reverse_iterator< _Iterator>  &__x, const reverse_iterator< _Iterator>  &
# 344
__y) 
# 345
{ return __y < __x; } 
# 347
template< class _Iterator> inline bool 
# 349
operator<=(const reverse_iterator< _Iterator>  &__x, const reverse_iterator< _Iterator>  &
# 350
__y) 
# 351
{ return !(__y < __x); } 
# 353
template< class _Iterator> inline bool 
# 355
operator>=(const reverse_iterator< _Iterator>  &__x, const reverse_iterator< _Iterator>  &
# 356
__y) 
# 357
{ return !(__x < __y); } 
# 361
template< class _IteratorL, class _IteratorR> inline bool 
# 363
operator==(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 364
__y) 
# 365
{ return __x.base() == __y.base(); } 
# 367
template< class _IteratorL, class _IteratorR> inline bool 
# 369
operator<(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 370
__y) 
# 371
{ return __y.base() < __x.base(); } 
# 373
template< class _IteratorL, class _IteratorR> inline bool 
# 375
operator!=(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 376
__y) 
# 377
{ return !(__x == __y); } 
# 379
template< class _IteratorL, class _IteratorR> inline bool 
# 381
operator>(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 382
__y) 
# 383
{ return __y < __x; } 
# 385
template< class _IteratorL, class _IteratorR> inline bool 
# 387
operator<=(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 388
__y) 
# 389
{ return !(__y < __x); } 
# 391
template< class _IteratorL, class _IteratorR> inline bool 
# 393
operator>=(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 394
__y) 
# 395
{ return !(__x < __y); } 
# 413 "/usr/include/c++/9/bits/stl_iterator.h" 3
template< class _IteratorL, class _IteratorR> inline auto 
# 415
operator-(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 416
__y)->__decltype((__y.base() - __x.base())) 
# 418
{ return __y.base() - __x.base(); } 
# 421
template< class _Iterator> inline reverse_iterator< _Iterator>  
# 423
operator+(typename reverse_iterator< _Iterator> ::difference_type __n, const reverse_iterator< _Iterator>  &
# 424
__x) 
# 425
{ return ((reverse_iterator< _Iterator> )(__x.base() - __n)); } 
# 429
template< class _Iterator> inline reverse_iterator< _Iterator>  
# 431
__make_reverse_iterator(_Iterator __i) 
# 432
{ return ((reverse_iterator< _Iterator> )(__i)); } 
# 440
template< class _Iterator> inline reverse_iterator< _Iterator>  
# 442
make_reverse_iterator(_Iterator __i) 
# 443
{ return ((reverse_iterator< _Iterator> )(__i)); } 
# 448
template< class _Iterator> auto 
# 450
__niter_base(reverse_iterator< _Iterator>  __it)->__decltype((__make_reverse_iterator(__niter_base(__it.base())))) 
# 452
{ return __make_reverse_iterator(__niter_base(__it.base())); } 
# 454
template< class _Iterator> 
# 455
struct __is_move_iterator< reverse_iterator< _Iterator> >  : public std::__is_move_iterator< _Iterator>  { 
# 457
}; 
# 459
template< class _Iterator> auto 
# 461
__miter_base(reverse_iterator< _Iterator>  __it)->__decltype((__make_reverse_iterator(__miter_base(__it.base())))) 
# 463
{ return __make_reverse_iterator(__miter_base(__it.base())); } 
# 477 "/usr/include/c++/9/bits/stl_iterator.h" 3
template< class _Container> 
# 478
class back_insert_iterator : public iterator< output_iterator_tag, void, void, void, void>  { 
# 482
protected: _Container *container; 
# 486
public: typedef _Container container_type; 
# 490
explicit back_insert_iterator(_Container &__x) : container(std::__addressof(__x)) 
# 491
{ } 
# 513 "/usr/include/c++/9/bits/stl_iterator.h" 3
back_insert_iterator &operator=(const typename _Container::value_type &__value) 
# 514
{ 
# 515
(container)->push_back(__value); 
# 516
return *this; 
# 517
} 
# 520
back_insert_iterator &operator=(typename _Container::value_type &&__value) 
# 521
{ 
# 522
(container)->push_back(std::move(__value)); 
# 523
return *this; 
# 524
} 
# 529
back_insert_iterator &operator*() 
# 530
{ return *this; } 
# 534
back_insert_iterator &operator++() 
# 535
{ return *this; } 
# 539
back_insert_iterator operator++(int) 
# 540
{ return *this; } 
# 541
}; 
# 554 "/usr/include/c++/9/bits/stl_iterator.h" 3
template< class _Container> inline back_insert_iterator< _Container>  
# 556
back_inserter(_Container &__x) 
# 557
{ return ((back_insert_iterator< _Container> )(__x)); } 
# 569 "/usr/include/c++/9/bits/stl_iterator.h" 3
template< class _Container> 
# 570
class front_insert_iterator : public iterator< output_iterator_tag, void, void, void, void>  { 
# 574
protected: _Container *container; 
# 578
public: typedef _Container container_type; 
# 581
explicit front_insert_iterator(_Container &__x) : container(std::__addressof(__x)) 
# 582
{ } 
# 604 "/usr/include/c++/9/bits/stl_iterator.h" 3
front_insert_iterator &operator=(const typename _Container::value_type &__value) 
# 605
{ 
# 606
(container)->push_front(__value); 
# 607
return *this; 
# 608
} 
# 611
front_insert_iterator &operator=(typename _Container::value_type &&__value) 
# 612
{ 
# 613
(container)->push_front(std::move(__value)); 
# 614
return *this; 
# 615
} 
# 620
front_insert_iterator &operator*() 
# 621
{ return *this; } 
# 625
front_insert_iterator &operator++() 
# 626
{ return *this; } 
# 630
front_insert_iterator operator++(int) 
# 631
{ return *this; } 
# 632
}; 
# 645 "/usr/include/c++/9/bits/stl_iterator.h" 3
template< class _Container> inline front_insert_iterator< _Container>  
# 647
front_inserter(_Container &__x) 
# 648
{ return ((front_insert_iterator< _Container> )(__x)); } 
# 664 "/usr/include/c++/9/bits/stl_iterator.h" 3
template< class _Container> 
# 665
class insert_iterator : public iterator< output_iterator_tag, void, void, void, void>  { 
# 669
protected: _Container *container; 
# 670
typename _Container::iterator iter; 
# 674
public: typedef _Container container_type; 
# 680
insert_iterator(_Container &__x, typename _Container::iterator __i) : container(std::__addressof(__x)), iter(__i) 
# 681
{ } 
# 716 "/usr/include/c++/9/bits/stl_iterator.h" 3
insert_iterator &operator=(const typename _Container::value_type &__value) 
# 717
{ 
# 718
(iter) = (container)->insert(iter, __value); 
# 719
++(iter); 
# 720
return *this; 
# 721
} 
# 724
insert_iterator &operator=(typename _Container::value_type &&__value) 
# 725
{ 
# 726
(iter) = (container)->insert(iter, std::move(__value)); 
# 727
++(iter); 
# 728
return *this; 
# 729
} 
# 734
insert_iterator &operator*() 
# 735
{ return *this; } 
# 739
insert_iterator &operator++() 
# 740
{ return *this; } 
# 744
insert_iterator &operator++(int) 
# 745
{ return *this; } 
# 746
}; 
# 760 "/usr/include/c++/9/bits/stl_iterator.h" 3
template< class _Container> inline insert_iterator< _Container>  
# 762
inserter(_Container &__x, typename _Container::iterator __i) 
# 763
{ return insert_iterator< _Container> (__x, __i); } 
# 768
}
# 770
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 781 "/usr/include/c++/9/bits/stl_iterator.h" 3
using std::iterator_traits;
# 782
using std::iterator;
# 783
template< class _Iterator, class _Container> 
# 784
class __normal_iterator { 
# 787
protected: _Iterator _M_current; 
# 789
typedef std::iterator_traits< _Iterator>  __traits_type; 
# 792
public: typedef _Iterator iterator_type; 
# 793
typedef typename std::iterator_traits< _Iterator> ::iterator_category iterator_category; 
# 794
typedef typename std::iterator_traits< _Iterator> ::value_type value_type; 
# 795
typedef typename std::iterator_traits< _Iterator> ::difference_type difference_type; 
# 796
typedef typename std::iterator_traits< _Iterator> ::reference reference; 
# 797
typedef typename std::iterator_traits< _Iterator> ::pointer pointer; 
# 799
constexpr __normal_iterator() noexcept : _M_current(_Iterator()) 
# 800
{ } 
# 803
explicit __normal_iterator(const _Iterator &__i) noexcept : _M_current(__i) 
# 804
{ } 
# 807
template< class _Iter> 
# 808
__normal_iterator(const __normal_iterator< _Iter, typename __enable_if< std::__are_same< _Iter, typename _Container::pointer> ::__value, _Container> ::__type>  &
# 811
__i) noexcept : _M_current(__i.base()) 
# 812
{ } 
# 816
reference operator*() const noexcept 
# 817
{ return *(_M_current); } 
# 820
pointer operator->() const noexcept 
# 821
{ return _M_current; } 
# 824
__normal_iterator &operator++() noexcept 
# 825
{ 
# 826
++(_M_current); 
# 827
return *this; 
# 828
} 
# 831
__normal_iterator operator++(int) noexcept 
# 832
{ return ((__normal_iterator)((_M_current)++)); } 
# 836
__normal_iterator &operator--() noexcept 
# 837
{ 
# 838
--(_M_current); 
# 839
return *this; 
# 840
} 
# 843
__normal_iterator operator--(int) noexcept 
# 844
{ return ((__normal_iterator)((_M_current)--)); } 
# 848
reference operator[](difference_type __n) const noexcept 
# 849
{ return (_M_current)[__n]; } 
# 852
__normal_iterator &operator+=(difference_type __n) noexcept 
# 853
{ (_M_current) += __n; return *this; } 
# 856
__normal_iterator operator+(difference_type __n) const noexcept 
# 857
{ return ((__normal_iterator)((_M_current) + __n)); } 
# 860
__normal_iterator &operator-=(difference_type __n) noexcept 
# 861
{ (_M_current) -= __n; return *this; } 
# 864
__normal_iterator operator-(difference_type __n) const noexcept 
# 865
{ return ((__normal_iterator)((_M_current) - __n)); } 
# 868
const _Iterator &base() const noexcept 
# 869
{ return _M_current; } 
# 870
}; 
# 881 "/usr/include/c++/9/bits/stl_iterator.h" 3
template< class _IteratorL, class _IteratorR, class _Container> inline bool 
# 883
operator==(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 884
__rhs) noexcept 
# 886
{ return __lhs.base() == __rhs.base(); } 
# 888
template< class _Iterator, class _Container> inline bool 
# 890
operator==(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 891
__rhs) noexcept 
# 893
{ return __lhs.base() == __rhs.base(); } 
# 895
template< class _IteratorL, class _IteratorR, class _Container> inline bool 
# 897
operator!=(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 898
__rhs) noexcept 
# 900
{ return __lhs.base() != __rhs.base(); } 
# 902
template< class _Iterator, class _Container> inline bool 
# 904
operator!=(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 905
__rhs) noexcept 
# 907
{ return __lhs.base() != __rhs.base(); } 
# 910
template< class _IteratorL, class _IteratorR, class _Container> inline bool 
# 912
operator<(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 913
__rhs) noexcept 
# 915
{ return __lhs.base() < __rhs.base(); } 
# 917
template< class _Iterator, class _Container> inline bool 
# 919
operator<(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 920
__rhs) noexcept 
# 922
{ return __lhs.base() < __rhs.base(); } 
# 924
template< class _IteratorL, class _IteratorR, class _Container> inline bool 
# 926
operator>(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 927
__rhs) noexcept 
# 929
{ return __lhs.base() > __rhs.base(); } 
# 931
template< class _Iterator, class _Container> inline bool 
# 933
operator>(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 934
__rhs) noexcept 
# 936
{ return __lhs.base() > __rhs.base(); } 
# 938
template< class _IteratorL, class _IteratorR, class _Container> inline bool 
# 940
operator<=(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 941
__rhs) noexcept 
# 943
{ return __lhs.base() <= __rhs.base(); } 
# 945
template< class _Iterator, class _Container> inline bool 
# 947
operator<=(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 948
__rhs) noexcept 
# 950
{ return __lhs.base() <= __rhs.base(); } 
# 952
template< class _IteratorL, class _IteratorR, class _Container> inline bool 
# 954
operator>=(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 955
__rhs) noexcept 
# 957
{ return __lhs.base() >= __rhs.base(); } 
# 959
template< class _Iterator, class _Container> inline bool 
# 961
operator>=(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 962
__rhs) noexcept 
# 964
{ return __lhs.base() >= __rhs.base(); } 
# 970
template< class _IteratorL, class _IteratorR, class _Container> inline auto 
# 974
operator-(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 975
__rhs) noexcept->__decltype((__lhs.base() - __rhs.base())) 
# 982
{ return __lhs.base() - __rhs.base(); } 
# 984
template< class _Iterator, class _Container> inline typename __normal_iterator< _Iterator, _Container> ::difference_type 
# 986
operator-(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 987
__rhs) noexcept 
# 989
{ return __lhs.base() - __rhs.base(); } 
# 991
template< class _Iterator, class _Container> inline __normal_iterator< _Iterator, _Container>  
# 993
operator+(typename __normal_iterator< _Iterator, _Container> ::difference_type 
# 994
__n, const __normal_iterator< _Iterator, _Container>  &__i) noexcept 
# 996
{ return ((__normal_iterator< _Iterator, _Container> )(__i.base() + __n)); } 
# 999
}
# 1001
namespace std __attribute((__visibility__("default"))) { 
# 1005
template< class _Iterator, class _Container> _Iterator 
# 1007
__niter_base(__gnu_cxx::__normal_iterator< _Iterator, _Container>  __it) noexcept(std::is_nothrow_copy_constructible< _Iterator> ::value) 
# 1009
{ return __it.base(); } 
# 1027 "/usr/include/c++/9/bits/stl_iterator.h" 3
template< class _Iterator> 
# 1028
class move_iterator { 
# 1031
protected: _Iterator _M_current; 
# 1033
typedef iterator_traits< _Iterator>  __traits_type; 
# 1034
typedef typename iterator_traits< _Iterator> ::reference __base_ref; 
# 1037
public: typedef _Iterator iterator_type; 
# 1038
typedef typename iterator_traits< _Iterator> ::iterator_category iterator_category; 
# 1039
typedef typename iterator_traits< _Iterator> ::value_type value_type; 
# 1040
typedef typename iterator_traits< _Iterator> ::difference_type difference_type; 
# 1042
typedef _Iterator pointer; 
# 1047
typedef typename conditional< is_reference< __base_ref> ::value, typename remove_reference< __base_ref> ::type &&, __base_ref> ::type reference; 
# 1050
move_iterator() : _M_current() 
# 1051
{ } 
# 1054
explicit move_iterator(iterator_type __i) : _M_current(__i) 
# 1055
{ } 
# 1057
template< class _Iter> 
# 1059
move_iterator(const move_iterator< _Iter>  &__i) : _M_current(__i.base()) 
# 1060
{ } 
# 1063
iterator_type base() const 
# 1064
{ return _M_current; } 
# 1067
reference operator*() const 
# 1068
{ return static_cast< reference>(*(_M_current)); } 
# 1071
pointer operator->() const 
# 1072
{ return _M_current; } 
# 1075
move_iterator &operator++() 
# 1076
{ 
# 1077
++(_M_current); 
# 1078
return *this; 
# 1079
} 
# 1082
move_iterator operator++(int) 
# 1083
{ 
# 1084
move_iterator __tmp = *this; 
# 1085
++(_M_current); 
# 1086
return __tmp; 
# 1087
} 
# 1090
move_iterator &operator--() 
# 1091
{ 
# 1092
--(_M_current); 
# 1093
return *this; 
# 1094
} 
# 1097
move_iterator operator--(int) 
# 1098
{ 
# 1099
move_iterator __tmp = *this; 
# 1100
--(_M_current); 
# 1101
return __tmp; 
# 1102
} 
# 1105
move_iterator operator+(difference_type __n) const 
# 1106
{ return ((move_iterator)((_M_current) + __n)); } 
# 1109
move_iterator &operator+=(difference_type __n) 
# 1110
{ 
# 1111
(_M_current) += __n; 
# 1112
return *this; 
# 1113
} 
# 1116
move_iterator operator-(difference_type __n) const 
# 1117
{ return ((move_iterator)((_M_current) - __n)); } 
# 1120
move_iterator &operator-=(difference_type __n) 
# 1121
{ 
# 1122
(_M_current) -= __n; 
# 1123
return *this; 
# 1124
} 
# 1127
reference operator[](difference_type __n) const 
# 1128
{ return std::move((_M_current)[__n]); } 
# 1129
}; 
# 1134
template< class _IteratorL, class _IteratorR> inline bool 
# 1136
operator==(const move_iterator< _IteratorL>  &__x, const move_iterator< _IteratorR>  &
# 1137
__y) 
# 1138
{ return __x.base() == __y.base(); } 
# 1140
template< class _Iterator> inline bool 
# 1142
operator==(const move_iterator< _Iterator>  &__x, const move_iterator< _Iterator>  &
# 1143
__y) 
# 1144
{ return __x.base() == __y.base(); } 
# 1146
template< class _IteratorL, class _IteratorR> inline bool 
# 1148
operator!=(const move_iterator< _IteratorL>  &__x, const move_iterator< _IteratorR>  &
# 1149
__y) 
# 1150
{ return !(__x == __y); } 
# 1152
template< class _Iterator> inline bool 
# 1154
operator!=(const move_iterator< _Iterator>  &__x, const move_iterator< _Iterator>  &
# 1155
__y) 
# 1156
{ return !(__x == __y); } 
# 1158
template< class _IteratorL, class _IteratorR> inline bool 
# 1160
operator<(const move_iterator< _IteratorL>  &__x, const move_iterator< _IteratorR>  &
# 1161
__y) 
# 1162
{ return __x.base() < __y.base(); } 
# 1164
template< class _Iterator> inline bool 
# 1166
operator<(const move_iterator< _Iterator>  &__x, const move_iterator< _Iterator>  &
# 1167
__y) 
# 1168
{ return __x.base() < __y.base(); } 
# 1170
template< class _IteratorL, class _IteratorR> inline bool 
# 1172
operator<=(const move_iterator< _IteratorL>  &__x, const move_iterator< _IteratorR>  &
# 1173
__y) 
# 1174
{ return !(__y < __x); } 
# 1176
template< class _Iterator> inline bool 
# 1178
operator<=(const move_iterator< _Iterator>  &__x, const move_iterator< _Iterator>  &
# 1179
__y) 
# 1180
{ return !(__y < __x); } 
# 1182
template< class _IteratorL, class _IteratorR> inline bool 
# 1184
operator>(const move_iterator< _IteratorL>  &__x, const move_iterator< _IteratorR>  &
# 1185
__y) 
# 1186
{ return __y < __x; } 
# 1188
template< class _Iterator> inline bool 
# 1190
operator>(const move_iterator< _Iterator>  &__x, const move_iterator< _Iterator>  &
# 1191
__y) 
# 1192
{ return __y < __x; } 
# 1194
template< class _IteratorL, class _IteratorR> inline bool 
# 1196
operator>=(const move_iterator< _IteratorL>  &__x, const move_iterator< _IteratorR>  &
# 1197
__y) 
# 1198
{ return !(__x < __y); } 
# 1200
template< class _Iterator> inline bool 
# 1202
operator>=(const move_iterator< _Iterator>  &__x, const move_iterator< _Iterator>  &
# 1203
__y) 
# 1204
{ return !(__x < __y); } 
# 1207
template< class _IteratorL, class _IteratorR> inline auto 
# 1209
operator-(const move_iterator< _IteratorL>  &__x, const move_iterator< _IteratorR>  &
# 1210
__y)->__decltype((__x.base() - __y.base())) 
# 1212
{ return __x.base() - __y.base(); } 
# 1214
template< class _Iterator> inline move_iterator< _Iterator>  
# 1216
operator+(typename move_iterator< _Iterator> ::difference_type __n, const move_iterator< _Iterator>  &
# 1217
__x) 
# 1218
{ return __x + __n; } 
# 1220
template< class _Iterator> inline move_iterator< _Iterator>  
# 1222
make_move_iterator(_Iterator __i) 
# 1223
{ return ((move_iterator< _Iterator> )(__i)); } 
# 1225
template< class _Iterator, class _ReturnType = typename conditional< __move_if_noexcept_cond< typename iterator_traits< _Iterator> ::value_type> ::value, _Iterator, move_iterator< _Iterator> > ::type> inline _ReturnType 
# 1230
__make_move_if_noexcept_iterator(_Iterator __i) 
# 1231
{ return (_ReturnType)__i; } 
# 1235
template< class _Tp, class _ReturnType = typename conditional< __move_if_noexcept_cond< _Tp> ::value, const _Tp *, move_iterator< _Tp *> > ::type> inline _ReturnType 
# 1239
__make_move_if_noexcept_iterator(_Tp *__i) 
# 1240
{ return (_ReturnType)__i; } 
# 1244
template< class _Iterator> auto 
# 1246
__niter_base(move_iterator< _Iterator>  __it)->__decltype((make_move_iterator(__niter_base(__it.base())))) 
# 1248
{ return make_move_iterator(__niter_base(__it.base())); } 
# 1250
template< class _Iterator> 
# 1251
struct __is_move_iterator< move_iterator< _Iterator> >  { 
# 1253
enum { __value = 1}; 
# 1254
typedef __true_type __type; 
# 1255
}; 
# 1257
template< class _Iterator> auto 
# 1259
__miter_base(move_iterator< _Iterator>  __it)->__decltype((__miter_base(__it.base()))) 
# 1261
{ return __miter_base(__it.base()); } 
# 1293 "/usr/include/c++/9/bits/stl_iterator.h" 3
}
# 48 "/usr/include/c++/9/debug/debug.h" 3
namespace std { 
# 50
namespace __debug { }
# 51
}
# 56
namespace __gnu_debug { 
# 58
using namespace std::__debug;
# 59
}
# 33 "/usr/include/c++/9/bits/predefined_ops.h" 3
namespace __gnu_cxx { 
# 35
namespace __ops { 
# 37
struct _Iter_less_iter { 
# 39
template< class _Iterator1, class _Iterator2> constexpr bool 
# 42
operator()(_Iterator1 __it1, _Iterator2 __it2) const 
# 43
{ return (*__it1) < (*__it2); } 
# 44
}; 
# 48
constexpr _Iter_less_iter __iter_less_iter() 
# 49
{ return _Iter_less_iter(); } 
# 51
struct _Iter_less_val { 
# 54
constexpr _Iter_less_val() = default;
# 60
explicit _Iter_less_val(_Iter_less_iter) { } 
# 62
template< class _Iterator, class _Value> bool 
# 64
operator()(_Iterator __it, _Value &__val) const 
# 65
{ return (*__it) < __val; } 
# 66
}; 
# 69
inline _Iter_less_val __iter_less_val() 
# 70
{ return _Iter_less_val(); } 
# 73
inline _Iter_less_val __iter_comp_val(_Iter_less_iter) 
# 74
{ return _Iter_less_val(); } 
# 76
struct _Val_less_iter { 
# 79
constexpr _Val_less_iter() = default;
# 85
explicit _Val_less_iter(_Iter_less_iter) { } 
# 87
template< class _Value, class _Iterator> bool 
# 89
operator()(_Value &__val, _Iterator __it) const 
# 90
{ return __val < (*__it); } 
# 91
}; 
# 94
inline _Val_less_iter __val_less_iter() 
# 95
{ return _Val_less_iter(); } 
# 98
inline _Val_less_iter __val_comp_iter(_Iter_less_iter) 
# 99
{ return _Val_less_iter(); } 
# 101
struct _Iter_equal_to_iter { 
# 103
template< class _Iterator1, class _Iterator2> bool 
# 105
operator()(_Iterator1 __it1, _Iterator2 __it2) const 
# 106
{ return (*__it1) == (*__it2); } 
# 107
}; 
# 110
inline _Iter_equal_to_iter __iter_equal_to_iter() 
# 111
{ return _Iter_equal_to_iter(); } 
# 113
struct _Iter_equal_to_val { 
# 115
template< class _Iterator, class _Value> bool 
# 117
operator()(_Iterator __it, _Value &__val) const 
# 118
{ return (*__it) == __val; } 
# 119
}; 
# 122
inline _Iter_equal_to_val __iter_equal_to_val() 
# 123
{ return _Iter_equal_to_val(); } 
# 126
inline _Iter_equal_to_val __iter_comp_val(_Iter_equal_to_iter) 
# 127
{ return _Iter_equal_to_val(); } 
# 129
template< class _Compare> 
# 130
struct _Iter_comp_iter { 
# 132
_Compare _M_comp; 
# 135
constexpr explicit _Iter_comp_iter(_Compare __comp) : _M_comp(std::move(__comp)) 
# 137
{ } 
# 139
template< class _Iterator1, class _Iterator2> constexpr bool 
# 142
operator()(_Iterator1 __it1, _Iterator2 __it2) 
# 143
{ return (bool)(_M_comp)(*__it1, *__it2); } 
# 144
}; 
# 146
template< class _Compare> constexpr _Iter_comp_iter< _Compare>  
# 149
__iter_comp_iter(_Compare __comp) 
# 150
{ return ((_Iter_comp_iter< _Compare> )(std::move(__comp))); } 
# 152
template< class _Compare> 
# 153
struct _Iter_comp_val { 
# 155
_Compare _M_comp; 
# 158
explicit _Iter_comp_val(_Compare __comp) : _M_comp(std::move(__comp)) 
# 160
{ } 
# 163
explicit _Iter_comp_val(const _Iter_comp_iter< _Compare>  &__comp) : _M_comp((__comp._M_comp)) 
# 165
{ } 
# 169
explicit _Iter_comp_val(_Iter_comp_iter< _Compare>  &&__comp) : _M_comp(std::move((__comp._M_comp))) 
# 171
{ } 
# 174
template< class _Iterator, class _Value> bool 
# 176
operator()(_Iterator __it, _Value &__val) 
# 177
{ return (bool)(_M_comp)(*__it, __val); } 
# 178
}; 
# 180
template< class _Compare> inline _Iter_comp_val< _Compare>  
# 182
__iter_comp_val(_Compare __comp) 
# 183
{ return ((_Iter_comp_val< _Compare> )(std::move(__comp))); } 
# 185
template< class _Compare> inline _Iter_comp_val< _Compare>  
# 187
__iter_comp_val(_Iter_comp_iter< _Compare>  __comp) 
# 188
{ return ((_Iter_comp_val< _Compare> )(std::move(__comp))); } 
# 190
template< class _Compare> 
# 191
struct _Val_comp_iter { 
# 193
_Compare _M_comp; 
# 196
explicit _Val_comp_iter(_Compare __comp) : _M_comp(std::move(__comp)) 
# 198
{ } 
# 201
explicit _Val_comp_iter(const _Iter_comp_iter< _Compare>  &__comp) : _M_comp((__comp._M_comp)) 
# 203
{ } 
# 207
explicit _Val_comp_iter(_Iter_comp_iter< _Compare>  &&__comp) : _M_comp(std::move((__comp._M_comp))) 
# 209
{ } 
# 212
template< class _Value, class _Iterator> bool 
# 214
operator()(_Value &__val, _Iterator __it) 
# 215
{ return (bool)(_M_comp)(__val, *__it); } 
# 216
}; 
# 218
template< class _Compare> inline _Val_comp_iter< _Compare>  
# 220
__val_comp_iter(_Compare __comp) 
# 221
{ return ((_Val_comp_iter< _Compare> )(std::move(__comp))); } 
# 223
template< class _Compare> inline _Val_comp_iter< _Compare>  
# 225
__val_comp_iter(_Iter_comp_iter< _Compare>  __comp) 
# 226
{ return ((_Val_comp_iter< _Compare> )(std::move(__comp))); } 
# 228
template< class _Value> 
# 229
struct _Iter_equals_val { 
# 231
_Value &_M_value; 
# 234
explicit _Iter_equals_val(_Value &__value) : _M_value(__value) 
# 236
{ } 
# 238
template< class _Iterator> bool 
# 240
operator()(_Iterator __it) 
# 241
{ return (*__it) == (_M_value); } 
# 242
}; 
# 244
template< class _Value> inline _Iter_equals_val< _Value>  
# 246
__iter_equals_val(_Value &__val) 
# 247
{ return ((_Iter_equals_val< _Value> )(__val)); } 
# 249
template< class _Iterator1> 
# 250
struct _Iter_equals_iter { 
# 252
_Iterator1 _M_it1; 
# 255
explicit _Iter_equals_iter(_Iterator1 __it1) : _M_it1(__it1) 
# 257
{ } 
# 259
template< class _Iterator2> bool 
# 261
operator()(_Iterator2 __it2) 
# 262
{ return (*__it2) == (*(_M_it1)); } 
# 263
}; 
# 265
template< class _Iterator> inline _Iter_equals_iter< _Iterator>  
# 267
__iter_comp_iter(_Iter_equal_to_iter, _Iterator __it) 
# 268
{ return ((_Iter_equals_iter< _Iterator> )(__it)); } 
# 270
template< class _Predicate> 
# 271
struct _Iter_pred { 
# 273
_Predicate _M_pred; 
# 276
explicit _Iter_pred(_Predicate __pred) : _M_pred(std::move(__pred)) 
# 278
{ } 
# 280
template< class _Iterator> bool 
# 282
operator()(_Iterator __it) 
# 283
{ return (bool)(_M_pred)(*__it); } 
# 284
}; 
# 286
template< class _Predicate> inline _Iter_pred< _Predicate>  
# 288
__pred_iter(_Predicate __pred) 
# 289
{ return ((_Iter_pred< _Predicate> )(std::move(__pred))); } 
# 291
template< class _Compare, class _Value> 
# 292
struct _Iter_comp_to_val { 
# 294
_Compare _M_comp; 
# 295
_Value &_M_value; 
# 297
_Iter_comp_to_val(_Compare __comp, _Value &__value) : _M_comp(std::move(__comp)), _M_value(__value) 
# 299
{ } 
# 301
template< class _Iterator> bool 
# 303
operator()(_Iterator __it) 
# 304
{ return (bool)(_M_comp)(*__it, _M_value); } 
# 305
}; 
# 307
template< class _Compare, class _Value> _Iter_comp_to_val< _Compare, _Value>  
# 309
__iter_comp_val(_Compare __comp, _Value &__val) 
# 310
{ 
# 311
return _Iter_comp_to_val< _Compare, _Value> (std::move(__comp), __val); 
# 312
} 
# 314
template< class _Compare, class _Iterator1> 
# 315
struct _Iter_comp_to_iter { 
# 317
_Compare _M_comp; 
# 318
_Iterator1 _M_it1; 
# 320
_Iter_comp_to_iter(_Compare __comp, _Iterator1 __it1) : _M_comp(std::move(__comp)), _M_it1(__it1) 
# 322
{ } 
# 324
template< class _Iterator2> bool 
# 326
operator()(_Iterator2 __it2) 
# 327
{ return (bool)(_M_comp)(*__it2, *(_M_it1)); } 
# 328
}; 
# 330
template< class _Compare, class _Iterator> inline _Iter_comp_to_iter< _Compare, _Iterator>  
# 332
__iter_comp_iter(_Iter_comp_iter< _Compare>  __comp, _Iterator __it) 
# 333
{ 
# 334
return _Iter_comp_to_iter< _Compare, _Iterator> (std::move((__comp._M_comp)), __it); 
# 336
} 
# 338
template< class _Predicate> 
# 339
struct _Iter_negate { 
# 341
_Predicate _M_pred; 
# 344
explicit _Iter_negate(_Predicate __pred) : _M_pred(std::move(__pred)) 
# 346
{ } 
# 348
template< class _Iterator> bool 
# 350
operator()(_Iterator __it) 
# 351
{ return !((bool)(_M_pred)(*__it)); } 
# 352
}; 
# 354
template< class _Predicate> inline _Iter_negate< _Predicate>  
# 356
__negate(_Iter_pred< _Predicate>  __pred) 
# 357
{ return ((_Iter_negate< _Predicate> )(std::move((__pred._M_pred)))); } 
# 359
}
# 360
}
# 76 "/usr/include/c++/9/bits/stl_algobase.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 121 "/usr/include/c++/9/bits/stl_algobase.h" 3
template< class _ForwardIterator1, class _ForwardIterator2> inline void 
# 123
iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b) 
# 124
{ 
# 151 "/usr/include/c++/9/bits/stl_algobase.h" 3
swap(*__a, *__b); 
# 153
} 
# 167 "/usr/include/c++/9/bits/stl_algobase.h" 3
template< class _ForwardIterator1, class _ForwardIterator2> _ForwardIterator2 
# 169
swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 170
__first2) 
# 171
{ 
# 177
; 
# 179
for (; __first1 != __last1; (++__first1), ((void)(++__first2))) { 
# 180
std::iter_swap(__first1, __first2); }  
# 181
return __first2; 
# 182
} 
# 195 "/usr/include/c++/9/bits/stl_algobase.h" 3
template< class _Tp> constexpr const _Tp &
# 198
min(const _Tp &__a, const _Tp &__b) 
# 199
{ 
# 203
if (__b < __a) { 
# 204
return __b; }  
# 205
return __a; 
# 206
} 
# 219 "/usr/include/c++/9/bits/stl_algobase.h" 3
template< class _Tp> constexpr const _Tp &
# 222
max(const _Tp &__a, const _Tp &__b) 
# 223
{ 
# 227
if (__a < __b) { 
# 228
return __b; }  
# 229
return __a; 
# 230
} 
# 243 "/usr/include/c++/9/bits/stl_algobase.h" 3
template< class _Tp, class _Compare> constexpr const _Tp &
# 246
min(const _Tp &__a, const _Tp &__b, _Compare __comp) 
# 247
{ 
# 249
if (__comp(__b, __a)) { 
# 250
return __b; }  
# 251
return __a; 
# 252
} 
# 265 "/usr/include/c++/9/bits/stl_algobase.h" 3
template< class _Tp, class _Compare> constexpr const _Tp &
# 268
max(const _Tp &__a, const _Tp &__b, _Compare __comp) 
# 269
{ 
# 271
if (__comp(__a, __b)) { 
# 272
return __b; }  
# 273
return __a; 
# 274
} 
# 278
template< class _Iterator> inline _Iterator 
# 280
__niter_base(_Iterator __it) noexcept(std::is_nothrow_copy_constructible< _Iterator> ::value) 
# 282
{ return __it; } 
# 287
template< class _From, class _To> inline _From 
# 289
__niter_wrap(_From __from, _To __res) 
# 290
{ return __from + (__res - std::__niter_base(__from)); } 
# 293
template< class _Iterator> inline _Iterator 
# 295
__niter_wrap(const _Iterator &, _Iterator __res) 
# 296
{ return __res; } 
# 304
template< bool _IsMove, bool _IsSimple, class _Category> 
# 305
struct __copy_move { 
# 307
template< class _II, class _OI> static _OI 
# 309
__copy_m(_II __first, _II __last, _OI __result) 
# 310
{ 
# 311
for (; __first != __last; (++__result), ((void)(++__first))) { 
# 312
(*__result) = (*__first); }  
# 313
return __result; 
# 314
} 
# 315
}; 
# 318
template< class _Category> 
# 319
struct __copy_move< true, false, _Category>  { 
# 321
template< class _II, class _OI> static _OI 
# 323
__copy_m(_II __first, _II __last, _OI __result) 
# 324
{ 
# 325
for (; __first != __last; (++__result), ((void)(++__first))) { 
# 326
(*__result) = std::move(*__first); }  
# 327
return __result; 
# 328
} 
# 329
}; 
# 333
template<> struct __copy_move< false, false, random_access_iterator_tag>  { 
# 335
template< class _II, class _OI> static _OI 
# 337
__copy_m(_II __first, _II __last, _OI __result) 
# 338
{ 
# 339
typedef typename iterator_traits< _II> ::difference_type _Distance; 
# 340
for (_Distance __n = __last - __first; __n > 0; --__n) 
# 341
{ 
# 342
(*__result) = (*__first); 
# 343
++__first; 
# 344
++__result; 
# 345
}  
# 346
return __result; 
# 347
} 
# 348
}; 
# 352
template<> struct __copy_move< true, false, random_access_iterator_tag>  { 
# 354
template< class _II, class _OI> static _OI 
# 356
__copy_m(_II __first, _II __last, _OI __result) 
# 357
{ 
# 358
typedef typename iterator_traits< _II> ::difference_type _Distance; 
# 359
for (_Distance __n = __last - __first; __n > 0; --__n) 
# 360
{ 
# 361
(*__result) = std::move(*__first); 
# 362
++__first; 
# 363
++__result; 
# 364
}  
# 365
return __result; 
# 366
} 
# 367
}; 
# 370
template< bool _IsMove> 
# 371
struct __copy_move< _IsMove, true, random_access_iterator_tag>  { 
# 373
template< class _Tp> static _Tp *
# 375
__copy_m(const _Tp *__first, const _Tp *__last, _Tp *__result) 
# 376
{ 
# 378
using __assignable = conditional< _IsMove, is_move_assignable< _Tp> , is_copy_assignable< _Tp> > ; 
# 382
static_assert((__assignable::type::value), "type is not assignable");
# 384
const ptrdiff_t _Num = __last - __first; 
# 385
if (_Num) { 
# 386
__builtin_memmove(__result, __first, sizeof(_Tp) * _Num); }  
# 387
return __result + _Num; 
# 388
} 
# 389
}; 
# 391
template< bool _IsMove, class _II, class _OI> inline _OI 
# 393
__copy_move_a(_II __first, _II __last, _OI __result) 
# 394
{ 
# 395
typedef typename iterator_traits< _II> ::value_type _ValueTypeI; 
# 396
typedef typename iterator_traits< _OI> ::value_type _ValueTypeO; 
# 397
typedef typename iterator_traits< _II> ::iterator_category _Category; 
# 398
const bool __simple = (__is_trivially_copyable(_ValueTypeI) && __is_pointer< _II> ::__value && __is_pointer< _OI> ::__value && __are_same< typename iterator_traits< _II> ::value_type, typename iterator_traits< _OI> ::value_type> ::__value); 
# 403
return std::__copy_move< _IsMove, __simple, typename iterator_traits< _II> ::iterator_category> ::__copy_m(__first, __last, __result); 
# 405
} 
# 409
template< class _CharT> struct char_traits; 
# 412
template< class _CharT, class _Traits> class istreambuf_iterator; 
# 415
template< class _CharT, class _Traits> class ostreambuf_iterator; 
# 418
template< bool _IsMove, class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, ostreambuf_iterator< _CharT, char_traits< _CharT> > > ::__type __copy_move_a2(_CharT *, _CharT *, ostreambuf_iterator< _CharT, char_traits< _CharT> > ); 
# 424
template< bool _IsMove, class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, ostreambuf_iterator< _CharT, char_traits< _CharT> > > ::__type __copy_move_a2(const _CharT *, const _CharT *, ostreambuf_iterator< _CharT, char_traits< _CharT> > ); 
# 430
template< bool _IsMove, class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, _CharT *> ::__type __copy_move_a2(istreambuf_iterator< _CharT, char_traits< _CharT> > , istreambuf_iterator< _CharT, char_traits< _CharT> > , _CharT *); 
# 436
template< bool _IsMove, class _II, class _OI> inline _OI 
# 438
__copy_move_a2(_II __first, _II __last, _OI __result) 
# 439
{ 
# 440
return std::__niter_wrap(__result, std::__copy_move_a< _IsMove> (std::__niter_base(__first), std::__niter_base(__last), std::__niter_base(__result))); 
# 444
} 
# 463 "/usr/include/c++/9/bits/stl_algobase.h" 3
template< class _II, class _OI> inline _OI 
# 465
copy(_II __first, _II __last, _OI __result) 
# 466
{ 
# 471
; 
# 473
return std::__copy_move_a2< __is_move_iterator< _II> ::__value> (std::__miter_base(__first), std::__miter_base(__last), __result); 
# 475
} 
# 495 "/usr/include/c++/9/bits/stl_algobase.h" 3
template< class _II, class _OI> inline _OI 
# 497
move(_II __first, _II __last, _OI __result) 
# 498
{ 
# 503
; 
# 505
return std::__copy_move_a2< true> (std::__miter_base(__first), std::__miter_base(__last), __result); 
# 507
} 
# 514
template< bool , bool , class > 
# 515
struct __copy_move_backward { 
# 517
template< class _BI1, class _BI2> static _BI2 
# 519
__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result) 
# 520
{ 
# 521
while (__first != __last) { 
# 522
(*(--__result)) = (*(--__last)); }  
# 523
return __result; 
# 524
} 
# 525
}; 
# 528
template< class _Category> 
# 529
struct __copy_move_backward< true, false, _Category>  { 
# 531
template< class _BI1, class _BI2> static _BI2 
# 533
__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result) 
# 534
{ 
# 535
while (__first != __last) { 
# 536
(*(--__result)) = std::move(*(--__last)); }  
# 537
return __result; 
# 538
} 
# 539
}; 
# 543
template<> struct __copy_move_backward< false, false, random_access_iterator_tag>  { 
# 545
template< class _BI1, class _BI2> static _BI2 
# 547
__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result) 
# 548
{ 
# 549
typename iterator_traits< _BI1> ::difference_type __n; 
# 550
for (__n = (__last - __first); __n > 0; --__n) { 
# 551
(*(--__result)) = (*(--__last)); }  
# 552
return __result; 
# 553
} 
# 554
}; 
# 558
template<> struct __copy_move_backward< true, false, random_access_iterator_tag>  { 
# 560
template< class _BI1, class _BI2> static _BI2 
# 562
__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result) 
# 563
{ 
# 564
typename iterator_traits< _BI1> ::difference_type __n; 
# 565
for (__n = (__last - __first); __n > 0; --__n) { 
# 566
(*(--__result)) = std::move(*(--__last)); }  
# 567
return __result; 
# 568
} 
# 569
}; 
# 572
template< bool _IsMove> 
# 573
struct __copy_move_backward< _IsMove, true, random_access_iterator_tag>  { 
# 575
template< class _Tp> static _Tp *
# 577
__copy_move_b(const _Tp *__first, const _Tp *__last, _Tp *__result) 
# 578
{ 
# 580
using __assignable = conditional< _IsMove, is_move_assignable< _Tp> , is_copy_assignable< _Tp> > ; 
# 584
static_assert((__assignable::type::value), "type is not assignable");
# 586
const ptrdiff_t _Num = __last - __first; 
# 587
if (_Num) { 
# 588
__builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num); }  
# 589
return __result - _Num; 
# 590
} 
# 591
}; 
# 593
template< bool _IsMove, class _BI1, class _BI2> inline _BI2 
# 595
__copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result) 
# 596
{ 
# 597
typedef typename iterator_traits< _BI1> ::value_type _ValueType1; 
# 598
typedef typename iterator_traits< _BI2> ::value_type _ValueType2; 
# 599
typedef typename iterator_traits< _BI1> ::iterator_category _Category; 
# 600
const bool __simple = (__is_trivially_copyable(_ValueType1) && __is_pointer< _BI1> ::__value && __is_pointer< _BI2> ::__value && __are_same< typename iterator_traits< _BI1> ::value_type, typename iterator_traits< _BI2> ::value_type> ::__value); 
# 605
return std::__copy_move_backward< _IsMove, __simple, typename iterator_traits< _BI1> ::iterator_category> ::__copy_move_b(__first, __last, __result); 
# 609
} 
# 611
template< bool _IsMove, class _BI1, class _BI2> inline _BI2 
# 613
__copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result) 
# 614
{ 
# 615
return std::__niter_wrap(__result, std::__copy_move_backward_a< _IsMove> (std::__niter_base(__first), std::__niter_base(__last), std::__niter_base(__result))); 
# 619
} 
# 639 "/usr/include/c++/9/bits/stl_algobase.h" 3
template< class _BI1, class _BI2> inline _BI2 
# 641
copy_backward(_BI1 __first, _BI1 __last, _BI2 __result) 
# 642
{ 
# 649
; 
# 651
return std::__copy_move_backward_a2< __is_move_iterator< _BI1> ::__value> (std::__miter_base(__first), std::__miter_base(__last), __result); 
# 653
} 
# 674 "/usr/include/c++/9/bits/stl_algobase.h" 3
template< class _BI1, class _BI2> inline _BI2 
# 676
move_backward(_BI1 __first, _BI1 __last, _BI2 __result) 
# 677
{ 
# 684
; 
# 686
return std::__copy_move_backward_a2< true> (std::__miter_base(__first), std::__miter_base(__last), __result); 
# 689
} 
# 696
template< class _ForwardIterator, class _Tp> inline typename __gnu_cxx::__enable_if< !__is_scalar< _Tp> ::__value, void> ::__type 
# 699
__fill_a(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 700
__value) 
# 701
{ 
# 702
for (; __first != __last; ++__first) { 
# 703
(*__first) = __value; }  
# 704
} 
# 706
template< class _ForwardIterator, class _Tp> inline typename __gnu_cxx::__enable_if< __is_scalar< _Tp> ::__value, void> ::__type 
# 709
__fill_a(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 710
__value) 
# 711
{ 
# 712
const _Tp __tmp = __value; 
# 713
for (; __first != __last; ++__first) { 
# 714
(*__first) = __tmp; }  
# 715
} 
# 718
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_byte< _Tp> ::__value, void> ::__type 
# 721
__fill_a(_Tp *__first, _Tp *__last, const _Tp &__c) 
# 722
{ 
# 723
const _Tp __tmp = __c; 
# 724
if (const size_t __len = __last - __first) { 
# 725
__builtin_memset(__first, static_cast< unsigned char>(__tmp), __len); }  
# 726
} 
# 740 "/usr/include/c++/9/bits/stl_algobase.h" 3
template< class _ForwardIterator, class _Tp> inline void 
# 742
fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__value) 
# 743
{ 
# 747
; 
# 749
std::__fill_a(std::__niter_base(__first), std::__niter_base(__last), __value); 
# 751
} 
# 753
template< class _OutputIterator, class _Size, class _Tp> inline typename __gnu_cxx::__enable_if< !__is_scalar< _Tp> ::__value, _OutputIterator> ::__type 
# 756
__fill_n_a(_OutputIterator __first, _Size __n, const _Tp &__value) 
# 757
{ 
# 758
for (__decltype((__n + 0)) __niter = __n; __niter > 0; (--__niter), ((void)(++__first))) { 
# 760
(*__first) = __value; }  
# 761
return __first; 
# 762
} 
# 764
template< class _OutputIterator, class _Size, class _Tp> inline typename __gnu_cxx::__enable_if< __is_scalar< _Tp> ::__value, _OutputIterator> ::__type 
# 767
__fill_n_a(_OutputIterator __first, _Size __n, const _Tp &__value) 
# 768
{ 
# 769
const _Tp __tmp = __value; 
# 770
for (__decltype((__n + 0)) __niter = __n; __niter > 0; (--__niter), ((void)(++__first))) { 
# 772
(*__first) = __tmp; }  
# 773
return __first; 
# 774
} 
# 776
template< class _Size, class _Tp> inline typename __gnu_cxx::__enable_if< __is_byte< _Tp> ::__value, _Tp *> ::__type 
# 779
__fill_n_a(_Tp *__first, _Size __n, const _Tp &__c) 
# 780
{ 
# 781
std::__fill_a(__first, __first + __n, __c); 
# 782
return __first + __n; 
# 783
} 
# 800 "/usr/include/c++/9/bits/stl_algobase.h" 3
template< class _OI, class _Size, class _Tp> inline _OI 
# 802
fill_n(_OI __first, _Size __n, const _Tp &__value) 
# 803
{ 
# 806
; 
# 808
return std::__niter_wrap(__first, std::__fill_n_a(std::__niter_base(__first), __n, __value)); 
# 810
} 
# 812
template< bool _BoolType> 
# 813
struct __equal { 
# 815
template< class _II1, class _II2> static bool 
# 817
equal(_II1 __first1, _II1 __last1, _II2 __first2) 
# 818
{ 
# 819
for (; __first1 != __last1; (++__first1), ((void)(++__first2))) { 
# 820
if (!((*__first1) == (*__first2))) { 
# 821
return false; }  }  
# 822
return true; 
# 823
} 
# 824
}; 
# 827
template<> struct __equal< true>  { 
# 829
template< class _Tp> static bool 
# 831
equal(const _Tp *__first1, const _Tp *__last1, const _Tp *__first2) 
# 832
{ 
# 833
if (const size_t __len = __last1 - __first1) { 
# 834
return !(__builtin_memcmp(__first1, __first2, sizeof(_Tp) * __len)); }  
# 835
return true; 
# 836
} 
# 837
}; 
# 839
template< class _II1, class _II2> inline bool 
# 841
__equal_aux(_II1 __first1, _II1 __last1, _II2 __first2) 
# 842
{ 
# 843
typedef typename iterator_traits< _II1> ::value_type _ValueType1; 
# 844
typedef typename iterator_traits< _II2> ::value_type _ValueType2; 
# 845
const bool __simple = ((__is_integer< typename iterator_traits< _II1> ::value_type> ::__value || __is_pointer< typename iterator_traits< _II1> ::value_type> ::__value) && __is_pointer< _II1> ::__value && __is_pointer< _II2> ::__value && __are_same< typename iterator_traits< _II1> ::value_type, typename iterator_traits< _II2> ::value_type> ::__value); 
# 851
return std::__equal< __simple> ::equal(__first1, __last1, __first2); 
# 852
} 
# 854
template< class , class > 
# 855
struct __lc_rai { 
# 857
template< class _II1, class _II2> static _II1 
# 859
__newlast1(_II1, _II1 __last1, _II2, _II2) 
# 860
{ return __last1; } 
# 862
template< class _II> static bool 
# 864
__cnd2(_II __first, _II __last) 
# 865
{ return __first != __last; } 
# 866
}; 
# 869
template<> struct __lc_rai< random_access_iterator_tag, random_access_iterator_tag>  { 
# 871
template< class _RAI1, class _RAI2> static _RAI1 
# 873
__newlast1(_RAI1 __first1, _RAI1 __last1, _RAI2 
# 874
__first2, _RAI2 __last2) 
# 875
{ 
# 877
const typename iterator_traits< _RAI1> ::difference_type __diff1 = __last1 - __first1; 
# 879
const typename iterator_traits< _RAI2> ::difference_type __diff2 = __last2 - __first2; 
# 880
return (__diff2 < __diff1) ? __first1 + __diff2 : __last1; 
# 881
} 
# 883
template< class _RAI> static bool 
# 885
__cnd2(_RAI, _RAI) 
# 886
{ return true; } 
# 887
}; 
# 889
template< class _II1, class _II2, class _Compare> bool 
# 891
__lexicographical_compare_impl(_II1 __first1, _II1 __last1, _II2 
# 892
__first2, _II2 __last2, _Compare 
# 893
__comp) 
# 894
{ 
# 895
typedef typename iterator_traits< _II1> ::iterator_category _Category1; 
# 896
typedef typename iterator_traits< _II2> ::iterator_category _Category2; 
# 897
typedef __lc_rai< typename iterator_traits< _II1> ::iterator_category, typename iterator_traits< _II2> ::iterator_category>  __rai_type; 
# 899
__last1 = __rai_type::__newlast1(__first1, __last1, __first2, __last2); 
# 900
for (; (__first1 != __last1) && __rai_type::__cnd2(__first2, __last2); (++__first1), ((void)(++__first2))) 
# 902
{ 
# 903
if (__comp(__first1, __first2)) { 
# 904
return true; }  
# 905
if (__comp(__first2, __first1)) { 
# 906
return false; }  
# 907
}  
# 908
return (__first1 == __last1) && (__first2 != __last2); 
# 909
} 
# 911
template< bool _BoolType> 
# 912
struct __lexicographical_compare { 
# 914
template< class _II1, class _II2> static bool __lc(_II1, _II1, _II2, _II2); 
# 916
}; 
# 918
template< bool _BoolType> 
# 919
template< class _II1, class _II2> bool 
# 922
__lexicographical_compare< _BoolType> ::__lc(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2) 
# 923
{ 
# 924
return std::__lexicographical_compare_impl(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_less_iter()); 
# 927
} 
# 930
template<> struct __lexicographical_compare< true>  { 
# 932
template< class _Tp, class _Up> static bool 
# 934
__lc(const _Tp *__first1, const _Tp *__last1, const _Up *
# 935
__first2, const _Up *__last2) 
# 936
{ 
# 937
const size_t __len1 = __last1 - __first1; 
# 938
const size_t __len2 = __last2 - __first2; 
# 939
if (const size_t __len = std::min(__len1, __len2)) { 
# 940
if (int __result = __builtin_memcmp(__first1, __first2, __len)) { 
# 941
return __result < 0; }  }  
# 942
return __len1 < __len2; 
# 943
} 
# 944
}; 
# 946
template< class _II1, class _II2> inline bool 
# 948
__lexicographical_compare_aux(_II1 __first1, _II1 __last1, _II2 
# 949
__first2, _II2 __last2) 
# 950
{ 
# 951
typedef typename iterator_traits< _II1> ::value_type _ValueType1; 
# 952
typedef typename iterator_traits< _II2> ::value_type _ValueType2; 
# 953
const bool __simple = (__is_byte< typename iterator_traits< _II1> ::value_type> ::__value && __is_byte< typename iterator_traits< _II2> ::value_type> ::__value && (!__gnu_cxx::__numeric_traits< typename iterator_traits< _II1> ::value_type> ::__is_signed) && (!__gnu_cxx::__numeric_traits< typename iterator_traits< _II2> ::value_type> ::__is_signed) && __is_pointer< _II1> ::__value && __is_pointer< _II2> ::__value); 
# 960
return std::__lexicographical_compare< __simple> ::__lc(__first1, __last1, __first2, __last2); 
# 962
} 
# 964
template< class _ForwardIterator, class _Tp, class _Compare> _ForwardIterator 
# 966
__lower_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 967
__val, _Compare __comp) 
# 968
{ 
# 970
typedef typename iterator_traits< _ForwardIterator> ::difference_type _DistanceType; 
# 972
_DistanceType __len = std::distance(__first, __last); 
# 974
while (__len > 0) 
# 975
{ 
# 976
_DistanceType __half = __len >> 1; 
# 977
_ForwardIterator __middle = __first; 
# 978
std::advance(__middle, __half); 
# 979
if (__comp(__middle, __val)) 
# 980
{ 
# 981
__first = __middle; 
# 982
++__first; 
# 983
__len = ((__len - __half) - 1); 
# 984
} else { 
# 986
__len = __half; }  
# 987
}  
# 988
return __first; 
# 989
} 
# 1002 "/usr/include/c++/9/bits/stl_algobase.h" 3
template< class _ForwardIterator, class _Tp> inline _ForwardIterator 
# 1004
lower_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 1005
__val) 
# 1006
{ 
# 1011
; 
# 1013
return std::__lower_bound(__first, __last, __val, __gnu_cxx::__ops::__iter_less_val()); 
# 1015
} 
# 1020
constexpr int __lg(int __n) 
# 1021
{ return ((((int)sizeof(int)) * 8) - 1) - __builtin_clz(__n); } 
# 1024
constexpr unsigned __lg(unsigned __n) 
# 1025
{ return ((((int)sizeof(int)) * 8) - 1) - __builtin_clz(__n); } 
# 1028
constexpr long __lg(long __n) 
# 1029
{ return ((((int)sizeof(long)) * 8) - 1) - __builtin_clzl(__n); } 
# 1032
constexpr unsigned long __lg(unsigned long __n) 
# 1033
{ return ((((int)sizeof(long)) * 8) - 1) - __builtin_clzl(__n); } 
# 1036
constexpr long long __lg(long long __n) 
# 1037
{ return ((((int)sizeof(long long)) * 8) - 1) - __builtin_clzll(__n); } 
# 1040
constexpr unsigned long long __lg(unsigned long long __n) 
# 1041
{ return ((((int)sizeof(long long)) * 8) - 1) - __builtin_clzll(__n); } 
# 1057 "/usr/include/c++/9/bits/stl_algobase.h" 3
template< class _II1, class _II2> inline bool 
# 1059
equal(_II1 __first1, _II1 __last1, _II2 __first2) 
# 1060
{ 
# 1067
; 
# 1069
return std::__equal_aux(std::__niter_base(__first1), std::__niter_base(__last1), std::__niter_base(__first2)); 
# 1072
} 
# 1089 "/usr/include/c++/9/bits/stl_algobase.h" 3
template< class _IIter1, class _IIter2, class _BinaryPredicate> inline bool 
# 1091
equal(_IIter1 __first1, _IIter1 __last1, _IIter2 
# 1092
__first2, _BinaryPredicate __binary_pred) 
# 1093
{ 
# 1097
; 
# 1099
for (; __first1 != __last1; (++__first1), ((void)(++__first2))) { 
# 1100
if (!((bool)__binary_pred(*__first1, *__first2))) { 
# 1101
return false; }  }  
# 1102
return true; 
# 1103
} 
# 1107
template< class _II1, class _II2> inline bool 
# 1109
__equal4(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2) 
# 1110
{ 
# 1111
using _RATag = random_access_iterator_tag; 
# 1112
using _Cat1 = typename iterator_traits< _II1> ::iterator_category; 
# 1113
using _Cat2 = typename iterator_traits< _II2> ::iterator_category; 
# 1114
using _RAIters = __and_< is_same< typename iterator_traits< _II1> ::iterator_category, random_access_iterator_tag> , is_same< typename iterator_traits< _II2> ::iterator_category, random_access_iterator_tag> > ; 
# 1115
if (_RAIters()) 
# 1116
{ 
# 1117
auto __d1 = std::distance(__first1, __last1); 
# 1118
auto __d2 = std::distance(__first2, __last2); 
# 1119
if (__d1 != __d2) { 
# 1120
return false; }  
# 1121
return std::equal(__first1, __last1, __first2); 
# 1122
}  
# 1124
for (; (__first1 != __last1) && (__first2 != __last2); (++__first1), ((void)(++__first2))) { 
# 1126
if (!((*__first1) == (*__first2))) { 
# 1127
return false; }  }  
# 1128
return (__first1 == __last1) && (__first2 == __last2); 
# 1129
} 
# 1132
template< class _II1, class _II2, class _BinaryPredicate> inline bool 
# 1134
__equal4(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2, _BinaryPredicate 
# 1135
__binary_pred) 
# 1136
{ 
# 1137
using _RATag = random_access_iterator_tag; 
# 1138
using _Cat1 = typename iterator_traits< _II1> ::iterator_category; 
# 1139
using _Cat2 = typename iterator_traits< _II2> ::iterator_category; 
# 1140
using _RAIters = __and_< is_same< typename iterator_traits< _II1> ::iterator_category, random_access_iterator_tag> , is_same< typename iterator_traits< _II2> ::iterator_category, random_access_iterator_tag> > ; 
# 1141
if (_RAIters()) 
# 1142
{ 
# 1143
auto __d1 = std::distance(__first1, __last1); 
# 1144
auto __d2 = std::distance(__first2, __last2); 
# 1145
if (__d1 != __d2) { 
# 1146
return false; }  
# 1147
return std::equal(__first1, __last1, __first2, __binary_pred); 
# 1149
}  
# 1151
for (; (__first1 != __last1) && (__first2 != __last2); (++__first1), ((void)(++__first2))) { 
# 1153
if (!((bool)__binary_pred(*__first1, *__first2))) { 
# 1154
return false; }  }  
# 1155
return (__first1 == __last1) && (__first2 == __last2); 
# 1156
} 
# 1176 "/usr/include/c++/9/bits/stl_algobase.h" 3
template< class _II1, class _II2> inline bool 
# 1178
equal(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2) 
# 1179
{ 
# 1186
; 
# 1187
; 
# 1189
return std::__equal4(__first1, __last1, __first2, __last2); 
# 1190
} 
# 1208 "/usr/include/c++/9/bits/stl_algobase.h" 3
template< class _IIter1, class _IIter2, class _BinaryPredicate> inline bool 
# 1210
equal(_IIter1 __first1, _IIter1 __last1, _IIter2 
# 1211
__first2, _IIter2 __last2, _BinaryPredicate __binary_pred) 
# 1212
{ 
# 1216
; 
# 1217
; 
# 1219
return std::__equal4(__first1, __last1, __first2, __last2, __binary_pred); 
# 1221
} 
# 1239 "/usr/include/c++/9/bits/stl_algobase.h" 3
template< class _II1, class _II2> inline bool 
# 1241
lexicographical_compare(_II1 __first1, _II1 __last1, _II2 
# 1242
__first2, _II2 __last2) 
# 1243
{ 
# 1253
; 
# 1254
; 
# 1256
return std::__lexicographical_compare_aux(std::__niter_base(__first1), std::__niter_base(__last1), std::__niter_base(__first2), std::__niter_base(__last2)); 
# 1260
} 
# 1275 "/usr/include/c++/9/bits/stl_algobase.h" 3
template< class _II1, class _II2, class _Compare> inline bool 
# 1277
lexicographical_compare(_II1 __first1, _II1 __last1, _II2 
# 1278
__first2, _II2 __last2, _Compare __comp) 
# 1279
{ 
# 1283
; 
# 1284
; 
# 1286
return std::__lexicographical_compare_impl(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 1289
} 
# 1291
template< class _InputIterator1, class _InputIterator2, class 
# 1292
_BinaryPredicate> pair< _InputIterator1, _InputIterator2>  
# 1294
__mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 1295
__first2, _BinaryPredicate __binary_pred) 
# 1296
{ 
# 1297
while ((__first1 != __last1) && __binary_pred(__first1, __first2)) 
# 1298
{ 
# 1299
++__first1; 
# 1300
++__first2; 
# 1301
}  
# 1302
return pair< _InputIterator1, _InputIterator2> (__first1, __first2); 
# 1303
} 
# 1318 "/usr/include/c++/9/bits/stl_algobase.h" 3
template< class _InputIterator1, class _InputIterator2> inline pair< _InputIterator1, _InputIterator2>  
# 1320
mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 1321
__first2) 
# 1322
{ 
# 1329
; 
# 1331
return std::__mismatch(__first1, __last1, __first2, __gnu_cxx::__ops::__iter_equal_to_iter()); 
# 1333
} 
# 1351 "/usr/include/c++/9/bits/stl_algobase.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 1352
_BinaryPredicate> inline pair< _InputIterator1, _InputIterator2>  
# 1354
mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 1355
__first2, _BinaryPredicate __binary_pred) 
# 1356
{ 
# 1360
; 
# 1362
return std::__mismatch(__first1, __last1, __first2, __gnu_cxx::__ops::__iter_comp_iter(__binary_pred)); 
# 1364
} 
# 1368
template< class _InputIterator1, class _InputIterator2, class 
# 1369
_BinaryPredicate> pair< _InputIterator1, _InputIterator2>  
# 1371
__mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 1372
__first2, _InputIterator2 __last2, _BinaryPredicate 
# 1373
__binary_pred) 
# 1374
{ 
# 1375
while ((__first1 != __last1) && (__first2 != __last2) && __binary_pred(__first1, __first2)) 
# 1377
{ 
# 1378
++__first1; 
# 1379
++__first2; 
# 1380
}  
# 1381
return pair< _InputIterator1, _InputIterator2> (__first1, __first2); 
# 1382
} 
# 1398 "/usr/include/c++/9/bits/stl_algobase.h" 3
template< class _InputIterator1, class _InputIterator2> inline pair< _InputIterator1, _InputIterator2>  
# 1400
mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 1401
__first2, _InputIterator2 __last2) 
# 1402
{ 
# 1409
; 
# 1410
; 
# 1412
return std::__mismatch(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_equal_to_iter()); 
# 1414
} 
# 1433 "/usr/include/c++/9/bits/stl_algobase.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 1434
_BinaryPredicate> inline pair< _InputIterator1, _InputIterator2>  
# 1436
mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 1437
__first2, _InputIterator2 __last2, _BinaryPredicate 
# 1438
__binary_pred) 
# 1439
{ 
# 1443
; 
# 1444
; 
# 1446
return std::__mismatch(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_comp_iter(__binary_pred)); 
# 1448
} 
# 1453
}
# 20 "/usr/include/aarch64-linux-gnu/bits/types/wint_t.h" 3
typedef unsigned wint_t; 
# 6 "/usr/include/aarch64-linux-gnu/bits/types/mbstate_t.h" 3
typedef __mbstate_t mbstate_t; 
# 79 "/usr/include/wchar.h" 3
extern "C" {
# 83
struct tm; 
# 87
extern __attribute((gnu_inline)) inline wchar_t *wcscpy(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src) throw()
# 89
 __attribute((__nonnull__(1, 2))); 
# 92
extern __attribute((gnu_inline)) inline wchar_t *wcsncpy(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src, size_t __n) throw()
# 94
 __attribute((__nonnull__(1, 2))); 
# 97
extern __attribute((gnu_inline)) inline wchar_t *wcscat(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src) throw()
# 99
 __attribute((__nonnull__(1, 2))); 
# 101
extern __attribute((gnu_inline)) inline wchar_t *wcsncat(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src, size_t __n) throw()
# 103
 __attribute((__nonnull__(1, 2))); 
# 106
extern int wcscmp(const wchar_t * __s1, const wchar_t * __s2) throw()
# 107
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 109
extern int wcsncmp(const wchar_t * __s1, const wchar_t * __s2, size_t __n) throw()
# 110
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 114
extern int wcscasecmp(const wchar_t * __s1, const wchar_t * __s2) throw(); 
# 117
extern int wcsncasecmp(const wchar_t * __s1, const wchar_t * __s2, size_t __n) throw(); 
# 122
extern int wcscasecmp_l(const wchar_t * __s1, const wchar_t * __s2, locale_t __loc) throw(); 
# 125
extern int wcsncasecmp_l(const wchar_t * __s1, const wchar_t * __s2, size_t __n, locale_t __loc) throw(); 
# 131
extern int wcscoll(const wchar_t * __s1, const wchar_t * __s2) throw(); 
# 135
extern size_t wcsxfrm(wchar_t *__restrict__ __s1, const wchar_t *__restrict__ __s2, size_t __n) throw(); 
# 144
extern int wcscoll_l(const wchar_t * __s1, const wchar_t * __s2, locale_t __loc) throw(); 
# 150
extern size_t wcsxfrm_l(wchar_t * __s1, const wchar_t * __s2, size_t __n, locale_t __loc) throw(); 
# 154
extern wchar_t *wcsdup(const wchar_t * __s) throw() __attribute((__malloc__)); 
# 159
extern "C++" wchar_t *wcschr(wchar_t * __wcs, wchar_t __wc) throw() __asm__("wcschr")
# 160
 __attribute((__pure__)); 
# 161
extern "C++" const wchar_t *wcschr(const wchar_t * __wcs, wchar_t __wc) throw() __asm__("wcschr")
# 162
 __attribute((__pure__)); 
# 169
extern "C++" wchar_t *wcsrchr(wchar_t * __wcs, wchar_t __wc) throw() __asm__("wcsrchr")
# 170
 __attribute((__pure__)); 
# 171
extern "C++" const wchar_t *wcsrchr(const wchar_t * __wcs, wchar_t __wc) throw() __asm__("wcsrchr")
# 172
 __attribute((__pure__)); 
# 181 "/usr/include/wchar.h" 3
extern wchar_t *wcschrnul(const wchar_t * __s, wchar_t __wc) throw()
# 182
 __attribute((__pure__)); 
# 187
extern size_t wcscspn(const wchar_t * __wcs, const wchar_t * __reject) throw()
# 188
 __attribute((__pure__)); 
# 191
extern size_t wcsspn(const wchar_t * __wcs, const wchar_t * __accept) throw()
# 192
 __attribute((__pure__)); 
# 195
extern "C++" wchar_t *wcspbrk(wchar_t * __wcs, const wchar_t * __accept) throw() __asm__("wcspbrk")
# 196
 __attribute((__pure__)); 
# 197
extern "C++" const wchar_t *wcspbrk(const wchar_t * __wcs, const wchar_t * __accept) throw() __asm__("wcspbrk")
# 199
 __attribute((__pure__)); 
# 206
extern "C++" wchar_t *wcsstr(wchar_t * __haystack, const wchar_t * __needle) throw() __asm__("wcsstr")
# 207
 __attribute((__pure__)); 
# 208
extern "C++" const wchar_t *wcsstr(const wchar_t * __haystack, const wchar_t * __needle) throw() __asm__("wcsstr")
# 210
 __attribute((__pure__)); 
# 217
extern wchar_t *wcstok(wchar_t *__restrict__ __s, const wchar_t *__restrict__ __delim, wchar_t **__restrict__ __ptr) throw(); 
# 222
extern size_t wcslen(const wchar_t * __s) throw() __attribute((__pure__)); 
# 227
extern "C++" wchar_t *wcswcs(wchar_t * __haystack, const wchar_t * __needle) throw() __asm__("wcswcs")
# 228
 __attribute((__pure__)); 
# 229
extern "C++" const wchar_t *wcswcs(const wchar_t * __haystack, const wchar_t * __needle) throw() __asm__("wcswcs")
# 231
 __attribute((__pure__)); 
# 240 "/usr/include/wchar.h" 3
extern size_t wcsnlen(const wchar_t * __s, size_t __maxlen) throw()
# 241
 __attribute((__pure__)); 
# 247
extern "C++" wchar_t *wmemchr(wchar_t * __s, wchar_t __c, size_t __n) throw() __asm__("wmemchr")
# 248
 __attribute((__pure__)); 
# 249
extern "C++" const wchar_t *wmemchr(const wchar_t * __s, wchar_t __c, size_t __n) throw() __asm__("wmemchr")
# 251
 __attribute((__pure__)); 
# 258
extern int wmemcmp(const wchar_t * __s1, const wchar_t * __s2, size_t __n) throw()
# 259
 __attribute((__pure__)); 
# 262
extern __attribute((gnu_inline)) inline wchar_t *wmemcpy(wchar_t *__restrict__ __s1, const wchar_t *__restrict__ __s2, size_t __n) throw(); 
# 267
extern __attribute((gnu_inline)) inline wchar_t *wmemmove(wchar_t * __s1, const wchar_t * __s2, size_t __n) throw(); 
# 271
extern __attribute((gnu_inline)) inline wchar_t *wmemset(wchar_t * __s, wchar_t __c, size_t __n) throw(); 
# 276
extern __attribute((gnu_inline)) inline wchar_t *wmempcpy(wchar_t *__restrict__ __s1, const wchar_t *__restrict__ __s2, size_t __n) throw(); 
# 284
extern __attribute((gnu_inline)) inline wint_t btowc(int __c) throw(); 
# 288
extern __attribute((gnu_inline)) inline int wctob(wint_t __c) throw(); 
# 292
extern int mbsinit(const mbstate_t * __ps) throw() __attribute((__pure__)); 
# 296
extern size_t mbrtowc(wchar_t *__restrict__ __pwc, const char *__restrict__ __s, size_t __n, mbstate_t *__restrict__ __p) throw(); 
# 301
extern __attribute((gnu_inline)) inline size_t wcrtomb(char *__restrict__ __s, wchar_t __wc, mbstate_t *__restrict__ __ps) throw(); 
# 305
extern size_t __mbrlen(const char *__restrict__ __s, size_t __n, mbstate_t *__restrict__ __ps) throw(); 
# 307
extern __attribute((gnu_inline)) inline size_t mbrlen(const char *__restrict__ __s, size_t __n, mbstate_t *__restrict__ __ps) throw(); 
# 316
extern wint_t __btowc_alias(int __c) __asm__("btowc"); 
# 317
__attribute((__gnu_inline__)) extern inline wint_t 
# 318
 __attribute((__leaf__)) btowc(int __c) throw() 
# 319
{ return (((0) && (__c >= ('\000')) && (__c <= ('\177'))) ? (wint_t)__c : __btowc_alias(__c)); 
# 320
} 
# 322
extern int __wctob_alias(wint_t __c) __asm__("wctob"); 
# 323
__attribute((__gnu_inline__)) extern inline int 
# 324
 __attribute((__leaf__)) wctob(wint_t __wc) throw() 
# 325
{ return (((0) && (__wc >= (L'\x0')) && (__wc <= (L'\x7f'))) ? (int)__wc : __wctob_alias(__wc)); 
# 326
} 
# 328
__attribute((__gnu_inline__)) extern inline size_t 
# 329
 __attribute((__leaf__)) mbrlen(const char *__restrict__ __s, size_t __n, mbstate_t *__restrict__ __ps) throw() 
# 331
{ return ((__ps != (__null)) ? mbrtowc(__null, __s, __n, __ps) : __mbrlen(__s, __n, __null)); 
# 332
} 
# 337
extern __attribute((gnu_inline)) inline size_t mbsrtowcs(wchar_t *__restrict__ __dst, const char **__restrict__ __src, size_t __len, mbstate_t *__restrict__ __ps) throw(); 
# 343
extern __attribute((gnu_inline)) inline size_t wcsrtombs(char *__restrict__ __dst, const wchar_t **__restrict__ __src, size_t __len, mbstate_t *__restrict__ __ps) throw(); 
# 351
extern __attribute((gnu_inline)) inline size_t mbsnrtowcs(wchar_t *__restrict__ __dst, const char **__restrict__ __src, size_t __nmc, size_t __len, mbstate_t *__restrict__ __ps) throw(); 
# 357
extern __attribute((gnu_inline)) inline size_t wcsnrtombs(char *__restrict__ __dst, const wchar_t **__restrict__ __src, size_t __nwc, size_t __len, mbstate_t *__restrict__ __ps) throw(); 
# 367
extern int wcwidth(wchar_t __c) throw(); 
# 371
extern int wcswidth(const wchar_t * __s, size_t __n) throw(); 
# 377
extern double wcstod(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr) throw(); 
# 382
extern float wcstof(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr) throw(); 
# 384
extern long double wcstold(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr) throw(); 
# 396 "/usr/include/wchar.h" 3
extern _Float32 wcstof32(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr) throw(); 
# 401
extern _Float64 wcstof64(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr) throw(); 
# 406
extern _Float128 wcstof128(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr) throw(); 
# 411
extern _Float32x wcstof32x(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr) throw(); 
# 416
extern _Float64x wcstof64x(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr) throw(); 
# 428 "/usr/include/wchar.h" 3
extern long wcstol(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base) throw(); 
# 433
extern unsigned long wcstoul(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base) throw(); 
# 441
__extension__ extern long long wcstoll(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base) throw(); 
# 448
__extension__ extern unsigned long long wcstoull(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base) throw(); 
# 457
__extension__ extern long long wcstoq(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base) throw(); 
# 464
__extension__ extern unsigned long long wcstouq(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base) throw(); 
# 473
extern long wcstol_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base, locale_t __loc) throw(); 
# 477
extern unsigned long wcstoul_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base, locale_t __loc) throw(); 
# 482
__extension__ extern long long wcstoll_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base, locale_t __loc) throw(); 
# 487
__extension__ extern unsigned long long wcstoull_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base, locale_t __loc) throw(); 
# 492
extern double wcstod_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, locale_t __loc) throw(); 
# 496
extern float wcstof_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, locale_t __loc) throw(); 
# 500
extern long double wcstold_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, locale_t __loc) throw(); 
# 511 "/usr/include/wchar.h" 3
extern _Float32 wcstof32_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, locale_t __loc) throw(); 
# 517
extern _Float64 wcstof64_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, locale_t __loc) throw(); 
# 523
extern _Float128 wcstof128_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, locale_t __loc) throw(); 
# 529
extern _Float32x wcstof32x_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, locale_t __loc) throw(); 
# 535
extern _Float64x wcstof64x_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, locale_t __loc) throw(); 
# 551 "/usr/include/wchar.h" 3
extern __attribute((gnu_inline)) inline wchar_t *wcpcpy(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src) throw(); 
# 556
extern __attribute((gnu_inline)) inline wchar_t *wcpncpy(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src, size_t __n) throw(); 
# 567 "/usr/include/wchar.h" 3
extern __FILE *open_wmemstream(wchar_t ** __bufloc, size_t * __sizeloc) throw(); 
# 573
extern int fwide(__FILE * __fp, int __mode) throw(); 
# 580
extern __attribute((gnu_inline)) inline int fwprintf(__FILE *__restrict__ __stream, const wchar_t *__restrict__ __format, ...); 
# 587
extern __attribute((gnu_inline)) inline int wprintf(const wchar_t *__restrict__ __format, ...); 
# 590
extern __attribute((gnu_inline)) inline int swprintf(wchar_t *__restrict__ __s, size_t __n, const wchar_t *__restrict__ __format, ...) throw(); 
# 598
extern __attribute((gnu_inline)) inline int vfwprintf(__FILE *__restrict__ __s, const wchar_t *__restrict__ __format, __gnuc_va_list __arg); 
# 606
extern __attribute((gnu_inline)) inline int vwprintf(const wchar_t *__restrict__ __format, __gnuc_va_list __arg); 
# 611
extern __attribute((gnu_inline)) inline int vswprintf(wchar_t *__restrict__ __s, size_t __n, const wchar_t *__restrict__ __format, __gnuc_va_list __arg) throw(); 
# 621
extern int fwscanf(__FILE *__restrict__ __stream, const wchar_t *__restrict__ __format, ...) __asm__("__isoc99_fwscanf"); 
# 628
extern int wscanf(const wchar_t *__restrict__ __format, ...) __asm__("__isoc99_wscanf"); 
# 631
extern int swscanf(const wchar_t *__restrict__ __s, const wchar_t *__restrict__ __format, ...) throw() __asm__("__isoc99_swscanf"); 
# 640
extern int fwscanf(__FILE *__restrict__ __stream, const wchar_t *__restrict__ __format, ...) __asm__("__isoc99_fwscanf"); 
# 644
extern int wscanf(const wchar_t *__restrict__ __format, ...) __asm__("__isoc99_wscanf"); 
# 647
extern int swscanf(const wchar_t *__restrict__ __s, const wchar_t *__restrict__ __format, ...) throw() __asm__("__isoc99_swscanf"); 
# 671 "/usr/include/wchar.h" 3
extern int vfwscanf(__FILE *__restrict__ __s, const wchar_t *__restrict__ __format, __gnuc_va_list __arg) __asm__("__isoc99_vfwscanf"); 
# 679
extern int vwscanf(const wchar_t *__restrict__ __format, __gnuc_va_list __arg) __asm__("__isoc99_vwscanf"); 
# 683
extern int vswscanf(const wchar_t *__restrict__ __s, const wchar_t *__restrict__ __format, __gnuc_va_list __arg) throw() __asm__("__isoc99_vswscanf"); 
# 693
extern int vfwscanf(__FILE *__restrict__ __s, const wchar_t *__restrict__ __format, __gnuc_va_list __arg) __asm__("__isoc99_vfwscanf"); 
# 697
extern int vwscanf(const wchar_t *__restrict__ __format, __gnuc_va_list __arg) __asm__("__isoc99_vwscanf"); 
# 700
extern int vswscanf(const wchar_t *__restrict__ __s, const wchar_t *__restrict__ __format, __gnuc_va_list __arg) throw() __asm__("__isoc99_vswscanf"); 
# 726 "/usr/include/wchar.h" 3
extern wint_t fgetwc(__FILE * __stream); 
# 727
extern wint_t getwc(__FILE * __stream); 
# 733
extern wint_t getwchar(); 
# 740
extern wint_t fputwc(wchar_t __wc, __FILE * __stream); 
# 741
extern wint_t putwc(wchar_t __wc, __FILE * __stream); 
# 747
extern wint_t putwchar(wchar_t __wc); 
# 755
extern __attribute((gnu_inline)) inline wchar_t *fgetws(wchar_t *__restrict__ __ws, int __n, __FILE *__restrict__ __stream); 
# 762
extern int fputws(const wchar_t *__restrict__ __ws, __FILE *__restrict__ __stream); 
# 770
extern wint_t ungetwc(wint_t __wc, __FILE * __stream); 
# 781 "/usr/include/wchar.h" 3
extern wint_t getwc_unlocked(__FILE * __stream); 
# 782
extern wint_t getwchar_unlocked(); 
# 790
extern wint_t fgetwc_unlocked(__FILE * __stream); 
# 798
extern wint_t fputwc_unlocked(wchar_t __wc, __FILE * __stream); 
# 807 "/usr/include/wchar.h" 3
extern wint_t putwc_unlocked(wchar_t __wc, __FILE * __stream); 
# 808
extern wint_t putwchar_unlocked(wchar_t __wc); 
# 817 "/usr/include/wchar.h" 3
extern __attribute((gnu_inline)) inline wchar_t *fgetws_unlocked(wchar_t *__restrict__ __ws, int __n, __FILE *__restrict__ __stream); 
# 826
extern int fputws_unlocked(const wchar_t *__restrict__ __ws, __FILE *__restrict__ __stream); 
# 834
extern size_t wcsftime(wchar_t *__restrict__ __s, size_t __maxsize, const wchar_t *__restrict__ __format, const tm *__restrict__ __tp) throw(); 
# 841
extern size_t wcsftime_l(wchar_t *__restrict__ __s, size_t __maxsize, const wchar_t *__restrict__ __format, const tm *__restrict__ __tp, locale_t __loc) throw(); 
# 24 "/usr/include/aarch64-linux-gnu/bits/wchar2.h" 3
extern wchar_t *__wmemcpy_chk(wchar_t *__restrict__ __s1, const wchar_t *__restrict__ __s2, size_t __n, size_t __ns1) throw(); 
# 27
extern wchar_t *__wmemcpy_alias(wchar_t *__restrict__ __s1, const wchar_t *__restrict__ __s2, size_t __n) throw() __asm__("wmemcpy"); 
# 31
extern wchar_t *__wmemcpy_chk_warn(wchar_t *__restrict__ __s1, const wchar_t *__restrict__ __s2, size_t __n, size_t __ns1) throw() __asm__("__wmemcpy_chk")
# 35
 __attribute((__warning__("wmemcpy called with length bigger than size of destination buffer"))); 
# 38
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) 
# 39
__attribute((__leaf__)) extern inline wchar_t *wmemcpy(wchar_t *__restrict__ __s1, const wchar_t *__restrict__ __s2, size_t __n) throw() 
# 41
{ 
# 42
if (__builtin_object_size(__s1, 0) != ((size_t)(-1))) 
# 43
{ 
# 44
if (!(0)) { 
# 45
return __wmemcpy_chk(__s1, __s2, __n, __builtin_object_size(__s1, 0) / sizeof(wchar_t)); }  
# 48
if (__n > (__builtin_object_size(__s1, 0) / sizeof(wchar_t))) { 
# 49
return __wmemcpy_chk_warn(__s1, __s2, __n, __builtin_object_size(__s1, 0) / sizeof(wchar_t)); }  
# 51
}  
# 52
return __wmemcpy_alias(__s1, __s2, __n); 
# 53
} 
# 56
extern wchar_t *__wmemmove_chk(wchar_t * __s1, const wchar_t * __s2, size_t __n, size_t __ns1) throw(); 
# 58
extern wchar_t *__wmemmove_alias(wchar_t * __s1, const wchar_t * __s2, size_t __n) throw() __asm__("wmemmove"); 
# 61
extern wchar_t *__wmemmove_chk_warn(wchar_t * __s1, const wchar_t * __s2, size_t __n, size_t __ns1) throw() __asm__("__wmemmove_chk")
# 64
 __attribute((__warning__("wmemmove called with length bigger than size of destination buffer"))); 
# 67
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) 
# 68
__attribute((__leaf__)) extern inline wchar_t *wmemmove(wchar_t *__s1, const wchar_t *__s2, size_t __n) throw() 
# 69
{ 
# 70
if (__builtin_object_size(__s1, 0) != ((size_t)(-1))) 
# 71
{ 
# 72
if (!(0)) { 
# 73
return __wmemmove_chk(__s1, __s2, __n, __builtin_object_size(__s1, 0) / sizeof(wchar_t)); }  
# 76
if (__n > (__builtin_object_size(__s1, 0) / sizeof(wchar_t))) { 
# 77
return __wmemmove_chk_warn(__s1, __s2, __n, __builtin_object_size(__s1, 0) / sizeof(wchar_t)); }  
# 79
}  
# 80
return __wmemmove_alias(__s1, __s2, __n); 
# 81
} 
# 85
extern wchar_t *__wmempcpy_chk(wchar_t *__restrict__ __s1, const wchar_t *__restrict__ __s2, size_t __n, size_t __ns1) throw(); 
# 88
extern wchar_t *__wmempcpy_alias(wchar_t *__restrict__ __s1, const wchar_t *__restrict__ __s2, size_t __n) throw() __asm__("wmempcpy"); 
# 92
extern wchar_t *__wmempcpy_chk_warn(wchar_t *__restrict__ __s1, const wchar_t *__restrict__ __s2, size_t __n, size_t __ns1) throw() __asm__("__wmempcpy_chk")
# 96
 __attribute((__warning__("wmempcpy called with length bigger than size of destination buffer"))); 
# 99
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) 
# 100
__attribute((__leaf__)) extern inline wchar_t *wmempcpy(wchar_t *__restrict__ __s1, const wchar_t *__restrict__ __s2, size_t __n) throw() 
# 102
{ 
# 103
if (__builtin_object_size(__s1, 0) != ((size_t)(-1))) 
# 104
{ 
# 105
if (!(0)) { 
# 106
return __wmempcpy_chk(__s1, __s2, __n, __builtin_object_size(__s1, 0) / sizeof(wchar_t)); }  
# 109
if (__n > (__builtin_object_size(__s1, 0) / sizeof(wchar_t))) { 
# 110
return __wmempcpy_chk_warn(__s1, __s2, __n, __builtin_object_size(__s1, 0) / sizeof(wchar_t)); }  
# 112
}  
# 113
return __wmempcpy_alias(__s1, __s2, __n); 
# 114
} 
# 118
extern wchar_t *__wmemset_chk(wchar_t * __s, wchar_t __c, size_t __n, size_t __ns) throw(); 
# 120
extern wchar_t *__wmemset_alias(wchar_t * __s, wchar_t __c, size_t __n) throw() __asm__("wmemset"); 
# 122
extern wchar_t *__wmemset_chk_warn(wchar_t * __s, wchar_t __c, size_t __n, size_t __ns) throw() __asm__("__wmemset_chk")
# 125
 __attribute((__warning__("wmemset called with length bigger than size of destination buffer"))); 
# 128
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) 
# 129
__attribute((__leaf__)) extern inline wchar_t *wmemset(wchar_t *__s, wchar_t __c, size_t __n) throw() 
# 130
{ 
# 131
if (__builtin_object_size(__s, 0) != ((size_t)(-1))) 
# 132
{ 
# 133
if (!(0)) { 
# 134
return __wmemset_chk(__s, __c, __n, __builtin_object_size(__s, 0) / sizeof(wchar_t)); }  
# 136
if (__n > (__builtin_object_size(__s, 0) / sizeof(wchar_t))) { 
# 137
return __wmemset_chk_warn(__s, __c, __n, __builtin_object_size(__s, 0) / sizeof(wchar_t)); }  
# 139
}  
# 140
return __wmemset_alias(__s, __c, __n); 
# 141
} 
# 144
extern wchar_t *__wcscpy_chk(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src, size_t __n) throw(); 
# 147
extern wchar_t *__wcscpy_alias(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src) throw() __asm__("wcscpy"); 
# 151
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) 
# 152
__attribute((__leaf__)) extern inline wchar_t *wcscpy(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src) throw() 
# 153
{ 
# 154
if (__builtin_object_size(__dest, 2 > 1) != ((size_t)(-1))) { 
# 155
return __wcscpy_chk(__dest, __src, __builtin_object_size(__dest, 2 > 1) / sizeof(wchar_t)); }  
# 156
return __wcscpy_alias(__dest, __src); 
# 157
} 
# 160
extern wchar_t *__wcpcpy_chk(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src, size_t __destlen) throw(); 
# 163
extern wchar_t *__wcpcpy_alias(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src) throw() __asm__("wcpcpy"); 
# 167
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) 
# 168
__attribute((__leaf__)) extern inline wchar_t *wcpcpy(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src) throw() 
# 169
{ 
# 170
if (__builtin_object_size(__dest, 2 > 1) != ((size_t)(-1))) { 
# 171
return __wcpcpy_chk(__dest, __src, __builtin_object_size(__dest, 2 > 1) / sizeof(wchar_t)); }  
# 172
return __wcpcpy_alias(__dest, __src); 
# 173
} 
# 176
extern wchar_t *__wcsncpy_chk(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src, size_t __n, size_t __destlen) throw(); 
# 179
extern wchar_t *__wcsncpy_alias(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src, size_t __n) throw() __asm__("wcsncpy"); 
# 183
extern wchar_t *__wcsncpy_chk_warn(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src, size_t __n, size_t __destlen) throw() __asm__("__wcsncpy_chk")
# 187
 __attribute((__warning__("wcsncpy called with length bigger than size of destination buffer"))); 
# 190
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) 
# 191
__attribute((__leaf__)) extern inline wchar_t *wcsncpy(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src, size_t __n) throw() 
# 193
{ 
# 194
if (__builtin_object_size(__dest, 2 > 1) != ((size_t)(-1))) 
# 195
{ 
# 196
if (!(0)) { 
# 197
return __wcsncpy_chk(__dest, __src, __n, __builtin_object_size(__dest, 2 > 1) / sizeof(wchar_t)); }  
# 199
if (__n > (__builtin_object_size(__dest, 2 > 1) / sizeof(wchar_t))) { 
# 200
return __wcsncpy_chk_warn(__dest, __src, __n, __builtin_object_size(__dest, 2 > 1) / sizeof(wchar_t)); }  
# 202
}  
# 203
return __wcsncpy_alias(__dest, __src, __n); 
# 204
} 
# 207
extern wchar_t *__wcpncpy_chk(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src, size_t __n, size_t __destlen) throw(); 
# 210
extern wchar_t *__wcpncpy_alias(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src, size_t __n) throw() __asm__("wcpncpy"); 
# 214
extern wchar_t *__wcpncpy_chk_warn(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src, size_t __n, size_t __destlen) throw() __asm__("__wcpncpy_chk")
# 218
 __attribute((__warning__("wcpncpy called with length bigger than size of destination buffer"))); 
# 221
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) 
# 222
__attribute((__leaf__)) extern inline wchar_t *wcpncpy(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src, size_t __n) throw() 
# 224
{ 
# 225
if (__builtin_object_size(__dest, 2 > 1) != ((size_t)(-1))) 
# 226
{ 
# 227
if (!(0)) { 
# 228
return __wcpncpy_chk(__dest, __src, __n, __builtin_object_size(__dest, 2 > 1) / sizeof(wchar_t)); }  
# 230
if (__n > (__builtin_object_size(__dest, 2 > 1) / sizeof(wchar_t))) { 
# 231
return __wcpncpy_chk_warn(__dest, __src, __n, __builtin_object_size(__dest, 2 > 1) / sizeof(wchar_t)); }  
# 233
}  
# 234
return __wcpncpy_alias(__dest, __src, __n); 
# 235
} 
# 238
extern wchar_t *__wcscat_chk(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src, size_t __destlen) throw(); 
# 241
extern wchar_t *__wcscat_alias(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src) throw() __asm__("wcscat"); 
# 245
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) 
# 246
__attribute((__leaf__)) extern inline wchar_t *wcscat(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src) throw() 
# 247
{ 
# 248
if (__builtin_object_size(__dest, 2 > 1) != ((size_t)(-1))) { 
# 249
return __wcscat_chk(__dest, __src, __builtin_object_size(__dest, 2 > 1) / sizeof(wchar_t)); }  
# 250
return __wcscat_alias(__dest, __src); 
# 251
} 
# 254
extern wchar_t *__wcsncat_chk(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src, size_t __n, size_t __destlen) throw(); 
# 257
extern wchar_t *__wcsncat_alias(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src, size_t __n) throw() __asm__("wcsncat"); 
# 262
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) 
# 263
__attribute((__leaf__)) extern inline wchar_t *wcsncat(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src, size_t __n) throw() 
# 265
{ 
# 266
if (__builtin_object_size(__dest, 2 > 1) != ((size_t)(-1))) { 
# 267
return __wcsncat_chk(__dest, __src, __n, __builtin_object_size(__dest, 2 > 1) / sizeof(wchar_t)); }  
# 269
return __wcsncat_alias(__dest, __src, __n); 
# 270
} 
# 273
extern int __swprintf_chk(wchar_t *__restrict__ __s, size_t __n, int __flag, size_t __s_len, const wchar_t *__restrict__ __format, ...) throw(); 
# 278
extern int __swprintf_alias(wchar_t *__restrict__ __s, size_t __n, const wchar_t *__restrict__ __fmt, ...) throw() __asm__("swprintf"); 
# 284
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline int 
# 285
 __attribute((__leaf__)) swprintf(wchar_t *__restrict__ __s, size_t __n, const wchar_t *__restrict__ __fmt, ...) throw() 
# 287
{ 
# 288
if ((__builtin_object_size(__s, 2 > 1) != ((size_t)(-1))) || (2 > 1)) { 
# 289
return __swprintf_chk(__s, __n, 2 - 1, __builtin_object_size(__s, 2 > 1) / sizeof(wchar_t), __fmt, __builtin_va_arg_pack()); }  
# 292
return __swprintf_alias(__s, __n, __fmt, __builtin_va_arg_pack()); 
# 293
} 
# 303 "/usr/include/aarch64-linux-gnu/bits/wchar2.h" 3
extern int __vswprintf_chk(wchar_t *__restrict__ __s, size_t __n, int __flag, size_t __s_len, const wchar_t *__restrict__ __format, __gnuc_va_list __arg) throw(); 
# 309
extern int __vswprintf_alias(wchar_t *__restrict__ __s, size_t __n, const wchar_t *__restrict__ __fmt, __gnuc_va_list __ap) throw() __asm__("vswprintf"); 
# 314
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline int 
# 315
 __attribute((__leaf__)) vswprintf(wchar_t *__restrict__ __s, size_t __n, const wchar_t *__restrict__ __fmt, __gnuc_va_list __ap) throw() 
# 317
{ 
# 318
if ((__builtin_object_size(__s, 2 > 1) != ((size_t)(-1))) || (2 > 1)) { 
# 319
return __vswprintf_chk(__s, __n, 2 - 1, __builtin_object_size(__s, 2 > 1) / sizeof(wchar_t), __fmt, __ap); }  
# 321
return __vswprintf_alias(__s, __n, __fmt, __ap); 
# 322
} 
# 327
extern int __fwprintf_chk(__FILE *__restrict__ __stream, int __flag, const wchar_t *__restrict__ __format, ...); 
# 329
extern int __wprintf_chk(int __flag, const wchar_t *__restrict__ __format, ...); 
# 331
extern int __vfwprintf_chk(__FILE *__restrict__ __stream, int __flag, const wchar_t *__restrict__ __format, __gnuc_va_list __ap); 
# 334
extern int __vwprintf_chk(int __flag, const wchar_t *__restrict__ __format, __gnuc_va_list __ap); 
# 338
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline int 
# 339
wprintf(const wchar_t *__restrict__ __fmt, ...) 
# 340
{ 
# 341
return __wprintf_chk(2 - 1, __fmt, __builtin_va_arg_pack()); 
# 342
} 
# 344
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline int 
# 345
fwprintf(__FILE *__restrict__ __stream, const wchar_t *__restrict__ __fmt, ...) 
# 346
{ 
# 347
return __fwprintf_chk(__stream, 2 - 1, __fmt, __builtin_va_arg_pack()); 
# 349
} 
# 357
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline int 
# 358
vwprintf(const wchar_t *__restrict__ __fmt, __gnuc_va_list __ap) 
# 359
{ 
# 360
return __vwprintf_chk(2 - 1, __fmt, __ap); 
# 361
} 
# 363
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline int 
# 364
vfwprintf(__FILE *__restrict__ __stream, const wchar_t *__restrict__ 
# 365
__fmt, __gnuc_va_list __ap) 
# 366
{ 
# 367
return __vfwprintf_chk(__stream, 2 - 1, __fmt, __ap); 
# 368
} 
# 372
extern wchar_t *__fgetws_chk(wchar_t *__restrict__ __s, size_t __size, int __n, __FILE *__restrict__ __stream)
# 373
 __attribute((__warn_unused_result__)); 
# 374
extern wchar_t *__fgetws_alias(wchar_t *__restrict__ __s, int __n, __FILE *__restrict__ __stream) __asm__("fgetws")
# 376
 __attribute((__warn_unused_result__)); 
# 377
extern wchar_t *__fgetws_chk_warn(wchar_t *__restrict__ __s, size_t __size, int __n, __FILE *__restrict__ __stream) __asm__("__fgetws_chk")
# 380
 __attribute((__warn_unused_result__)) __attribute((__warning__("fgetws called with bigger size than length of destination buffer"))); 
# 383
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) __attribute((__warn_unused_result__)) extern inline wchar_t *
# 384
fgetws(wchar_t *__restrict__ __s, int __n, __FILE *__restrict__ __stream) 
# 385
{ 
# 386
if (__builtin_object_size(__s, 2 > 1) != ((size_t)(-1))) 
# 387
{ 
# 388
if ((!(0)) || (__n <= 0)) { 
# 389
return __fgetws_chk(__s, __builtin_object_size(__s, 2 > 1) / sizeof(wchar_t), __n, __stream); }  
# 392
if (((size_t)__n) > (__builtin_object_size(__s, 2 > 1) / sizeof(wchar_t))) { 
# 393
return __fgetws_chk_warn(__s, __builtin_object_size(__s, 2 > 1) / sizeof(wchar_t), __n, __stream); }  
# 395
}  
# 396
return __fgetws_alias(__s, __n, __stream); 
# 397
} 
# 400
extern wchar_t *__fgetws_unlocked_chk(wchar_t *__restrict__ __s, size_t __size, int __n, __FILE *__restrict__ __stream)
# 402
 __attribute((__warn_unused_result__)); 
# 403
extern wchar_t *__fgetws_unlocked_alias(wchar_t *__restrict__ __s, int __n, __FILE *__restrict__ __stream) __asm__("fgetws_unlocked")
# 406
 __attribute((__warn_unused_result__)); 
# 407
extern wchar_t *__fgetws_unlocked_chk_warn(wchar_t *__restrict__ __s, size_t __size, int __n, __FILE *__restrict__ __stream) __asm__("__fgetws_unlocked_chk")
# 411
 __attribute((__warn_unused_result__)) __attribute((__warning__("fgetws_unlocked called with bigger size than length of destination buffer"))); 
# 414
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) __attribute((__warn_unused_result__)) extern inline wchar_t *
# 415
fgetws_unlocked(wchar_t *__restrict__ __s, int __n, __FILE *__restrict__ __stream) 
# 416
{ 
# 417
if (__builtin_object_size(__s, 2 > 1) != ((size_t)(-1))) 
# 418
{ 
# 419
if ((!(0)) || (__n <= 0)) { 
# 420
return __fgetws_unlocked_chk(__s, __builtin_object_size(__s, 2 > 1) / sizeof(wchar_t), __n, __stream); }  
# 423
if (((size_t)__n) > (__builtin_object_size(__s, 2 > 1) / sizeof(wchar_t))) { 
# 424
return __fgetws_unlocked_chk_warn(__s, __builtin_object_size(__s, 2 > 1) / sizeof(wchar_t), __n, __stream); }  
# 426
}  
# 427
return __fgetws_unlocked_alias(__s, __n, __stream); 
# 428
} 
# 432
extern size_t __wcrtomb_chk(char *__restrict__ __s, wchar_t __wchar, mbstate_t *__restrict__ __p, size_t __buflen) throw()
# 434
 __attribute((__warn_unused_result__)); 
# 435
extern size_t __wcrtomb_alias(char *__restrict__ __s, wchar_t __wchar, mbstate_t *__restrict__ __ps) throw() __asm__("wcrtomb")
# 437
 __attribute((__warn_unused_result__)); 
# 439
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) __attribute((__warn_unused_result__)) extern inline size_t 
# 440
 __attribute((__leaf__)) wcrtomb(char *__restrict__ __s, wchar_t __wchar, mbstate_t *__restrict__ __ps) throw() 
# 442
{ 
# 450
if ((__builtin_object_size(__s, 2 > 1) != ((size_t)(-1))) && ((16) > __builtin_object_size(__s, 2 > 1))) { 
# 451
return __wcrtomb_chk(__s, __wchar, __ps, __builtin_object_size(__s, 2 > 1)); }  
# 452
return __wcrtomb_alias(__s, __wchar, __ps); 
# 453
} 
# 456
extern size_t __mbsrtowcs_chk(wchar_t *__restrict__ __dst, const char **__restrict__ __src, size_t __len, mbstate_t *__restrict__ __ps, size_t __dstlen) throw(); 
# 460
extern size_t __mbsrtowcs_alias(wchar_t *__restrict__ __dst, const char **__restrict__ __src, size_t __len, mbstate_t *__restrict__ __ps) throw() __asm__("mbsrtowcs"); 
# 465
extern size_t __mbsrtowcs_chk_warn(wchar_t *__restrict__ __dst, const char **__restrict__ __src, size_t __len, mbstate_t *__restrict__ __ps, size_t __dstlen) throw() __asm__("__mbsrtowcs_chk")
# 470
 __attribute((__warning__("mbsrtowcs called with dst buffer smaller than len * sizeof (wchar_t)"))); 
# 473
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline size_t 
# 474
 __attribute((__leaf__)) mbsrtowcs(wchar_t *__restrict__ __dst, const char **__restrict__ __src, size_t __len, mbstate_t *__restrict__ __ps) throw() 
# 476
{ 
# 477
if (__builtin_object_size(__dst, 2 > 1) != ((size_t)(-1))) 
# 478
{ 
# 479
if (!(0)) { 
# 480
return __mbsrtowcs_chk(__dst, __src, __len, __ps, __builtin_object_size(__dst, 2 > 1) / sizeof(wchar_t)); }  
# 483
if (__len > (__builtin_object_size(__dst, 2 > 1) / sizeof(wchar_t))) { 
# 484
return __mbsrtowcs_chk_warn(__dst, __src, __len, __ps, __builtin_object_size(__dst, 2 > 1) / sizeof(wchar_t)); }  
# 486
}  
# 487
return __mbsrtowcs_alias(__dst, __src, __len, __ps); 
# 488
} 
# 491
extern size_t __wcsrtombs_chk(char *__restrict__ __dst, const wchar_t **__restrict__ __src, size_t __len, mbstate_t *__restrict__ __ps, size_t __dstlen) throw(); 
# 495
extern size_t __wcsrtombs_alias(char *__restrict__ __dst, const wchar_t **__restrict__ __src, size_t __len, mbstate_t *__restrict__ __ps) throw() __asm__("wcsrtombs"); 
# 500
extern size_t __wcsrtombs_chk_warn(char *__restrict__ __dst, const wchar_t **__restrict__ __src, size_t __len, mbstate_t *__restrict__ __ps, size_t __dstlen) throw() __asm__("__wcsrtombs_chk")
# 505
 __attribute((__warning__("wcsrtombs called with dst buffer smaller than len"))); 
# 507
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline size_t 
# 508
 __attribute((__leaf__)) wcsrtombs(char *__restrict__ __dst, const wchar_t **__restrict__ __src, size_t __len, mbstate_t *__restrict__ __ps) throw() 
# 510
{ 
# 511
if (__builtin_object_size(__dst, 2 > 1) != ((size_t)(-1))) 
# 512
{ 
# 513
if (!(0)) { 
# 514
return __wcsrtombs_chk(__dst, __src, __len, __ps, __builtin_object_size(__dst, 2 > 1)); }  
# 516
if (__len > __builtin_object_size(__dst, 2 > 1)) { 
# 517
return __wcsrtombs_chk_warn(__dst, __src, __len, __ps, __builtin_object_size(__dst, 2 > 1)); }  
# 518
}  
# 519
return __wcsrtombs_alias(__dst, __src, __len, __ps); 
# 520
} 
# 524
extern size_t __mbsnrtowcs_chk(wchar_t *__restrict__ __dst, const char **__restrict__ __src, size_t __nmc, size_t __len, mbstate_t *__restrict__ __ps, size_t __dstlen) throw(); 
# 528
extern size_t __mbsnrtowcs_alias(wchar_t *__restrict__ __dst, const char **__restrict__ __src, size_t __nmc, size_t __len, mbstate_t *__restrict__ __ps) throw() __asm__("mbsnrtowcs"); 
# 533
extern size_t __mbsnrtowcs_chk_warn(wchar_t *__restrict__ __dst, const char **__restrict__ __src, size_t __nmc, size_t __len, mbstate_t *__restrict__ __ps, size_t __dstlen) throw() __asm__("__mbsnrtowcs_chk")
# 538
 __attribute((__warning__("mbsnrtowcs called with dst buffer smaller than len * sizeof (wchar_t)"))); 
# 541
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline size_t 
# 542
 __attribute((__leaf__)) mbsnrtowcs(wchar_t *__restrict__ __dst, const char **__restrict__ __src, size_t __nmc, size_t __len, mbstate_t *__restrict__ __ps) throw() 
# 544
{ 
# 545
if (__builtin_object_size(__dst, 2 > 1) != ((size_t)(-1))) 
# 546
{ 
# 547
if (!(0)) { 
# 548
return __mbsnrtowcs_chk(__dst, __src, __nmc, __len, __ps, __builtin_object_size(__dst, 2 > 1) / sizeof(wchar_t)); }  
# 551
if (__len > (__builtin_object_size(__dst, 2 > 1) / sizeof(wchar_t))) { 
# 552
return __mbsnrtowcs_chk_warn(__dst, __src, __nmc, __len, __ps, __builtin_object_size(__dst, 2 > 1) / sizeof(wchar_t)); }  
# 554
}  
# 555
return __mbsnrtowcs_alias(__dst, __src, __nmc, __len, __ps); 
# 556
} 
# 559
extern size_t __wcsnrtombs_chk(char *__restrict__ __dst, const wchar_t **__restrict__ __src, size_t __nwc, size_t __len, mbstate_t *__restrict__ __ps, size_t __dstlen) throw(); 
# 564
extern size_t __wcsnrtombs_alias(char *__restrict__ __dst, const wchar_t **__restrict__ __src, size_t __nwc, size_t __len, mbstate_t *__restrict__ __ps) throw() __asm__("wcsnrtombs"); 
# 569
extern size_t __wcsnrtombs_chk_warn(char *__restrict__ __dst, const wchar_t **__restrict__ __src, size_t __nwc, size_t __len, mbstate_t *__restrict__ __ps, size_t __dstlen) throw() __asm__("__wcsnrtombs_chk")
# 575
 __attribute((__warning__("wcsnrtombs called with dst buffer smaller than len"))); 
# 577
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline size_t 
# 578
 __attribute((__leaf__)) wcsnrtombs(char *__restrict__ __dst, const wchar_t **__restrict__ __src, size_t __nwc, size_t __len, mbstate_t *__restrict__ __ps) throw() 
# 580
{ 
# 581
if (__builtin_object_size(__dst, 2 > 1) != ((size_t)(-1))) 
# 582
{ 
# 583
if (!(0)) { 
# 584
return __wcsnrtombs_chk(__dst, __src, __nwc, __len, __ps, __builtin_object_size(__dst, 2 > 1)); }  
# 587
if (__len > __builtin_object_size(__dst, 2 > 1)) { 
# 588
return __wcsnrtombs_chk_warn(__dst, __src, __nwc, __len, __ps, __builtin_object_size(__dst, 2 > 1)); }  
# 590
}  
# 591
return __wcsnrtombs_alias(__dst, __src, __nwc, __len, __ps); 
# 592
} 
# 856 "/usr/include/wchar.h" 3
}
# 62 "/usr/include/c++/9/cwchar" 3
namespace std { 
# 64
using ::mbstate_t;
# 65
}
# 135 "/usr/include/c++/9/cwchar" 3
extern "C++" {
# 137
namespace std __attribute((__visibility__("default"))) { 
# 141
using ::wint_t;
# 143
using ::btowc;
# 144
using ::fgetwc;
# 145
using ::fgetws;
# 146
using ::fputwc;
# 147
using ::fputws;
# 148
using ::fwide;
# 149
using ::fwprintf;
# 150
using ::fwscanf;
# 151
using ::getwc;
# 152
using ::getwchar;
# 153
using ::mbrlen;
# 154
using ::mbrtowc;
# 155
using ::mbsinit;
# 156
using ::mbsrtowcs;
# 157
using ::putwc;
# 158
using ::putwchar;
# 160
using ::swprintf;
# 162
using ::swscanf;
# 163
using ::ungetwc;
# 164
using ::vfwprintf;
# 166
using ::vfwscanf;
# 169
using ::vswprintf;
# 172
using ::vswscanf;
# 174
using ::vwprintf;
# 176
using ::vwscanf;
# 178
using ::wcrtomb;
# 179
using ::wcscat;
# 180
using ::wcscmp;
# 181
using ::wcscoll;
# 182
using ::wcscpy;
# 183
using ::wcscspn;
# 184
using ::wcsftime;
# 185
using ::wcslen;
# 186
using ::wcsncat;
# 187
using ::wcsncmp;
# 188
using ::wcsncpy;
# 189
using ::wcsrtombs;
# 190
using ::wcsspn;
# 191
using ::wcstod;
# 193
using ::wcstof;
# 195
using ::wcstok;
# 196
using ::wcstol;
# 197
using ::wcstoul;
# 198
using ::wcsxfrm;
# 199
using ::wctob;
# 200
using ::wmemcmp;
# 201
using ::wmemcpy;
# 202
using ::wmemmove;
# 203
using ::wmemset;
# 204
using ::wprintf;
# 205
using ::wscanf;
# 206
using ::wcschr;
# 207
using ::wcspbrk;
# 208
using ::wcsrchr;
# 209
using ::wcsstr;
# 210
using ::wmemchr;
# 235 "/usr/include/c++/9/cwchar" 3
}
# 236
}
# 244
namespace __gnu_cxx { 
# 251
using ::wcstold;
# 260 "/usr/include/c++/9/cwchar" 3
using ::wcstoll;
# 261
using ::wcstoull;
# 263
}
# 265
namespace std { 
# 267
using __gnu_cxx::wcstold;
# 268
using __gnu_cxx::wcstoll;
# 269
using __gnu_cxx::wcstoull;
# 270
}
# 280 "/usr/include/c++/9/cwchar" 3
namespace std { 
# 300
}
# 68 "/usr/include/c++/9/bits/postypes.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 88 "/usr/include/c++/9/bits/postypes.h" 3
typedef long streamoff; 
# 98 "/usr/include/c++/9/bits/postypes.h" 3
typedef ptrdiff_t streamsize; 
# 111 "/usr/include/c++/9/bits/postypes.h" 3
template< class _StateT> 
# 112
class fpos { 
# 115
streamoff _M_off; 
# 116
_StateT _M_state; 
# 123
public: fpos() : _M_off((0)), _M_state() 
# 124
{ } 
# 133 "/usr/include/c++/9/bits/postypes.h" 3
fpos(streamoff __off) : _M_off(__off), _M_state() 
# 134
{ } 
# 137
fpos(const fpos &) = default;
# 138
fpos &operator=(const fpos &) = default;
# 139
~fpos() = default;
# 143
operator streamoff() const { return _M_off; } 
# 147
void state(_StateT __st) 
# 148
{ (_M_state) = __st; } 
# 152
_StateT state() const 
# 153
{ return _M_state; } 
# 160
fpos &operator+=(streamoff __off) 
# 161
{ 
# 162
(_M_off) += __off; 
# 163
return *this; 
# 164
} 
# 171
fpos &operator-=(streamoff __off) 
# 172
{ 
# 173
(_M_off) -= __off; 
# 174
return *this; 
# 175
} 
# 184
fpos operator+(streamoff __off) const 
# 185
{ 
# 186
fpos __pos(*this); 
# 187
__pos += __off; 
# 188
return __pos; 
# 189
} 
# 198
fpos operator-(streamoff __off) const 
# 199
{ 
# 200
fpos __pos(*this); 
# 201
__pos -= __off; 
# 202
return __pos; 
# 203
} 
# 211
streamoff operator-(const fpos &__other) const 
# 212
{ return (_M_off) - (__other._M_off); } 
# 213
}; 
# 220
template< class _StateT> inline bool 
# 222
operator==(const fpos< _StateT>  &__lhs, const fpos< _StateT>  &__rhs) 
# 223
{ return ((streamoff)__lhs) == ((streamoff)__rhs); } 
# 225
template< class _StateT> inline bool 
# 227
operator!=(const fpos< _StateT>  &__lhs, const fpos< _StateT>  &__rhs) 
# 228
{ return ((streamoff)__lhs) != ((streamoff)__rhs); } 
# 234
typedef fpos< __mbstate_t>  streampos; 
# 236
typedef fpos< __mbstate_t>  wstreampos; 
# 245 "/usr/include/c++/9/bits/postypes.h" 3
typedef fpos< __mbstate_t>  u16streampos; 
# 247
typedef fpos< __mbstate_t>  u32streampos; 
# 251
}
# 47 "/usr/include/c++/9/bits/char_traits.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 61 "/usr/include/c++/9/bits/char_traits.h" 3
template< class _CharT> 
# 62
struct _Char_types { 
# 64
typedef unsigned long int_type; 
# 65
typedef std::streampos pos_type; 
# 66
typedef std::streamoff off_type; 
# 67
typedef mbstate_t state_type; 
# 68
}; 
# 86 "/usr/include/c++/9/bits/char_traits.h" 3
template< class _CharT> 
# 87
struct char_traits { 
# 89
typedef _CharT char_type; 
# 90
typedef typename _Char_types< _CharT> ::int_type int_type; 
# 91
typedef typename _Char_types< _CharT> ::pos_type pos_type; 
# 92
typedef typename _Char_types< _CharT> ::off_type off_type; 
# 93
typedef typename _Char_types< _CharT> ::state_type state_type; 
# 96
static constexpr void assign(char_type &__c1, const char_type &__c2) 
# 97
{ __c1 = __c2; } 
# 100
static constexpr bool eq(const char_type &__c1, const char_type &__c2) 
# 101
{ return __c1 == __c2; } 
# 104
static constexpr bool lt(const char_type &__c1, const char_type &__c2) 
# 105
{ return __c1 < __c2; } 
# 108
static constexpr int compare(const char_type * __s1, const char_type * __s2, std::size_t __n); 
# 111
static constexpr std::size_t length(const char_type * __s); 
# 114
static constexpr const char_type *find(const char_type * __s, std::size_t __n, const char_type & __a); 
# 117
static char_type *move(char_type * __s1, const char_type * __s2, std::size_t __n); 
# 120
static char_type *copy(char_type * __s1, const char_type * __s2, std::size_t __n); 
# 123
static char_type *assign(char_type * __s, std::size_t __n, char_type __a); 
# 126
static constexpr char_type to_char_type(const int_type &__c) 
# 127
{ return static_cast< char_type>(__c); } 
# 130
static constexpr int_type to_int_type(const char_type &__c) 
# 131
{ return static_cast< int_type>(__c); } 
# 134
static constexpr bool eq_int_type(const int_type &__c1, const int_type &__c2) 
# 135
{ return __c1 == __c2; } 
# 138
static constexpr int_type eof() 
# 139
{ return static_cast< int_type>(-1); } 
# 142
static constexpr int_type not_eof(const int_type &__c) 
# 143
{ return (!(eq_int_type)(__c, (eof)())) ? __c : (to_int_type)(char_type()); } 
# 144
}; 
# 146
template< class _CharT> constexpr int 
# 149
char_traits< _CharT> ::compare(const char_type *__s1, const char_type *__s2, std::size_t __n) 
# 150
{ 
# 151
for (std::size_t __i = (0); __i < __n; ++__i) { 
# 152
if ((lt)(__s1[__i], __s2[__i])) { 
# 153
return -1; } else { 
# 154
if ((lt)(__s2[__i], __s1[__i])) { 
# 155
return 1; }  }  }  
# 156
return 0; 
# 157
} 
# 159
template< class _CharT> constexpr std::size_t 
# 162
char_traits< _CharT> ::length(const char_type *__p) 
# 163
{ 
# 164
std::size_t __i = (0); 
# 165
while (!(eq)(__p[__i], char_type())) { 
# 166
++__i; }  
# 167
return __i; 
# 168
} 
# 170
template< class _CharT> constexpr const typename char_traits< _CharT> ::char_type *
# 173
char_traits< _CharT> ::find(const char_type *__s, std::size_t __n, const char_type &__a) 
# 174
{ 
# 175
for (std::size_t __i = (0); __i < __n; ++__i) { 
# 176
if ((eq)(__s[__i], __a)) { 
# 177
return __s + __i; }  }  
# 178
return 0; 
# 179
} 
# 181
template< class _CharT> typename char_traits< _CharT> ::char_type *
# 184
char_traits< _CharT> ::move(char_type *__s1, const char_type *__s2, std::size_t __n) 
# 185
{ 
# 186
if (__n == (0)) { 
# 187
return __s1; }  
# 188
return static_cast< _CharT *>(__builtin_memmove(__s1, __s2, __n * sizeof(char_type))); 
# 190
} 
# 192
template< class _CharT> typename char_traits< _CharT> ::char_type *
# 195
char_traits< _CharT> ::copy(char_type *__s1, const char_type *__s2, std::size_t __n) 
# 196
{ 
# 198
std::copy(__s2, __s2 + __n, __s1); 
# 199
return __s1; 
# 200
} 
# 202
template< class _CharT> typename char_traits< _CharT> ::char_type *
# 205
char_traits< _CharT> ::assign(char_type *__s, std::size_t __n, char_type __a) 
# 206
{ 
# 208
std::fill_n(__s, __n, __a); 
# 209
return __s; 
# 210
} 
# 213
}
# 215
namespace std __attribute((__visibility__("default"))) { 
# 283 "/usr/include/c++/9/bits/char_traits.h" 3
template< class _CharT> 
# 284
struct char_traits : public __gnu_cxx::char_traits< _CharT>  { 
# 285
}; 
# 290
template<> struct char_traits< char>  { 
# 292
typedef char char_type; 
# 293
typedef int int_type; 
# 294
typedef streampos pos_type; 
# 295
typedef streamoff off_type; 
# 296
typedef mbstate_t state_type; 
# 299
static void assign(char_type &__c1, const char_type &__c2) noexcept 
# 300
{ __c1 = __c2; } 
# 303
static constexpr bool eq(const char_type &__c1, const char_type &__c2) noexcept 
# 304
{ return __c1 == __c2; } 
# 307
static constexpr bool lt(const char_type &__c1, const char_type &__c2) noexcept 
# 308
{ 
# 310
return ((static_cast< unsigned char>(__c1)) < (static_cast< unsigned char>(__c2))); 
# 312
} 
# 315
static int compare(const char_type *__s1, const char_type *__s2, size_t __n) 
# 316
{ 
# 317
if (__n == (0)) { 
# 318
return 0; }  
# 332 "/usr/include/c++/9/bits/char_traits.h" 3
return __builtin_memcmp(__s1, __s2, __n); 
# 333
} 
# 336
static size_t length(const char_type *__s) 
# 337
{ 
# 342
return __builtin_strlen(__s); 
# 343
} 
# 346
static const char_type *find(const char_type *__s, size_t __n, const char_type &__a) 
# 347
{ 
# 348
if (__n == (0)) { 
# 349
return 0; }  
# 356
return static_cast< const char_type *>(__builtin_memchr(__s, __a, __n)); 
# 357
} 
# 360
static char_type *move(char_type *__s1, const char_type *__s2, size_t __n) 
# 361
{ 
# 362
if (__n == (0)) { 
# 363
return __s1; }  
# 364
return static_cast< char_type *>(__builtin_memmove(__s1, __s2, __n)); 
# 365
} 
# 368
static char_type *copy(char_type *__s1, const char_type *__s2, size_t __n) 
# 369
{ 
# 370
if (__n == (0)) { 
# 371
return __s1; }  
# 372
return static_cast< char_type *>(__builtin_memcpy(__s1, __s2, __n)); 
# 373
} 
# 376
static char_type *assign(char_type *__s, size_t __n, char_type __a) 
# 377
{ 
# 378
if (__n == (0)) { 
# 379
return __s; }  
# 380
return static_cast< char_type *>(__builtin_memset(__s, __a, __n)); 
# 381
} 
# 384
static constexpr char_type to_char_type(const int_type &__c) noexcept 
# 385
{ return static_cast< char_type>(__c); } 
# 390
static constexpr int_type to_int_type(const char_type &__c) noexcept 
# 391
{ return static_cast< int_type>(static_cast< unsigned char>(__c)); } 
# 394
static constexpr bool eq_int_type(const int_type &__c1, const int_type &__c2) noexcept 
# 395
{ return __c1 == __c2; } 
# 398
static constexpr int_type eof() noexcept 
# 399
{ return static_cast< int_type>(-1); } 
# 402
static constexpr int_type not_eof(const int_type &__c) noexcept 
# 403
{ return (__c == eof()) ? 0 : __c; } 
# 404
}; 
# 410
template<> struct char_traits< wchar_t>  { 
# 412
typedef wchar_t char_type; 
# 413
typedef wint_t int_type; 
# 414
typedef streamoff off_type; 
# 415
typedef wstreampos pos_type; 
# 416
typedef mbstate_t state_type; 
# 419
static void assign(char_type &__c1, const char_type &__c2) noexcept 
# 420
{ __c1 = __c2; } 
# 423
static constexpr bool eq(const char_type &__c1, const char_type &__c2) noexcept 
# 424
{ return __c1 == __c2; } 
# 427
static constexpr bool lt(const char_type &__c1, const char_type &__c2) noexcept 
# 428
{ return __c1 < __c2; } 
# 431
static int compare(const char_type *__s1, const char_type *__s2, size_t __n) 
# 432
{ 
# 433
if (__n == (0)) { 
# 434
return 0; }  
# 441
return wmemcmp(__s1, __s2, __n); 
# 442
} 
# 445
static size_t length(const char_type *__s) 
# 446
{ 
# 451
return wcslen(__s); 
# 452
} 
# 455
static const char_type *find(const char_type *__s, size_t __n, const char_type &__a) 
# 456
{ 
# 457
if (__n == (0)) { 
# 458
return 0; }  
# 465
return wmemchr(__s, __a, __n); 
# 466
} 
# 469
static char_type *move(char_type *__s1, const char_type *__s2, size_t __n) 
# 470
{ 
# 471
if (__n == (0)) { 
# 472
return __s1; }  
# 473
return wmemmove(__s1, __s2, __n); 
# 474
} 
# 477
static char_type *copy(char_type *__s1, const char_type *__s2, size_t __n) 
# 478
{ 
# 479
if (__n == (0)) { 
# 480
return __s1; }  
# 481
return wmemcpy(__s1, __s2, __n); 
# 482
} 
# 485
static char_type *assign(char_type *__s, size_t __n, char_type __a) 
# 486
{ 
# 487
if (__n == (0)) { 
# 488
return __s; }  
# 489
return wmemset(__s, __a, __n); 
# 490
} 
# 493
static constexpr char_type to_char_type(const int_type &__c) noexcept 
# 494
{ return (char_type)__c; } 
# 497
static constexpr int_type to_int_type(const char_type &__c) noexcept 
# 498
{ return (int_type)__c; } 
# 501
static constexpr bool eq_int_type(const int_type &__c1, const int_type &__c2) noexcept 
# 502
{ return __c1 == __c2; } 
# 505
static constexpr int_type eof() noexcept 
# 506
{ return static_cast< int_type>(4294967295U); } 
# 509
static constexpr int_type not_eof(const int_type &__c) noexcept 
# 510
{ return eq_int_type(__c, eof()) ? 0 : __c; } 
# 511
}; 
# 624 "/usr/include/c++/9/bits/char_traits.h" 3
}
# 44 "/usr/include/c++/9/cstdint" 3
namespace std { 
# 47
using ::int8_t;
# 48
using ::int16_t;
# 49
using ::int32_t;
# 50
using ::int64_t;
# 52
using ::int_fast8_t;
# 53
using ::int_fast16_t;
# 54
using ::int_fast32_t;
# 55
using ::int_fast64_t;
# 57
using ::int_least8_t;
# 58
using ::int_least16_t;
# 59
using ::int_least32_t;
# 60
using ::int_least64_t;
# 62
using ::intmax_t;
# 63
using ::intptr_t;
# 65
using ::uint8_t;
# 66
using ::uint16_t;
# 67
using ::uint32_t;
# 68
using ::uint64_t;
# 70
using ::uint_fast8_t;
# 71
using ::uint_fast16_t;
# 72
using ::uint_fast32_t;
# 73
using ::uint_fast64_t;
# 75
using ::uint_least8_t;
# 76
using ::uint_least16_t;
# 77
using ::uint_least32_t;
# 78
using ::uint_least64_t;
# 80
using ::uintmax_t;
# 81
using ::uintptr_t;
# 87
}
# 630 "/usr/include/c++/9/bits/char_traits.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 635
template<> struct char_traits< char16_t>  { 
# 637
typedef char16_t char_type; 
# 639
typedef uint_least16_t int_type; 
# 645
typedef streamoff off_type; 
# 646
typedef u16streampos pos_type; 
# 647
typedef mbstate_t state_type; 
# 650
static void assign(char_type &__c1, const char_type &__c2) noexcept 
# 651
{ __c1 = __c2; } 
# 654
static constexpr bool eq(const char_type &__c1, const char_type &__c2) noexcept 
# 655
{ return __c1 == __c2; } 
# 658
static constexpr bool lt(const char_type &__c1, const char_type &__c2) noexcept 
# 659
{ return __c1 < __c2; } 
# 662
static int compare(const char_type *__s1, const char_type *__s2, size_t __n) 
# 663
{ 
# 664
for (size_t __i = (0); __i < __n; ++__i) { 
# 665
if (lt(__s1[__i], __s2[__i])) { 
# 666
return -1; } else { 
# 667
if (lt(__s2[__i], __s1[__i])) { 
# 668
return 1; }  }  }  
# 669
return 0; 
# 670
} 
# 673
static size_t length(const char_type *__s) 
# 674
{ 
# 675
size_t __i = (0); 
# 676
while (!eq(__s[__i], char_type())) { 
# 677
++__i; }  
# 678
return __i; 
# 679
} 
# 682
static const char_type *find(const char_type *__s, size_t __n, const char_type &__a) 
# 683
{ 
# 684
for (size_t __i = (0); __i < __n; ++__i) { 
# 685
if (eq(__s[__i], __a)) { 
# 686
return __s + __i; }  }  
# 687
return 0; 
# 688
} 
# 691
static char_type *move(char_type *__s1, const char_type *__s2, size_t __n) 
# 692
{ 
# 693
if (__n == (0)) { 
# 694
return __s1; }  
# 695
return (static_cast< char_type *>(__builtin_memmove(__s1, __s2, __n * sizeof(char_type)))); 
# 697
} 
# 700
static char_type *copy(char_type *__s1, const char_type *__s2, size_t __n) 
# 701
{ 
# 702
if (__n == (0)) { 
# 703
return __s1; }  
# 704
return (static_cast< char_type *>(__builtin_memcpy(__s1, __s2, __n * sizeof(char_type)))); 
# 706
} 
# 709
static char_type *assign(char_type *__s, size_t __n, char_type __a) 
# 710
{ 
# 711
for (size_t __i = (0); __i < __n; ++__i) { 
# 712
assign(__s[__i], __a); }  
# 713
return __s; 
# 714
} 
# 717
static constexpr char_type to_char_type(const int_type &__c) noexcept 
# 718
{ return (char_type)__c; } 
# 721
static constexpr int_type to_int_type(const char_type &__c) noexcept 
# 722
{ return (__c == (eof())) ? (int_type)65533 : ((int_type)__c); } 
# 725
static constexpr bool eq_int_type(const int_type &__c1, const int_type &__c2) noexcept 
# 726
{ return __c1 == __c2; } 
# 729
static constexpr int_type eof() noexcept 
# 730
{ return static_cast< int_type>(-1); } 
# 733
static constexpr int_type not_eof(const int_type &__c) noexcept 
# 734
{ return eq_int_type(__c, eof()) ? 0 : __c; } 
# 735
}; 
# 738
template<> struct char_traits< char32_t>  { 
# 740
typedef char32_t char_type; 
# 742
typedef uint_least32_t int_type; 
# 748
typedef streamoff off_type; 
# 749
typedef u32streampos pos_type; 
# 750
typedef mbstate_t state_type; 
# 753
static void assign(char_type &__c1, const char_type &__c2) noexcept 
# 754
{ __c1 = __c2; } 
# 757
static constexpr bool eq(const char_type &__c1, const char_type &__c2) noexcept 
# 758
{ return __c1 == __c2; } 
# 761
static constexpr bool lt(const char_type &__c1, const char_type &__c2) noexcept 
# 762
{ return __c1 < __c2; } 
# 765
static int compare(const char_type *__s1, const char_type *__s2, size_t __n) 
# 766
{ 
# 767
for (size_t __i = (0); __i < __n; ++__i) { 
# 768
if (lt(__s1[__i], __s2[__i])) { 
# 769
return -1; } else { 
# 770
if (lt(__s2[__i], __s1[__i])) { 
# 771
return 1; }  }  }  
# 772
return 0; 
# 773
} 
# 776
static size_t length(const char_type *__s) 
# 777
{ 
# 778
size_t __i = (0); 
# 779
while (!eq(__s[__i], char_type())) { 
# 780
++__i; }  
# 781
return __i; 
# 782
} 
# 785
static const char_type *find(const char_type *__s, size_t __n, const char_type &__a) 
# 786
{ 
# 787
for (size_t __i = (0); __i < __n; ++__i) { 
# 788
if (eq(__s[__i], __a)) { 
# 789
return __s + __i; }  }  
# 790
return 0; 
# 791
} 
# 794
static char_type *move(char_type *__s1, const char_type *__s2, size_t __n) 
# 795
{ 
# 796
if (__n == (0)) { 
# 797
return __s1; }  
# 798
return (static_cast< char_type *>(__builtin_memmove(__s1, __s2, __n * sizeof(char_type)))); 
# 800
} 
# 803
static char_type *copy(char_type *__s1, const char_type *__s2, size_t __n) 
# 804
{ 
# 805
if (__n == (0)) { 
# 806
return __s1; }  
# 807
return (static_cast< char_type *>(__builtin_memcpy(__s1, __s2, __n * sizeof(char_type)))); 
# 809
} 
# 812
static char_type *assign(char_type *__s, size_t __n, char_type __a) 
# 813
{ 
# 814
for (size_t __i = (0); __i < __n; ++__i) { 
# 815
assign(__s[__i], __a); }  
# 816
return __s; 
# 817
} 
# 820
static constexpr char_type to_char_type(const int_type &__c) noexcept 
# 821
{ return (char_type)__c; } 
# 824
static constexpr int_type to_int_type(const char_type &__c) noexcept 
# 825
{ return (int_type)__c; } 
# 828
static constexpr bool eq_int_type(const int_type &__c1, const int_type &__c2) noexcept 
# 829
{ return __c1 == __c2; } 
# 832
static constexpr int_type eof() noexcept 
# 833
{ return static_cast< int_type>(-1); } 
# 836
static constexpr int_type not_eof(const int_type &__c) noexcept 
# 837
{ return eq_int_type(__c, eof()) ? 0 : __c; } 
# 838
}; 
# 841
}
# 35 "/usr/include/c++/9/exception" 3
#pragma GCC visibility push ( default )
# 36 "/usr/include/c++/9/bits/exception.h" 3
#pragma GCC visibility push ( default )
# 40
extern "C++" {
# 42
namespace std { 
# 60 "/usr/include/c++/9/bits/exception.h" 3
class exception { 
# 63
public: exception() noexcept { } 
# 64
virtual ~exception() noexcept; 
# 66
exception(const exception &) = default;
# 67
exception &operator=(const exception &) = default;
# 68
exception(exception &&) = default;
# 69
exception &operator=(exception &&) = default;
# 75
virtual const char *what() const noexcept; 
# 76
}; 
# 80
}
# 82
}
# 84
#pragma GCC visibility pop
# 40 "/usr/include/c++/9/exception" 3
extern "C++" {
# 42
namespace std { 
# 46
class bad_exception : public exception { 
# 49
public: bad_exception() noexcept { } 
# 53
virtual ~bad_exception() noexcept; 
# 57
virtual const char *what() const noexcept; 
# 58
}; 
# 61
typedef void (*terminate_handler)(void); 
# 64
typedef void (*unexpected_handler)(void); 
# 67
terminate_handler set_terminate(terminate_handler) noexcept; 
# 71
terminate_handler get_terminate() noexcept; 
# 76
void terminate() noexcept __attribute((__noreturn__)); 
# 79
unexpected_handler set_unexpected(unexpected_handler) noexcept; 
# 83
unexpected_handler get_unexpected() noexcept; 
# 88
void unexpected() __attribute((__noreturn__)); 
# 102 "/usr/include/c++/9/exception" 3
bool uncaught_exception() noexcept __attribute((__pure__)); 
# 107
int uncaught_exceptions() noexcept __attribute((__pure__)); 
# 111
}
# 113
namespace __gnu_cxx { 
# 133 "/usr/include/c++/9/exception" 3
void __verbose_terminate_handler(); 
# 136
}
# 138
}
# 140
#pragma GCC visibility pop
# 34 "/usr/include/c++/9/bits/exception_ptr.h" 3
#pragma GCC visibility push ( default )
# 36 "/usr/include/c++/9/bits/cxxabi_init_exception.h" 3
#pragma GCC visibility push ( default )
# 50 "/usr/include/c++/9/bits/cxxabi_init_exception.h" 3
namespace std { 
# 52
class type_info; 
# 53
}
# 55
namespace __cxxabiv1 { 
# 57
struct __cxa_refcounted_exception; 
# 59
extern "C" {
# 63
void *__cxa_allocate_exception(size_t) noexcept; 
# 66
void __cxa_free_exception(void *) noexcept; 
# 70
__cxa_refcounted_exception *__cxa_init_primary_exception(void * object, std::type_info * tinfo, void (* dest)(void *)) noexcept; 
# 73
}
# 74
}
# 78
#pragma GCC visibility pop
# 37 "/usr/include/c++/9/bits/hash_bytes.h" 3
namespace std { 
# 47
size_t _Hash_bytes(const void * __ptr, size_t __len, size_t __seed); 
# 54
size_t _Fnv_hash_bytes(const void * __ptr, size_t __len, size_t __seed); 
# 57
}
# 39 "/usr/include/c++/9/typeinfo" 3
#pragma GCC visibility push ( default )
# 41
extern "C++" {
# 43
namespace __cxxabiv1 { 
# 45
class __class_type_info; 
# 46
}
# 80 "/usr/include/c++/9/typeinfo" 3
namespace std { 
# 88
class type_info { 
# 95
public: virtual ~type_info(); 
# 99
const char *name() const noexcept 
# 100
{ return (((__name)[0]) == ('*')) ? (__name) + 1 : (__name); } 
# 115 "/usr/include/c++/9/typeinfo" 3
bool before(const type_info &__arg) const noexcept 
# 116
{ return ((((__name)[0]) == ('*')) && (((__arg.__name)[0]) == ('*'))) ? (__name) < (__arg.__name) : (__builtin_strcmp(__name, __arg.__name) < 0); 
# 118
} 
# 120
bool operator==(const type_info &__arg) const noexcept 
# 121
{ 
# 122
return (((__name) == (__arg.__name)) || ((((__name)[0]) != ('*')) && (__builtin_strcmp(__name, __arg.__name) == 0))); 
# 125
} 
# 136 "/usr/include/c++/9/typeinfo" 3
bool operator!=(const type_info &__arg) const noexcept 
# 137
{ return !this->operator==(__arg); } 
# 140
size_t hash_code() const noexcept 
# 141
{ 
# 143
return _Hash_bytes(this->name(), __builtin_strlen(this->name()), static_cast< size_t>(3339675911UL)); 
# 148
} 
# 152
virtual bool __is_pointer_p() const; 
# 155
virtual bool __is_function_p() const; 
# 163
virtual bool __do_catch(const type_info * __thr_type, void ** __thr_obj, unsigned __outer) const; 
# 167
virtual bool __do_upcast(const __cxxabiv1::__class_type_info * __target, void ** __obj_ptr) const; 
# 171
protected: const char *__name; 
# 173
explicit type_info(const char *__n) : __name(__n) { } 
# 177
private: type_info &operator=(const type_info &); 
# 178
type_info(const type_info &); 
# 179
}; 
# 187
class bad_cast : public exception { 
# 190
public: bad_cast() noexcept { } 
# 194
virtual ~bad_cast() noexcept; 
# 197
virtual const char *what() const noexcept; 
# 198
}; 
# 204
class bad_typeid : public exception { 
# 207
public: bad_typeid() noexcept { } 
# 211
virtual ~bad_typeid() noexcept; 
# 214
virtual const char *what() const noexcept; 
# 215
}; 
# 216
}
# 218
}
# 220
#pragma GCC visibility pop
# 42 "/usr/include/c++/9/bits/exception_ptr.h" 3
extern "C++" {
# 44
namespace std { 
# 46
class type_info; 
# 52
namespace __exception_ptr { 
# 54
class exception_ptr; 
# 55
}
# 57
using __exception_ptr::exception_ptr;
# 63
__exception_ptr::exception_ptr current_exception() noexcept; 
# 65
template< class _Ex> __exception_ptr::exception_ptr make_exception_ptr(_Ex) noexcept; 
# 69
void rethrow_exception(__exception_ptr::exception_ptr) __attribute((__noreturn__)); 
# 71
namespace __exception_ptr { 
# 73
using std::rethrow_exception;
# 79
class exception_ptr { 
# 81
void *_M_exception_object; 
# 83
explicit exception_ptr(void * __e) noexcept; 
# 85
void _M_addref() noexcept; 
# 86
void _M_release() noexcept; 
# 88
void *_M_get() const noexcept __attribute((__pure__)); 
# 90
friend exception_ptr std::current_exception() noexcept; 
# 91
friend void std::rethrow_exception(exception_ptr); 
# 92
template< class _Ex> friend exception_ptr std::make_exception_ptr(_Ex) noexcept; 
# 96
public: exception_ptr() noexcept; 
# 98
exception_ptr(const exception_ptr &) noexcept; 
# 101
exception_ptr(nullptr_t) noexcept : _M_exception_object((0)) 
# 103
{ } 
# 105
exception_ptr(exception_ptr &&__o) noexcept : _M_exception_object(__o._M_exception_object) 
# 107
{ (__o._M_exception_object) = (0); } 
# 118 "/usr/include/c++/9/bits/exception_ptr.h" 3
exception_ptr &operator=(const exception_ptr &) noexcept; 
# 122
exception_ptr &operator=(exception_ptr &&__o) noexcept 
# 123
{ 
# 124
((exception_ptr)(static_cast< exception_ptr &&>(__o))).swap(*this); 
# 125
return *this; 
# 126
} 
# 129
~exception_ptr() noexcept; 
# 132
void swap(exception_ptr &) noexcept; 
# 144 "/usr/include/c++/9/bits/exception_ptr.h" 3
explicit operator bool() const 
# 145
{ return _M_exception_object; } 
# 149
friend bool operator==(const exception_ptr &, const exception_ptr &) noexcept
# 150
 __attribute((__pure__)); 
# 153
const type_info *__cxa_exception_type() const noexcept
# 154
 __attribute((__pure__)); 
# 155
}; 
# 158
bool operator==(const exception_ptr &, const exception_ptr &) noexcept
# 159
 __attribute((__pure__)); 
# 162
bool operator!=(const exception_ptr &, const exception_ptr &) noexcept
# 163
 __attribute((__pure__)); 
# 166
inline void swap(exception_ptr &__lhs, exception_ptr &__rhs) 
# 167
{ __lhs.swap(__rhs); } 
# 169
template< class _Ex> inline void 
# 171
__dest_thunk(void *__x) 
# 172
{ (static_cast< _Ex *>(__x))->~_Ex(); } 
# 174
}
# 177
template< class _Ex> __exception_ptr::exception_ptr 
# 179
make_exception_ptr(_Ex __ex) noexcept 
# 180
{ 
# 182
void *__e = __cxxabiv1::__cxa_allocate_exception(sizeof(_Ex)); 
# 183
(void)__cxxabiv1::__cxa_init_primary_exception(__e, const_cast< type_info *>(&typeid(__ex)), __exception_ptr::__dest_thunk< _Ex> ); 
# 186
try 
# 187
{ 
# 188
::new (__e) _Ex(__ex); 
# 189
return ((__exception_ptr::exception_ptr)(__e)); 
# 190
} 
# 191
catch (...) 
# 192
{ 
# 193
__cxxabiv1::__cxa_free_exception(__e); 
# 194
return current_exception(); 
# 195
}  
# 208 "/usr/include/c++/9/bits/exception_ptr.h" 3
} 
# 211
}
# 213
}
# 215
#pragma GCC visibility pop
# 33 "/usr/include/c++/9/bits/nested_exception.h" 3
#pragma GCC visibility push ( default )
# 42 "/usr/include/c++/9/bits/nested_exception.h" 3
extern "C++" {
# 44
namespace std { 
# 52
class nested_exception { 
# 54
__exception_ptr::exception_ptr _M_ptr; 
# 57
public: nested_exception() noexcept : _M_ptr(current_exception()) { } 
# 59
nested_exception(const nested_exception &) noexcept = default;
# 61
nested_exception &operator=(const nested_exception &) noexcept = default;
# 63
virtual ~nested_exception() noexcept; 
# 65
[[noreturn]] void 
# 67
rethrow_nested() const 
# 68
{ 
# 69
if ((_M_ptr)) { 
# 70
rethrow_exception(_M_ptr); }  
# 71
std::terminate(); 
# 72
} 
# 75
__exception_ptr::exception_ptr nested_ptr() const noexcept 
# 76
{ return _M_ptr; } 
# 77
}; 
# 79
template< class _Except> 
# 80
struct _Nested_exception : public _Except, public nested_exception { 
# 82
explicit _Nested_exception(const _Except &__ex) : _Except(__ex) 
# 84
{ } 
# 86
explicit _Nested_exception(_Except &&__ex) : _Except(static_cast< _Except &&>(__ex)) 
# 88
{ } 
# 89
}; 
# 94
template< class _Tp> 
# 95
[[noreturn]] inline void 
# 97
__throw_with_nested_impl(_Tp &&__t, true_type) 
# 98
{ 
# 99
using _Up = typename remove_reference< _Tp> ::type; 
# 100
throw _Nested_exception< typename remove_reference< _Tp> ::type> {std::forward< _Tp> (__t)}; 
# 101
} 
# 103
template< class _Tp> 
# 104
[[noreturn]] inline void 
# 106
__throw_with_nested_impl(_Tp &&__t, false_type) 
# 107
{ throw std::forward< _Tp> (__t); } 
# 111
template< class _Tp> 
# 112
[[noreturn]] inline void 
# 114
throw_with_nested(_Tp &&__t) 
# 115
{ 
# 116
using _Up = typename decay< _Tp> ::type; 
# 117
using _CopyConstructible = __and_< is_copy_constructible< typename decay< _Tp> ::type> , is_move_constructible< typename decay< _Tp> ::type> > ; 
# 119
static_assert((_CopyConstructible::value), "throw_with_nested argument must be CopyConstructible");
# 121
using __nest = __and_< is_class< typename decay< _Tp> ::type> , __bool_constant< !__is_final(_Up)> , __not_< is_base_of< nested_exception, typename decay< _Tp> ::type> > > ; 
# 123
std::__throw_with_nested_impl(std::forward< _Tp> (__t), __nest{}); 
# 124
} 
# 127
template< class _Tp> using __rethrow_if_nested_cond = typename enable_if< __and_< is_polymorphic< _Tp> , __or_< __not_< is_base_of< nested_exception, _Tp> > , is_convertible< _Tp *, nested_exception *> > > ::value> ::type; 
# 135
template< class _Ex> inline __rethrow_if_nested_cond< _Ex>  
# 137
__rethrow_if_nested_impl(const _Ex *__ptr) 
# 138
{ 
# 139
if (auto __ne_ptr = dynamic_cast< const nested_exception *>(__ptr)) { 
# 140
__ne_ptr->rethrow_nested(); }  
# 141
} 
# 145
inline void __rethrow_if_nested_impl(const void *) 
# 146
{ } 
# 149
template< class _Ex> inline void 
# 151
rethrow_if_nested(const _Ex &__ex) 
# 152
{ std::__rethrow_if_nested_impl(std::__addressof(__ex)); } 
# 155
}
# 157
}
# 161
#pragma GCC visibility pop
# 42 "/usr/include/c++/9/new" 3
#pragma GCC visibility push ( default )
# 44
extern "C++" {
# 46
namespace std { 
# 54
class bad_alloc : public exception { 
# 57
public: bad_alloc() throw() { } 
# 60
bad_alloc(const bad_alloc &) = default;
# 61
bad_alloc &operator=(const bad_alloc &) = default;
# 66
virtual ~bad_alloc() throw(); 
# 69
virtual const char *what() const throw(); 
# 70
}; 
# 73
class bad_array_new_length : public bad_alloc { 
# 76
public: bad_array_new_length() throw() { } 
# 80
virtual ~bad_array_new_length() throw(); 
# 83
virtual const char *what() const throw(); 
# 84
}; 
# 91
struct nothrow_t { 
# 94
explicit nothrow_t() = default;
# 96
}; 
# 98
extern const nothrow_t nothrow; 
# 102
typedef void (*new_handler)(void); 
# 106
new_handler set_new_handler(new_handler) throw(); 
# 110
new_handler get_new_handler() noexcept; 
# 112
}
# 125 "/usr/include/c++/9/new" 3
void *operator new(std::size_t)
# 126
 __attribute((__externally_visible__)); 
# 127
void *operator new[](std::size_t)
# 128
 __attribute((__externally_visible__)); 
# 129
void operator delete(void *) noexcept
# 130
 __attribute((__externally_visible__)); 
# 131
void operator delete[](void *) noexcept
# 132
 __attribute((__externally_visible__)); 
# 134
void operator delete(void *, std::size_t) noexcept
# 135
 __attribute((__externally_visible__)); 
# 136
void operator delete[](void *, std::size_t) noexcept
# 137
 __attribute((__externally_visible__)); 
# 139
void *operator new(std::size_t, const std::nothrow_t &) noexcept
# 140
 __attribute((__externally_visible__, __malloc__)); 
# 141
void *operator new[](std::size_t, const std::nothrow_t &) noexcept
# 142
 __attribute((__externally_visible__, __malloc__)); 
# 143
void operator delete(void *, const std::nothrow_t &) noexcept
# 144
 __attribute((__externally_visible__)); 
# 145
void operator delete[](void *, const std::nothrow_t &) noexcept
# 146
 __attribute((__externally_visible__)); 
# 173 "/usr/include/c++/9/new" 3
inline void *operator new(std::size_t, void *__p) noexcept 
# 174
{ return __p; } 
# 175
inline void *operator new[](std::size_t, void *__p) noexcept 
# 176
{ return __p; } 
# 179
inline void operator delete(void *, void *) noexcept { } 
# 180
inline void operator delete[](void *, void *) noexcept { } 
# 182
}
# 226 "/usr/include/c++/9/new" 3
#pragma GCC visibility pop
# 40 "/usr/include/c++/9/ext/new_allocator.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 44
using std::size_t;
# 45
using std::ptrdiff_t;
# 57 "/usr/include/c++/9/ext/new_allocator.h" 3
template< class _Tp> 
# 58
class new_allocator { 
# 61
public: typedef std::size_t size_type; 
# 62
typedef std::ptrdiff_t difference_type; 
# 63
typedef _Tp *pointer; 
# 64
typedef const _Tp *const_pointer; 
# 65
typedef _Tp &reference; 
# 66
typedef const _Tp &const_reference; 
# 67
typedef _Tp value_type; 
# 69
template< class _Tp1> 
# 70
struct rebind { 
# 71
typedef new_allocator< _Tp1>  other; }; 
# 76
typedef std::true_type propagate_on_container_move_assignment; 
# 80
new_allocator() noexcept { } 
# 83
new_allocator(const new_allocator &) noexcept { } 
# 85
template< class _Tp1> 
# 87
new_allocator(const new_allocator< _Tp1>  &) noexcept { } 
# 89
~new_allocator() noexcept { } 
# 92
pointer address(reference __x) const noexcept 
# 93
{ return std::__addressof(__x); } 
# 96
const_pointer address(const_reference __x) const noexcept 
# 97
{ return std::__addressof(__x); } 
# 102
pointer allocate(size_type __n, const void * = 0) 
# 103
{ 
# 104
if (__n > max_size()) { 
# 105
std::__throw_bad_alloc(); }  
# 114 "/usr/include/c++/9/ext/new_allocator.h" 3
return static_cast< _Tp *>(::operator new(__n * sizeof(_Tp))); 
# 115
} 
# 119
void deallocate(pointer __p, size_type) 
# 120
{ 
# 128
::operator delete(__p); 
# 129
} 
# 132
size_type max_size() const noexcept 
# 133
{ 
# 135
return ((std::size_t)9223372036854775807L) / sizeof(_Tp); 
# 139
} 
# 142
template< class _Up, class ..._Args> void 
# 144
construct(_Up *__p, _Args &&...__args) noexcept(std::is_nothrow_constructible< _Up, _Args...> ::value) 
# 146
{ ::new ((void *)__p) _Up(std::forward< _Args> (__args)...); } 
# 148
template< class _Up> void 
# 150
destroy(_Up *__p) noexcept(std::is_nothrow_destructible< _Up> ::value) 
# 152
{ __p->~_Up(); } 
# 164 "/usr/include/c++/9/ext/new_allocator.h" 3
template< class _Up> friend inline bool 
# 166
operator==(const new_allocator< _Tp>  &, const __gnu_cxx::new_allocator< _Up>  &) noexcept 
# 168
{ return true; } 
# 170
template< class _Up> friend inline bool 
# 172
operator!=(const new_allocator< _Tp>  &, const __gnu_cxx::new_allocator< _Up>  &) noexcept 
# 174
{ return false; } 
# 175
}; 
# 178
}
# 36 "/usr/include/aarch64-linux-gnu/c++/9/bits/c++allocator.h" 3
namespace std { 
# 47 "/usr/include/aarch64-linux-gnu/c++/9/bits/c++allocator.h" 3
template< class _Tp> using __allocator_base = __gnu_cxx::new_allocator< _Tp> ; 
# 49
}
# 57 "/usr/include/c++/9/bits/allocator.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 68
template<> class allocator< void>  { 
# 71
public: typedef size_t size_type; 
# 72
typedef ptrdiff_t difference_type; 
# 73
typedef void *pointer; 
# 74
typedef const void *const_pointer; 
# 75
typedef void value_type; 
# 77
template< class _Tp1> 
# 78
struct rebind { 
# 79
typedef std::allocator< _Tp1>  other; }; 
# 84
typedef true_type propagate_on_container_move_assignment; 
# 86
typedef true_type is_always_equal; 
# 88
template< class _Up, class ..._Args> void 
# 90
construct(_Up *__p, _Args &&...__args) noexcept(std::is_nothrow_constructible< _Up, _Args...> ::value) 
# 92
{ ::new ((void *)__p) _Up(std::forward< _Args> (__args)...); } 
# 94
template< class _Up> void 
# 96
destroy(_Up *__p) noexcept(std::is_nothrow_destructible< _Up> ::value) 
# 98
{ __p->~_Up(); } 
# 100
}; 
# 110 "/usr/include/c++/9/bits/allocator.h" 3
template< class _Tp> 
# 111
class allocator : public __allocator_base< _Tp>  { 
# 114
public: typedef std::size_t size_type; 
# 115
typedef std::ptrdiff_t difference_type; 
# 116
typedef _Tp *pointer; 
# 117
typedef const _Tp *const_pointer; 
# 118
typedef _Tp &reference; 
# 119
typedef const _Tp &const_reference; 
# 120
typedef _Tp value_type; 
# 122
template< class _Tp1> 
# 123
struct rebind { 
# 124
typedef allocator< _Tp1>  other; }; 
# 129
typedef std::true_type propagate_on_container_move_assignment; 
# 131
typedef std::true_type is_always_equal; 
# 137
allocator() noexcept { } 
# 140
allocator(const allocator &__a) noexcept : std::__allocator_base< _Tp> (__a) 
# 141
{ } 
# 145
allocator &operator=(const allocator &) = default;
# 148
template< class _Tp1> 
# 150
allocator(const allocator< _Tp1>  &) noexcept { } 
# 152
~allocator() noexcept { } 
# 155
friend inline bool operator==(const allocator< _Tp>  &, const allocator< _Tp>  &) noexcept 
# 156
{ return true; } 
# 159
friend inline bool operator!=(const allocator< _Tp>  &, const allocator< _Tp>  &) noexcept 
# 160
{ return false; } 
# 163
}; 
# 165
template< class _T1, class _T2> inline bool 
# 167
operator==(const allocator< _T1>  &, const allocator< _T2>  &) noexcept 
# 169
{ return true; } 
# 171
template< class _T1, class _T2> inline bool 
# 173
operator!=(const allocator< _T1>  &, const allocator< _T2>  &) noexcept 
# 175
{ return false; } 
# 179
template< class _Tp> 
# 180
class allocator< const _Tp>  { 
# 183
public: typedef _Tp value_type; 
# 184
template< class _Up> allocator(const std::allocator< _Up>  &) { } 
# 185
}; 
# 187
template< class _Tp> 
# 188
class allocator< volatile _Tp>  { 
# 191
public: typedef _Tp value_type; 
# 192
template< class _Up> allocator(const std::allocator< _Up>  &) { } 
# 193
}; 
# 195
template< class _Tp> 
# 196
class allocator< const volatile _Tp>  { 
# 199
public: typedef _Tp value_type; 
# 200
template< class _Up> allocator(const std::allocator< _Up>  &) { } 
# 201
}; 
# 208
extern template class allocator< char> ;
# 209
extern template class allocator< wchar_t> ;
# 216
template< class _Alloc, bool  = __is_empty(_Alloc)> 
# 217
struct __alloc_swap { 
# 218
static void _S_do_it(_Alloc &, _Alloc &) noexcept { } }; 
# 220
template< class _Alloc> 
# 221
struct __alloc_swap< _Alloc, false>  { 
# 224
static void _S_do_it(_Alloc &__one, _Alloc &__two) noexcept 
# 225
{ 
# 227
if (__one != __two) { 
# 228
swap(__one, __two); }  
# 229
} 
# 230
}; 
# 233
template< class _Alloc, bool  = __is_empty(_Alloc)> 
# 234
struct __alloc_neq { 
# 237
static bool _S_do_it(const _Alloc &, const _Alloc &) 
# 238
{ return false; } 
# 239
}; 
# 241
template< class _Alloc> 
# 242
struct __alloc_neq< _Alloc, false>  { 
# 245
static bool _S_do_it(const _Alloc &__one, const _Alloc &__two) 
# 246
{ return __one != __two; } 
# 247
}; 
# 250
template< class _Tp, bool 
# 251
 = __or_< is_copy_constructible< typename _Tp::value_type> , is_nothrow_move_constructible< typename _Tp::value_type> > ::value> 
# 253
struct __shrink_to_fit_aux { 
# 254
static bool _S_do_it(_Tp &) noexcept { return false; } }; 
# 256
template< class _Tp> 
# 257
struct __shrink_to_fit_aux< _Tp, true>  { 
# 260
static bool _S_do_it(_Tp &__c) noexcept 
# 261
{ 
# 263
try 
# 264
{ 
# 265
_Tp(__make_move_if_noexcept_iterator(__c.begin()), __make_move_if_noexcept_iterator(__c.end()), __c.get_allocator()).swap(__c); 
# 268
return true; 
# 269
} 
# 270
catch (...) 
# 271
{ return false; }  
# 275
} 
# 276
}; 
# 280
}
# 31 "/usr/include/locale.h" 3
extern "C" {
# 51 "/usr/include/locale.h" 3
struct lconv { 
# 55
char *decimal_point; 
# 56
char *thousands_sep; 
# 62
char *grouping; 
# 68
char *int_curr_symbol; 
# 69
char *currency_symbol; 
# 70
char *mon_decimal_point; 
# 71
char *mon_thousands_sep; 
# 72
char *mon_grouping; 
# 73
char *positive_sign; 
# 74
char *negative_sign; 
# 75
char int_frac_digits; 
# 76
char frac_digits; 
# 78
char p_cs_precedes; 
# 80
char p_sep_by_space; 
# 82
char n_cs_precedes; 
# 84
char n_sep_by_space; 
# 91
char p_sign_posn; 
# 92
char n_sign_posn; 
# 95
char int_p_cs_precedes; 
# 97
char int_p_sep_by_space; 
# 99
char int_n_cs_precedes; 
# 101
char int_n_sep_by_space; 
# 108
char int_p_sign_posn; 
# 109
char int_n_sign_posn; 
# 118 "/usr/include/locale.h" 3
}; 
# 122
extern char *setlocale(int __category, const char * __locale) throw(); 
# 125
extern lconv *localeconv() throw(); 
# 141 "/usr/include/locale.h" 3
extern locale_t newlocale(int __category_mask, const char * __locale, locale_t __base) throw(); 
# 176 "/usr/include/locale.h" 3
extern locale_t duplocale(locale_t __dataset) throw(); 
# 180
extern void freelocale(locale_t __dataset) throw(); 
# 187
extern locale_t uselocale(locale_t __dataset) throw(); 
# 195
}
# 51 "/usr/include/c++/9/clocale" 3
namespace std { 
# 53
using ::lconv;
# 54
using ::setlocale;
# 55
using ::localeconv;
# 56
}
# 48 "/usr/include/aarch64-linux-gnu/c++/9/bits/c++locale.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 52
extern "C" __typeof__(uselocale) __uselocale; 
# 55
}
# 58
namespace std __attribute((__visibility__("default"))) { 
# 62
typedef __locale_t __c_locale; 
# 69
inline int __convert_from_v(const __c_locale &__cloc __attribute((__unused__)), char *
# 70
__out, const int 
# 71
__size __attribute((__unused__)), const char *
# 72
__fmt, ...) 
# 73
{ 
# 75
__c_locale __old = __gnu_cxx::__uselocale(__cloc); 
# 88 "/usr/include/aarch64-linux-gnu/c++/9/bits/c++locale.h" 3
__builtin_va_list __args; 
# 89
__builtin_va_start(__args,__fmt); 
# 92
const int __ret = __builtin_vsnprintf(__out, __size, __fmt, __args); 
# 97
__builtin_va_end(__args); 
# 100
__gnu_cxx::__uselocale(__old); 
# 108
return __ret; 
# 109
} 
# 112
}
# 42 "/usr/include/c++/9/iosfwd" 3
namespace std __attribute((__visibility__("default"))) { 
# 74 "/usr/include/c++/9/iosfwd" 3
class ios_base; 
# 76
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_ios; 
# 79
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_streambuf; 
# 82
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_istream; 
# 85
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_ostream; 
# 88
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_iostream; 
# 92
inline namespace __cxx11 { 
# 94
template< class _CharT, class _Traits = char_traits< _CharT> , class 
# 95
_Alloc = allocator< _CharT> > class basic_stringbuf; 
# 98
template< class _CharT, class _Traits = char_traits< _CharT> , class 
# 99
_Alloc = allocator< _CharT> > class basic_istringstream; 
# 102
template< class _CharT, class _Traits = char_traits< _CharT> , class 
# 103
_Alloc = allocator< _CharT> > class basic_ostringstream; 
# 106
template< class _CharT, class _Traits = char_traits< _CharT> , class 
# 107
_Alloc = allocator< _CharT> > class basic_stringstream; 
# 110
}
# 112
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_filebuf; 
# 115
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_ifstream; 
# 118
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_ofstream; 
# 121
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_fstream; 
# 124
template< class _CharT, class _Traits = char_traits< _CharT> > class istreambuf_iterator; 
# 127
template< class _CharT, class _Traits = char_traits< _CharT> > class ostreambuf_iterator; 
# 132
typedef basic_ios< char>  ios; 
# 135
typedef basic_streambuf< char>  streambuf; 
# 138
typedef basic_istream< char>  istream; 
# 141
typedef basic_ostream< char>  ostream; 
# 144
typedef basic_iostream< char>  iostream; 
# 147
typedef __cxx11::basic_stringbuf< char>  stringbuf; 
# 150
typedef __cxx11::basic_istringstream< char>  istringstream; 
# 153
typedef __cxx11::basic_ostringstream< char>  ostringstream; 
# 156
typedef __cxx11::basic_stringstream< char>  stringstream; 
# 159
typedef basic_filebuf< char>  filebuf; 
# 162
typedef basic_ifstream< char>  ifstream; 
# 165
typedef basic_ofstream< char>  ofstream; 
# 168
typedef basic_fstream< char>  fstream; 
# 172
typedef basic_ios< wchar_t>  wios; 
# 175
typedef basic_streambuf< wchar_t>  wstreambuf; 
# 178
typedef basic_istream< wchar_t>  wistream; 
# 181
typedef basic_ostream< wchar_t>  wostream; 
# 184
typedef basic_iostream< wchar_t>  wiostream; 
# 187
typedef __cxx11::basic_stringbuf< wchar_t>  wstringbuf; 
# 190
typedef __cxx11::basic_istringstream< wchar_t>  wistringstream; 
# 193
typedef __cxx11::basic_ostringstream< wchar_t>  wostringstream; 
# 196
typedef __cxx11::basic_stringstream< wchar_t>  wstringstream; 
# 199
typedef basic_filebuf< wchar_t>  wfilebuf; 
# 202
typedef basic_ifstream< wchar_t>  wifstream; 
# 205
typedef basic_ofstream< wchar_t>  wofstream; 
# 208
typedef basic_fstream< wchar_t>  wfstream; 
# 213
}
# 28 "/usr/include/ctype.h" 3
extern "C" {
# 47 "/usr/include/ctype.h" 3
enum { 
# 48
_ISupper = ((0 < 8) ? (1 << 0) << 8 : ((1 << 0) >> 8)), 
# 49
_ISlower = ((1 < 8) ? (1 << 1) << 8 : ((1 << 1) >> 8)), 
# 50
_ISalpha = ((2 < 8) ? (1 << 2) << 8 : ((1 << 2) >> 8)), 
# 51
_ISdigit = ((3 < 8) ? (1 << 3) << 8 : ((1 << 3) >> 8)), 
# 52
_ISxdigit = ((4 < 8) ? (1 << 4) << 8 : ((1 << 4) >> 8)), 
# 53
_ISspace = ((5 < 8) ? (1 << 5) << 8 : ((1 << 5) >> 8)), 
# 54
_ISprint = ((6 < 8) ? (1 << 6) << 8 : ((1 << 6) >> 8)), 
# 55
_ISgraph = ((7 < 8) ? (1 << 7) << 8 : ((1 << 7) >> 8)), 
# 56
_ISblank = ((8 < 8) ? (1 << 8) << 8 : ((1 << 8) >> 8)), 
# 57
_IScntrl, 
# 58
_ISpunct = ((10 < 8) ? (1 << 10) << 8 : ((1 << 10) >> 8)), 
# 59
_ISalnum = ((11 < 8) ? (1 << 11) << 8 : ((1 << 11) >> 8))
# 60
}; 
# 79 "/usr/include/ctype.h" 3
extern const unsigned short **__ctype_b_loc() throw()
# 80
 __attribute((const)); 
# 81
extern const __int32_t **__ctype_tolower_loc() throw()
# 82
 __attribute((const)); 
# 83
extern const __int32_t **__ctype_toupper_loc() throw()
# 84
 __attribute((const)); 
# 108 "/usr/include/ctype.h" 3
extern int isalnum(int) throw(); 
# 109
extern int isalpha(int) throw(); 
# 110
extern int iscntrl(int) throw(); 
# 111
extern int isdigit(int) throw(); 
# 112
extern int islower(int) throw(); 
# 113
extern int isgraph(int) throw(); 
# 114
extern int isprint(int) throw(); 
# 115
extern int ispunct(int) throw(); 
# 116
extern int isspace(int) throw(); 
# 117
extern int isupper(int) throw(); 
# 118
extern int isxdigit(int) throw(); 
# 122
extern int tolower(int __c) throw(); 
# 125
extern int toupper(int __c) throw(); 
# 130
extern int isblank(int) throw(); 
# 135
extern int isctype(int __c, int __mask) throw(); 
# 142
extern int isascii(int __c) throw(); 
# 146
extern int toascii(int __c) throw(); 
# 150
extern int _toupper(int) throw(); 
# 151
extern int _tolower(int) throw(); 
# 251 "/usr/include/ctype.h" 3
extern int isalnum_l(int, locale_t) throw(); 
# 252
extern int isalpha_l(int, locale_t) throw(); 
# 253
extern int iscntrl_l(int, locale_t) throw(); 
# 254
extern int isdigit_l(int, locale_t) throw(); 
# 255
extern int islower_l(int, locale_t) throw(); 
# 256
extern int isgraph_l(int, locale_t) throw(); 
# 257
extern int isprint_l(int, locale_t) throw(); 
# 258
extern int ispunct_l(int, locale_t) throw(); 
# 259
extern int isspace_l(int, locale_t) throw(); 
# 260
extern int isupper_l(int, locale_t) throw(); 
# 261
extern int isxdigit_l(int, locale_t) throw(); 
# 263
extern int isblank_l(int, locale_t) throw(); 
# 267
extern int __tolower_l(int __c, locale_t __l) throw(); 
# 268
extern int tolower_l(int __c, locale_t __l) throw(); 
# 271
extern int __toupper_l(int __c, locale_t __l) throw(); 
# 272
extern int toupper_l(int __c, locale_t __l) throw(); 
# 327 "/usr/include/ctype.h" 3
}
# 62 "/usr/include/c++/9/cctype" 3
namespace std { 
# 64
using ::isalnum;
# 65
using ::isalpha;
# 66
using ::iscntrl;
# 67
using ::isdigit;
# 68
using ::isgraph;
# 69
using ::islower;
# 70
using ::isprint;
# 71
using ::ispunct;
# 72
using ::isspace;
# 73
using ::isupper;
# 74
using ::isxdigit;
# 75
using ::tolower;
# 76
using ::toupper;
# 77
}
# 85
namespace std { 
# 87
using ::isblank;
# 88
}
# 44 "/usr/include/c++/9/bits/localefwd.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 55 "/usr/include/c++/9/bits/localefwd.h" 3
class locale; 
# 57
template< class _Facet> bool has_facet(const locale &) throw(); 
# 61
template< class _Facet> const _Facet &use_facet(const locale &); 
# 66
template< class _CharT> bool isspace(_CharT, const locale &); 
# 70
template< class _CharT> bool isprint(_CharT, const locale &); 
# 74
template< class _CharT> bool iscntrl(_CharT, const locale &); 
# 78
template< class _CharT> bool isupper(_CharT, const locale &); 
# 82
template< class _CharT> bool islower(_CharT, const locale &); 
# 86
template< class _CharT> bool isalpha(_CharT, const locale &); 
# 90
template< class _CharT> bool isdigit(_CharT, const locale &); 
# 94
template< class _CharT> bool ispunct(_CharT, const locale &); 
# 98
template< class _CharT> bool isxdigit(_CharT, const locale &); 
# 102
template< class _CharT> bool isalnum(_CharT, const locale &); 
# 106
template< class _CharT> bool isgraph(_CharT, const locale &); 
# 111
template< class _CharT> bool isblank(_CharT, const locale &); 
# 116
template< class _CharT> _CharT toupper(_CharT, const locale &); 
# 120
template< class _CharT> _CharT tolower(_CharT, const locale &); 
# 125
class ctype_base; 
# 126
template< class _CharT> class ctype; 
# 128
template<> class ctype< char> ; 
# 130
template<> class ctype< wchar_t> ; 
# 132
template< class _CharT> class ctype_byname; 
# 136
class codecvt_base; 
# 137
template< class _InternT, class _ExternT, class _StateT> class codecvt; 
# 139
template<> class codecvt< char, char, __mbstate_t> ; 
# 141
template<> class codecvt< wchar_t, char, __mbstate_t> ; 
# 144
template<> class codecvt< char16_t, char, __mbstate_t> ; 
# 145
template<> class codecvt< char32_t, char, __mbstate_t> ; 
# 151
template< class _InternT, class _ExternT, class _StateT> class codecvt_byname; 
# 156
template< class _CharT, class _InIter = istreambuf_iterator< _CharT> > class num_get; 
# 158
template< class _CharT, class _OutIter = ostreambuf_iterator< _CharT> > class num_put; 
# 161
inline namespace __cxx11 { 
# 162
template< class _CharT> class numpunct; 
# 163
template< class _CharT> class numpunct_byname; 
# 164
}
# 166
inline namespace __cxx11 { 
# 168
template< class _CharT> class collate; 
# 170
template< class _CharT> class collate_byname; 
# 172
}
# 175
class time_base; 
# 176
inline namespace __cxx11 { 
# 177
template< class _CharT, class _InIter = istreambuf_iterator< _CharT> > class time_get; 
# 179
template< class _CharT, class _InIter = istreambuf_iterator< _CharT> > class time_get_byname; 
# 181
}
# 182
template< class _CharT, class _OutIter = ostreambuf_iterator< _CharT> > class time_put; 
# 184
template< class _CharT, class _OutIter = ostreambuf_iterator< _CharT> > class time_put_byname; 
# 188
class money_base; 
# 189
inline namespace __cxx11 { 
# 190
template< class _CharT, class _InIter = istreambuf_iterator< _CharT> > class money_get; 
# 192
template< class _CharT, class _OutIter = ostreambuf_iterator< _CharT> > class money_put; 
# 194
}
# 195
inline namespace __cxx11 { 
# 196
template< class _CharT, bool _Intl = false> class moneypunct; 
# 198
template< class _CharT, bool _Intl = false> class moneypunct_byname; 
# 200
}
# 203
class messages_base; 
# 204
inline namespace __cxx11 { 
# 205
template< class _CharT> class messages; 
# 207
template< class _CharT> class messages_byname; 
# 209
}
# 212
}
# 36 "/usr/include/c++/9/bits/cxxabi_forced.h" 3
#pragma GCC visibility push ( default )
# 39
namespace __cxxabiv1 { 
# 48
class __forced_unwind { 
# 50
virtual ~__forced_unwind() throw(); 
# 53
virtual void __pure_dummy() = 0; 
# 54
}; 
# 55
}
# 58
#pragma GCC visibility pop
# 38 "/usr/include/c++/9/bits/ostream_insert.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 42
template< class _CharT, class _Traits> inline void 
# 44
__ostream_write(basic_ostream< _CharT, _Traits>  &__out, const _CharT *
# 45
__s, streamsize __n) 
# 46
{ 
# 47
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 48
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 50
const streamsize __put = __out.rdbuf()->sputn(__s, __n); 
# 51
if (__put != __n) { 
# 52
__out.setstate(__ios_base::badbit); }  
# 53
} 
# 55
template< class _CharT, class _Traits> inline void 
# 57
__ostream_fill(basic_ostream< _CharT, _Traits>  &__out, streamsize __n) 
# 58
{ 
# 59
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 60
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 62
const _CharT __c = __out.fill(); 
# 63
for (; __n > (0); --__n) 
# 64
{ 
# 65
const typename _Traits::int_type __put = __out.rdbuf()->sputc(__c); 
# 66
if (_Traits::eq_int_type(__put, _Traits::eof())) 
# 67
{ 
# 68
__out.setstate(__ios_base::badbit); 
# 69
break; 
# 70
}  
# 71
}  
# 72
} 
# 74
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 76
__ostream_insert(basic_ostream< _CharT, _Traits>  &__out, const _CharT *
# 77
__s, streamsize __n) 
# 78
{ 
# 79
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 80
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 82
typename basic_ostream< _CharT, _Traits> ::sentry __cerb(__out); 
# 83
if (__cerb) 
# 84
{ 
# 85
try 
# 86
{ 
# 87
const streamsize __w = __out.width(); 
# 88
if (__w > __n) 
# 89
{ 
# 90
const bool __left = (__out.flags() & __ios_base::adjustfield) == __ios_base::left; 
# 93
if (!__left) { 
# 94
__ostream_fill(__out, __w - __n); }  
# 95
if (__out.good()) { 
# 96
__ostream_write(__out, __s, __n); }  
# 97
if (__left && __out.good()) { 
# 98
__ostream_fill(__out, __w - __n); }  
# 99
} else { 
# 101
__ostream_write(__out, __s, __n); }  
# 102
__out.width(0); 
# 103
} 
# 104
catch (__cxxabiv1::__forced_unwind &) 
# 105
{ 
# 106
__out._M_setstate(__ios_base::badbit); 
# 107
throw; 
# 108
} 
# 109
catch (...) 
# 110
{ __out._M_setstate(__ios_base::badbit); }  
# 111
}  
# 112
return __out; 
# 113
} 
# 118
extern template basic_ostream< char>  &__ostream_insert(basic_ostream< char>  & __out, const char * __s, streamsize __n);
# 121
extern template basic_ostream< wchar_t>  &__ostream_insert(basic_ostream< wchar_t>  & __out, const wchar_t * __s, streamsize __n);
# 127
}
# 63 "/usr/include/c++/9/bits/stl_function.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 104 "/usr/include/c++/9/bits/stl_function.h" 3
template< class _Arg, class _Result> 
# 105
struct unary_function { 
# 108
typedef _Arg argument_type; 
# 111
typedef _Result result_type; 
# 112
}; 
# 117
template< class _Arg1, class _Arg2, class _Result> 
# 118
struct binary_function { 
# 121
typedef _Arg1 first_argument_type; 
# 124
typedef _Arg2 second_argument_type; 
# 127
typedef _Result result_type; 
# 128
}; 
# 144 "/usr/include/c++/9/bits/stl_function.h" 3
struct __is_transparent; 
# 146
template< class _Tp = void> struct plus; 
# 149
template< class _Tp = void> struct minus; 
# 152
template< class _Tp = void> struct multiplies; 
# 155
template< class _Tp = void> struct divides; 
# 158
template< class _Tp = void> struct modulus; 
# 161
template< class _Tp = void> struct negate; 
# 166
template< class _Tp> 
# 167
struct plus : public binary_function< _Tp, _Tp, _Tp>  { 
# 171
constexpr _Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 172
{ return __x + __y; } 
# 173
}; 
# 176
template< class _Tp> 
# 177
struct minus : public binary_function< _Tp, _Tp, _Tp>  { 
# 181
constexpr _Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 182
{ return __x - __y; } 
# 183
}; 
# 186
template< class _Tp> 
# 187
struct multiplies : public binary_function< _Tp, _Tp, _Tp>  { 
# 191
constexpr _Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 192
{ return __x * __y; } 
# 193
}; 
# 196
template< class _Tp> 
# 197
struct divides : public binary_function< _Tp, _Tp, _Tp>  { 
# 201
constexpr _Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 202
{ return __x / __y; } 
# 203
}; 
# 206
template< class _Tp> 
# 207
struct modulus : public binary_function< _Tp, _Tp, _Tp>  { 
# 211
constexpr _Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 212
{ return __x % __y; } 
# 213
}; 
# 216
template< class _Tp> 
# 217
struct negate : public unary_function< _Tp, _Tp>  { 
# 221
constexpr _Tp operator()(const _Tp &__x) const 
# 222
{ return -__x; } 
# 223
}; 
# 230
template<> struct plus< void>  { 
# 232
template< class _Tp, class _Up> constexpr auto 
# 235
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) + std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) + std::forward< _Up> (__u))) 
# 238
{ return std::forward< _Tp> (__t) + std::forward< _Up> (__u); } 
# 240
typedef __is_transparent is_transparent; 
# 241
}; 
# 245
template<> struct minus< void>  { 
# 247
template< class _Tp, class _Up> constexpr auto 
# 250
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) - std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) - std::forward< _Up> (__u))) 
# 253
{ return std::forward< _Tp> (__t) - std::forward< _Up> (__u); } 
# 255
typedef __is_transparent is_transparent; 
# 256
}; 
# 260
template<> struct multiplies< void>  { 
# 262
template< class _Tp, class _Up> constexpr auto 
# 265
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) * std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) * std::forward< _Up> (__u))) 
# 268
{ return std::forward< _Tp> (__t) * std::forward< _Up> (__u); } 
# 270
typedef __is_transparent is_transparent; 
# 271
}; 
# 275
template<> struct divides< void>  { 
# 277
template< class _Tp, class _Up> constexpr auto 
# 280
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) / std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) / std::forward< _Up> (__u))) 
# 283
{ return std::forward< _Tp> (__t) / std::forward< _Up> (__u); } 
# 285
typedef __is_transparent is_transparent; 
# 286
}; 
# 290
template<> struct modulus< void>  { 
# 292
template< class _Tp, class _Up> constexpr auto 
# 295
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) % std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) % std::forward< _Up> (__u))) 
# 298
{ return std::forward< _Tp> (__t) % std::forward< _Up> (__u); } 
# 300
typedef __is_transparent is_transparent; 
# 301
}; 
# 305
template<> struct negate< void>  { 
# 307
template< class _Tp> constexpr auto 
# 310
operator()(_Tp &&__t) const noexcept(noexcept((-std::forward< _Tp> (__t))))->__decltype((-std::forward< _Tp> (__t))) 
# 313
{ return -std::forward< _Tp> (__t); } 
# 315
typedef __is_transparent is_transparent; 
# 316
}; 
# 330 "/usr/include/c++/9/bits/stl_function.h" 3
template< class _Tp = void> struct equal_to; 
# 333
template< class _Tp = void> struct not_equal_to; 
# 336
template< class _Tp = void> struct greater; 
# 339
template< class _Tp = void> struct less; 
# 342
template< class _Tp = void> struct greater_equal; 
# 345
template< class _Tp = void> struct less_equal; 
# 350
template< class _Tp> 
# 351
struct equal_to : public binary_function< _Tp, _Tp, bool>  { 
# 355
constexpr bool operator()(const _Tp &__x, const _Tp &__y) const 
# 356
{ return __x == __y; } 
# 357
}; 
# 360
template< class _Tp> 
# 361
struct not_equal_to : public binary_function< _Tp, _Tp, bool>  { 
# 365
constexpr bool operator()(const _Tp &__x, const _Tp &__y) const 
# 366
{ return __x != __y; } 
# 367
}; 
# 370
template< class _Tp> 
# 371
struct greater : public binary_function< _Tp, _Tp, bool>  { 
# 375
constexpr bool operator()(const _Tp &__x, const _Tp &__y) const 
# 376
{ return __x > __y; } 
# 377
}; 
# 380
template< class _Tp> 
# 381
struct less : public binary_function< _Tp, _Tp, bool>  { 
# 385
constexpr bool operator()(const _Tp &__x, const _Tp &__y) const 
# 386
{ return __x < __y; } 
# 387
}; 
# 390
template< class _Tp> 
# 391
struct greater_equal : public binary_function< _Tp, _Tp, bool>  { 
# 395
constexpr bool operator()(const _Tp &__x, const _Tp &__y) const 
# 396
{ return __x >= __y; } 
# 397
}; 
# 400
template< class _Tp> 
# 401
struct less_equal : public binary_function< _Tp, _Tp, bool>  { 
# 405
constexpr bool operator()(const _Tp &__x, const _Tp &__y) const 
# 406
{ return __x <= __y; } 
# 407
}; 
# 410
template< class _Tp> 
# 411
struct greater< _Tp *>  : public binary_function< _Tp *, _Tp *, bool>  { 
# 414
constexpr bool operator()(_Tp *__x, _Tp *__y) const noexcept 
# 415
{ 
# 418
if (__builtin_is_constant_evaluated()) { 
# 422
return __x > __y; }  
# 424
return ((unsigned long)__x) > ((unsigned long)__y); 
# 425
} 
# 426
}; 
# 429
template< class _Tp> 
# 430
struct less< _Tp *>  : public binary_function< _Tp *, _Tp *, bool>  { 
# 433
constexpr bool operator()(_Tp *__x, _Tp *__y) const noexcept 
# 434
{ 
# 437
if (__builtin_is_constant_evaluated()) { 
# 441
return __x < __y; }  
# 443
return ((unsigned long)__x) < ((unsigned long)__y); 
# 444
} 
# 445
}; 
# 448
template< class _Tp> 
# 449
struct greater_equal< _Tp *>  : public binary_function< _Tp *, _Tp *, bool>  { 
# 452
constexpr bool operator()(_Tp *__x, _Tp *__y) const noexcept 
# 453
{ 
# 456
if (__builtin_is_constant_evaluated()) { 
# 460
return __x >= __y; }  
# 462
return ((unsigned long)__x) >= ((unsigned long)__y); 
# 463
} 
# 464
}; 
# 467
template< class _Tp> 
# 468
struct less_equal< _Tp *>  : public binary_function< _Tp *, _Tp *, bool>  { 
# 471
constexpr bool operator()(_Tp *__x, _Tp *__y) const noexcept 
# 472
{ 
# 475
if (__builtin_is_constant_evaluated()) { 
# 479
return __x <= __y; }  
# 481
return ((unsigned long)__x) <= ((unsigned long)__y); 
# 482
} 
# 483
}; 
# 488
template<> struct equal_to< void>  { 
# 490
template< class _Tp, class _Up> constexpr auto 
# 492
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) == std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) == std::forward< _Up> (__u))) 
# 495
{ return std::forward< _Tp> (__t) == std::forward< _Up> (__u); } 
# 497
typedef __is_transparent is_transparent; 
# 498
}; 
# 502
template<> struct not_equal_to< void>  { 
# 504
template< class _Tp, class _Up> constexpr auto 
# 506
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) != std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) != std::forward< _Up> (__u))) 
# 509
{ return std::forward< _Tp> (__t) != std::forward< _Up> (__u); } 
# 511
typedef __is_transparent is_transparent; 
# 512
}; 
# 516
template<> struct greater< void>  { 
# 518
template< class _Tp, class _Up> constexpr auto 
# 520
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) > std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) > std::forward< _Up> (__u))) 
# 523
{ 
# 524
return _S_cmp(std::forward< _Tp> (__t), std::forward< _Up> (__u), __ptr_cmp< _Tp, _Up> {}); 
# 526
} 
# 528
template< class _Tp, class _Up> constexpr bool 
# 530
operator()(_Tp *__t, _Up *__u) const noexcept 
# 531
{ return std::greater< common_type_t< _Tp *, _Up *> > {}(__t, __u); } 
# 533
typedef __is_transparent is_transparent; 
# 538
private: 
# 536
template< class _Tp, class _Up> static constexpr decltype(auto) 
# 538
_S_cmp(_Tp &&__t, _Up &&__u, false_type) 
# 539
{ return std::forward< _Tp> (__t) > std::forward< _Up> (__u); } 
# 541
template< class _Tp, class _Up> static constexpr bool 
# 543
_S_cmp(_Tp &&__t, _Up &&__u, true_type) noexcept 
# 544
{ 
# 545
return std::greater< const volatile void *> {}(static_cast< const volatile void *>(std::forward< _Tp> (__t)), static_cast< const volatile void *>(std::forward< _Up> (__u))); 
# 548
} 
# 551
template< class _Tp, class _Up, class  = void> 
# 552
struct __not_overloaded2 : public true_type { }; 
# 555
template< class _Tp, class _Up> 
# 556
struct __not_overloaded2< _Tp, _Up, __void_t< __decltype((std::declval< _Tp> ().operator>(std::declval< _Up> ())))> >  : public false_type { 
# 558
}; 
# 561
template< class _Tp, class _Up, class  = void> 
# 562
struct __not_overloaded : public __not_overloaded2< _Tp, _Up>  { }; 
# 565
template< class _Tp, class _Up> 
# 566
struct __not_overloaded< _Tp, _Up, __void_t< __decltype((operator>(std::declval< _Tp> (), std::declval< _Up> ())))> >  : public false_type { 
# 568
}; 
# 570
template< class _Tp, class _Up> using __ptr_cmp = __and_< __not_overloaded< _Tp, _Up> , is_convertible< _Tp, const volatile void *> , is_convertible< _Up, const volatile void *> > ; 
# 574
}; 
# 578
template<> struct less< void>  { 
# 580
template< class _Tp, class _Up> constexpr auto 
# 582
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) < std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) < std::forward< _Up> (__u))) 
# 585
{ 
# 586
return _S_cmp(std::forward< _Tp> (__t), std::forward< _Up> (__u), __ptr_cmp< _Tp, _Up> {}); 
# 588
} 
# 590
template< class _Tp, class _Up> constexpr bool 
# 592
operator()(_Tp *__t, _Up *__u) const noexcept 
# 593
{ return std::less< common_type_t< _Tp *, _Up *> > {}(__t, __u); } 
# 595
typedef __is_transparent is_transparent; 
# 600
private: 
# 598
template< class _Tp, class _Up> static constexpr decltype(auto) 
# 600
_S_cmp(_Tp &&__t, _Up &&__u, false_type) 
# 601
{ return std::forward< _Tp> (__t) < std::forward< _Up> (__u); } 
# 603
template< class _Tp, class _Up> static constexpr bool 
# 605
_S_cmp(_Tp &&__t, _Up &&__u, true_type) noexcept 
# 606
{ 
# 607
return std::less< const volatile void *> {}(static_cast< const volatile void *>(std::forward< _Tp> (__t)), static_cast< const volatile void *>(std::forward< _Up> (__u))); 
# 610
} 
# 613
template< class _Tp, class _Up, class  = void> 
# 614
struct __not_overloaded2 : public true_type { }; 
# 617
template< class _Tp, class _Up> 
# 618
struct __not_overloaded2< _Tp, _Up, __void_t< __decltype((std::declval< _Tp> ().operator<(std::declval< _Up> ())))> >  : public false_type { 
# 620
}; 
# 623
template< class _Tp, class _Up, class  = void> 
# 624
struct __not_overloaded : public __not_overloaded2< _Tp, _Up>  { }; 
# 627
template< class _Tp, class _Up> 
# 628
struct __not_overloaded< _Tp, _Up, __void_t< __decltype((operator<(std::declval< _Tp> (), std::declval< _Up> ())))> >  : public false_type { 
# 630
}; 
# 632
template< class _Tp, class _Up> using __ptr_cmp = __and_< __not_overloaded< _Tp, _Up> , is_convertible< _Tp, const volatile void *> , is_convertible< _Up, const volatile void *> > ; 
# 636
}; 
# 640
template<> struct greater_equal< void>  { 
# 642
template< class _Tp, class _Up> constexpr auto 
# 644
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) >= std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) >= std::forward< _Up> (__u))) 
# 647
{ 
# 648
return _S_cmp(std::forward< _Tp> (__t), std::forward< _Up> (__u), __ptr_cmp< _Tp, _Up> {}); 
# 650
} 
# 652
template< class _Tp, class _Up> constexpr bool 
# 654
operator()(_Tp *__t, _Up *__u) const noexcept 
# 655
{ return std::greater_equal< common_type_t< _Tp *, _Up *> > {}(__t, __u); } 
# 657
typedef __is_transparent is_transparent; 
# 662
private: 
# 660
template< class _Tp, class _Up> static constexpr decltype(auto) 
# 662
_S_cmp(_Tp &&__t, _Up &&__u, false_type) 
# 663
{ return std::forward< _Tp> (__t) >= std::forward< _Up> (__u); } 
# 665
template< class _Tp, class _Up> static constexpr bool 
# 667
_S_cmp(_Tp &&__t, _Up &&__u, true_type) noexcept 
# 668
{ 
# 669
return std::greater_equal< const volatile void *> {}(static_cast< const volatile void *>(std::forward< _Tp> (__t)), static_cast< const volatile void *>(std::forward< _Up> (__u))); 
# 672
} 
# 675
template< class _Tp, class _Up, class  = void> 
# 676
struct __not_overloaded2 : public true_type { }; 
# 679
template< class _Tp, class _Up> 
# 680
struct __not_overloaded2< _Tp, _Up, __void_t< __decltype((std::declval< _Tp> ().operator>=(std::declval< _Up> ())))> >  : public false_type { 
# 682
}; 
# 685
template< class _Tp, class _Up, class  = void> 
# 686
struct __not_overloaded : public __not_overloaded2< _Tp, _Up>  { }; 
# 689
template< class _Tp, class _Up> 
# 690
struct __not_overloaded< _Tp, _Up, __void_t< __decltype((operator>=(std::declval< _Tp> (), std::declval< _Up> ())))> >  : public false_type { 
# 692
}; 
# 694
template< class _Tp, class _Up> using __ptr_cmp = __and_< __not_overloaded< _Tp, _Up> , is_convertible< _Tp, const volatile void *> , is_convertible< _Up, const volatile void *> > ; 
# 698
}; 
# 702
template<> struct less_equal< void>  { 
# 704
template< class _Tp, class _Up> constexpr auto 
# 706
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) <= std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) <= std::forward< _Up> (__u))) 
# 709
{ 
# 710
return _S_cmp(std::forward< _Tp> (__t), std::forward< _Up> (__u), __ptr_cmp< _Tp, _Up> {}); 
# 712
} 
# 714
template< class _Tp, class _Up> constexpr bool 
# 716
operator()(_Tp *__t, _Up *__u) const noexcept 
# 717
{ return std::less_equal< common_type_t< _Tp *, _Up *> > {}(__t, __u); } 
# 719
typedef __is_transparent is_transparent; 
# 724
private: 
# 722
template< class _Tp, class _Up> static constexpr decltype(auto) 
# 724
_S_cmp(_Tp &&__t, _Up &&__u, false_type) 
# 725
{ return std::forward< _Tp> (__t) <= std::forward< _Up> (__u); } 
# 727
template< class _Tp, class _Up> static constexpr bool 
# 729
_S_cmp(_Tp &&__t, _Up &&__u, true_type) noexcept 
# 730
{ 
# 731
return std::less_equal< const volatile void *> {}(static_cast< const volatile void *>(std::forward< _Tp> (__t)), static_cast< const volatile void *>(std::forward< _Up> (__u))); 
# 734
} 
# 737
template< class _Tp, class _Up, class  = void> 
# 738
struct __not_overloaded2 : public true_type { }; 
# 741
template< class _Tp, class _Up> 
# 742
struct __not_overloaded2< _Tp, _Up, __void_t< __decltype((std::declval< _Tp> ().operator<=(std::declval< _Up> ())))> >  : public false_type { 
# 744
}; 
# 747
template< class _Tp, class _Up, class  = void> 
# 748
struct __not_overloaded : public __not_overloaded2< _Tp, _Up>  { }; 
# 751
template< class _Tp, class _Up> 
# 752
struct __not_overloaded< _Tp, _Up, __void_t< __decltype((operator<=(std::declval< _Tp> (), std::declval< _Up> ())))> >  : public false_type { 
# 754
}; 
# 756
template< class _Tp, class _Up> using __ptr_cmp = __and_< __not_overloaded< _Tp, _Up> , is_convertible< _Tp, const volatile void *> , is_convertible< _Up, const volatile void *> > ; 
# 760
}; 
# 774 "/usr/include/c++/9/bits/stl_function.h" 3
template< class _Tp = void> struct logical_and; 
# 777
template< class _Tp = void> struct logical_or; 
# 780
template< class _Tp = void> struct logical_not; 
# 785
template< class _Tp> 
# 786
struct logical_and : public binary_function< _Tp, _Tp, bool>  { 
# 790
constexpr bool operator()(const _Tp &__x, const _Tp &__y) const 
# 791
{ return __x && __y; } 
# 792
}; 
# 795
template< class _Tp> 
# 796
struct logical_or : public binary_function< _Tp, _Tp, bool>  { 
# 800
constexpr bool operator()(const _Tp &__x, const _Tp &__y) const 
# 801
{ return __x || __y; } 
# 802
}; 
# 805
template< class _Tp> 
# 806
struct logical_not : public unary_function< _Tp, bool>  { 
# 810
constexpr bool operator()(const _Tp &__x) const 
# 811
{ return !__x; } 
# 812
}; 
# 817
template<> struct logical_and< void>  { 
# 819
template< class _Tp, class _Up> constexpr auto 
# 822
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) && std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) && std::forward< _Up> (__u))) 
# 825
{ return std::forward< _Tp> (__t) && std::forward< _Up> (__u); } 
# 827
typedef __is_transparent is_transparent; 
# 828
}; 
# 832
template<> struct logical_or< void>  { 
# 834
template< class _Tp, class _Up> constexpr auto 
# 837
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) || std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) || std::forward< _Up> (__u))) 
# 840
{ return std::forward< _Tp> (__t) || std::forward< _Up> (__u); } 
# 842
typedef __is_transparent is_transparent; 
# 843
}; 
# 847
template<> struct logical_not< void>  { 
# 849
template< class _Tp> constexpr auto 
# 852
operator()(_Tp &&__t) const noexcept(noexcept((!std::forward< _Tp> (__t))))->__decltype((!std::forward< _Tp> (__t))) 
# 855
{ return !std::forward< _Tp> (__t); } 
# 857
typedef __is_transparent is_transparent; 
# 858
}; 
# 863
template< class _Tp = void> struct bit_and; 
# 866
template< class _Tp = void> struct bit_or; 
# 869
template< class _Tp = void> struct bit_xor; 
# 872
template< class _Tp = void> struct bit_not; 
# 878
template< class _Tp> 
# 879
struct bit_and : public binary_function< _Tp, _Tp, _Tp>  { 
# 883
constexpr _Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 884
{ return __x & __y; } 
# 885
}; 
# 887
template< class _Tp> 
# 888
struct bit_or : public binary_function< _Tp, _Tp, _Tp>  { 
# 892
constexpr _Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 893
{ return __x | __y; } 
# 894
}; 
# 896
template< class _Tp> 
# 897
struct bit_xor : public binary_function< _Tp, _Tp, _Tp>  { 
# 901
constexpr _Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 902
{ return __x ^ __y; } 
# 903
}; 
# 905
template< class _Tp> 
# 906
struct bit_not : public unary_function< _Tp, _Tp>  { 
# 910
constexpr _Tp operator()(const _Tp &__x) const 
# 911
{ return ~__x; } 
# 912
}; 
# 916
template<> struct bit_and< void>  { 
# 918
template< class _Tp, class _Up> constexpr auto 
# 921
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) & std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) & std::forward< _Up> (__u))) 
# 924
{ return std::forward< _Tp> (__t) & std::forward< _Up> (__u); } 
# 926
typedef __is_transparent is_transparent; 
# 927
}; 
# 930
template<> struct bit_or< void>  { 
# 932
template< class _Tp, class _Up> constexpr auto 
# 935
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) | std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) | std::forward< _Up> (__u))) 
# 938
{ return std::forward< _Tp> (__t) | std::forward< _Up> (__u); } 
# 940
typedef __is_transparent is_transparent; 
# 941
}; 
# 944
template<> struct bit_xor< void>  { 
# 946
template< class _Tp, class _Up> constexpr auto 
# 949
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) ^ std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) ^ std::forward< _Up> (__u))) 
# 952
{ return std::forward< _Tp> (__t) ^ std::forward< _Up> (__u); } 
# 954
typedef __is_transparent is_transparent; 
# 955
}; 
# 958
template<> struct bit_not< void>  { 
# 960
template< class _Tp> constexpr auto 
# 963
operator()(_Tp &&__t) const noexcept(noexcept((~std::forward< _Tp> (__t))))->__decltype((~std::forward< _Tp> (__t))) 
# 966
{ return ~std::forward< _Tp> (__t); } 
# 968
typedef __is_transparent is_transparent; 
# 969
}; 
# 1002 "/usr/include/c++/9/bits/stl_function.h" 3
template< class _Predicate> 
# 1003
class unary_negate : public unary_function< typename _Predicate::argument_type, bool>  { 
# 1007
protected: _Predicate _M_pred; 
# 1012
public: constexpr explicit unary_negate(const _Predicate &__x) : _M_pred(__x) { } 
# 1016
constexpr bool operator()(const typename _Predicate::argument_type &__x) const 
# 1017
{ return !(_M_pred)(__x); } 
# 1018
}; 
# 1021
template< class _Predicate> constexpr unary_negate< _Predicate>  
# 1024
not1(const _Predicate &__pred) 
# 1025
{ return ((unary_negate< _Predicate> )(__pred)); } 
# 1028
template< class _Predicate> 
# 1029
class binary_negate : public binary_function< typename _Predicate::first_argument_type, typename _Predicate::second_argument_type, bool>  { 
# 1034
protected: _Predicate _M_pred; 
# 1039
public: constexpr explicit binary_negate(const _Predicate &__x) : _M_pred(__x) { } 
# 1043
constexpr bool operator()(const typename _Predicate::first_argument_type &__x, const typename _Predicate::second_argument_type &
# 1044
__y) const 
# 1045
{ return !(_M_pred)(__x, __y); } 
# 1046
}; 
# 1049
template< class _Predicate> constexpr binary_negate< _Predicate>  
# 1052
not2(const _Predicate &__pred) 
# 1053
{ return ((binary_negate< _Predicate> )(__pred)); } 
# 1079 "/usr/include/c++/9/bits/stl_function.h" 3
template< class _Arg, class _Result> 
# 1080
class pointer_to_unary_function : public unary_function< _Arg, _Result>  { 
# 1083
protected: _Result (*_M_ptr)(_Arg); 
# 1086
public: pointer_to_unary_function() { } 
# 1089
explicit pointer_to_unary_function(_Result (*__x)(_Arg)) : _M_ptr(__x) 
# 1090
{ } 
# 1093
_Result operator()(_Arg __x) const 
# 1094
{ return (_M_ptr)(__x); } 
# 1095
}; 
# 1098
template< class _Arg, class _Result> inline pointer_to_unary_function< _Arg, _Result>  
# 1100
ptr_fun(_Result (*__x)(_Arg)) 
# 1101
{ return ((pointer_to_unary_function< _Arg, _Result> )(__x)); } 
# 1104
template< class _Arg1, class _Arg2, class _Result> 
# 1105
class pointer_to_binary_function : public binary_function< _Arg1, _Arg2, _Result>  { 
# 1109
protected: _Result (*_M_ptr)(_Arg1, _Arg2); 
# 1112
public: pointer_to_binary_function() { } 
# 1115
explicit pointer_to_binary_function(_Result (*__x)(_Arg1, _Arg2)) : _M_ptr(__x) 
# 1116
{ } 
# 1119
_Result operator()(_Arg1 __x, _Arg2 __y) const 
# 1120
{ return (_M_ptr)(__x, __y); } 
# 1121
}; 
# 1124
template< class _Arg1, class _Arg2, class _Result> inline pointer_to_binary_function< _Arg1, _Arg2, _Result>  
# 1126
ptr_fun(_Result (*__x)(_Arg1, _Arg2)) 
# 1127
{ return ((pointer_to_binary_function< _Arg1, _Arg2, _Result> )(__x)); } 
# 1130
template< class _Tp> 
# 1131
struct _Identity : public unary_function< _Tp, _Tp>  { 
# 1135
_Tp &operator()(_Tp &__x) const 
# 1136
{ return __x; } 
# 1139
const _Tp &operator()(const _Tp &__x) const 
# 1140
{ return __x; } 
# 1141
}; 
# 1144
template< class _Tp> struct _Identity< const _Tp>  : public std::_Identity< _Tp>  { }; 
# 1146
template< class _Pair> 
# 1147
struct _Select1st : public unary_function< _Pair, typename _Pair::first_type>  { 
# 1151
typename _Pair::first_type &operator()(_Pair &__x) const 
# 1152
{ return __x.first; } 
# 1155
const typename _Pair::first_type &operator()(const _Pair &__x) const 
# 1156
{ return __x.first; } 
# 1159
template< class _Pair2> typename _Pair2::first_type &
# 1161
operator()(_Pair2 &__x) const 
# 1162
{ return __x.first; } 
# 1164
template< class _Pair2> const typename _Pair2::first_type &
# 1166
operator()(const _Pair2 &__x) const 
# 1167
{ return __x.first; } 
# 1169
}; 
# 1171
template< class _Pair> 
# 1172
struct _Select2nd : public unary_function< _Pair, typename _Pair::second_type>  { 
# 1176
typename _Pair::second_type &operator()(_Pair &__x) const 
# 1177
{ return __x.second; } 
# 1180
const typename _Pair::second_type &operator()(const _Pair &__x) const 
# 1181
{ return __x.second; } 
# 1182
}; 
# 1202 "/usr/include/c++/9/bits/stl_function.h" 3
template< class _Ret, class _Tp> 
# 1203
class mem_fun_t : public unary_function< _Tp *, _Ret>  { 
# 1207
public: explicit mem_fun_t(_Ret (_Tp::*__pf)(void)) : _M_f(__pf) 
# 1208
{ } 
# 1211
_Ret operator()(_Tp *__p) const 
# 1212
{ return (__p->*(_M_f))(); } 
# 1215
private: _Ret (_Tp::*_M_f)(void); 
# 1216
}; 
# 1220
template< class _Ret, class _Tp> 
# 1221
class const_mem_fun_t : public unary_function< const _Tp *, _Ret>  { 
# 1225
public: explicit const_mem_fun_t(_Ret (_Tp::*__pf)(void) const) : _M_f(__pf) 
# 1226
{ } 
# 1229
_Ret operator()(const _Tp *__p) const 
# 1230
{ return (__p->*(_M_f))(); } 
# 1233
private: _Ret (_Tp::*_M_f)(void) const; 
# 1234
}; 
# 1238
template< class _Ret, class _Tp> 
# 1239
class mem_fun_ref_t : public unary_function< _Tp, _Ret>  { 
# 1243
public: explicit mem_fun_ref_t(_Ret (_Tp::*__pf)(void)) : _M_f(__pf) 
# 1244
{ } 
# 1247
_Ret operator()(_Tp &__r) const 
# 1248
{ return (__r.*(_M_f))(); } 
# 1251
private: _Ret (_Tp::*_M_f)(void); 
# 1252
}; 
# 1256
template< class _Ret, class _Tp> 
# 1257
class const_mem_fun_ref_t : public unary_function< _Tp, _Ret>  { 
# 1261
public: explicit const_mem_fun_ref_t(_Ret (_Tp::*__pf)(void) const) : _M_f(__pf) 
# 1262
{ } 
# 1265
_Ret operator()(const _Tp &__r) const 
# 1266
{ return (__r.*(_M_f))(); } 
# 1269
private: _Ret (_Tp::*_M_f)(void) const; 
# 1270
}; 
# 1274
template< class _Ret, class _Tp, class _Arg> 
# 1275
class mem_fun1_t : public binary_function< _Tp *, _Arg, _Ret>  { 
# 1279
public: explicit mem_fun1_t(_Ret (_Tp::*__pf)(_Arg)) : _M_f(__pf) 
# 1280
{ } 
# 1283
_Ret operator()(_Tp *__p, _Arg __x) const 
# 1284
{ return (__p->*(_M_f))(__x); } 
# 1287
private: _Ret (_Tp::*_M_f)(_Arg); 
# 1288
}; 
# 1292
template< class _Ret, class _Tp, class _Arg> 
# 1293
class const_mem_fun1_t : public binary_function< const _Tp *, _Arg, _Ret>  { 
# 1297
public: explicit const_mem_fun1_t(_Ret (_Tp::*__pf)(_Arg) const) : _M_f(__pf) 
# 1298
{ } 
# 1301
_Ret operator()(const _Tp *__p, _Arg __x) const 
# 1302
{ return (__p->*(_M_f))(__x); } 
# 1305
private: _Ret (_Tp::*_M_f)(_Arg) const; 
# 1306
}; 
# 1310
template< class _Ret, class _Tp, class _Arg> 
# 1311
class mem_fun1_ref_t : public binary_function< _Tp, _Arg, _Ret>  { 
# 1315
public: explicit mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg)) : _M_f(__pf) 
# 1316
{ } 
# 1319
_Ret operator()(_Tp &__r, _Arg __x) const 
# 1320
{ return (__r.*(_M_f))(__x); } 
# 1323
private: _Ret (_Tp::*_M_f)(_Arg); 
# 1324
}; 
# 1328
template< class _Ret, class _Tp, class _Arg> 
# 1329
class const_mem_fun1_ref_t : public binary_function< _Tp, _Arg, _Ret>  { 
# 1333
public: explicit const_mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg) const) : _M_f(__pf) 
# 1334
{ } 
# 1337
_Ret operator()(const _Tp &__r, _Arg __x) const 
# 1338
{ return (__r.*(_M_f))(__x); } 
# 1341
private: _Ret (_Tp::*_M_f)(_Arg) const; 
# 1342
}; 
# 1346
template< class _Ret, class _Tp> inline mem_fun_t< _Ret, _Tp>  
# 1348
mem_fun(_Ret (_Tp::*__f)(void)) 
# 1349
{ return ((mem_fun_t< _Ret, _Tp> )(__f)); } 
# 1351
template< class _Ret, class _Tp> inline const_mem_fun_t< _Ret, _Tp>  
# 1353
mem_fun(_Ret (_Tp::*__f)(void) const) 
# 1354
{ return ((const_mem_fun_t< _Ret, _Tp> )(__f)); } 
# 1356
template< class _Ret, class _Tp> inline mem_fun_ref_t< _Ret, _Tp>  
# 1358
mem_fun_ref(_Ret (_Tp::*__f)(void)) 
# 1359
{ return ((mem_fun_ref_t< _Ret, _Tp> )(__f)); } 
# 1361
template< class _Ret, class _Tp> inline const_mem_fun_ref_t< _Ret, _Tp>  
# 1363
mem_fun_ref(_Ret (_Tp::*__f)(void) const) 
# 1364
{ return ((const_mem_fun_ref_t< _Ret, _Tp> )(__f)); } 
# 1366
template< class _Ret, class _Tp, class _Arg> inline mem_fun1_t< _Ret, _Tp, _Arg>  
# 1368
mem_fun(_Ret (_Tp::*__f)(_Arg)) 
# 1369
{ return ((mem_fun1_t< _Ret, _Tp, _Arg> )(__f)); } 
# 1371
template< class _Ret, class _Tp, class _Arg> inline const_mem_fun1_t< _Ret, _Tp, _Arg>  
# 1373
mem_fun(_Ret (_Tp::*__f)(_Arg) const) 
# 1374
{ return ((const_mem_fun1_t< _Ret, _Tp, _Arg> )(__f)); } 
# 1376
template< class _Ret, class _Tp, class _Arg> inline mem_fun1_ref_t< _Ret, _Tp, _Arg>  
# 1378
mem_fun_ref(_Ret (_Tp::*__f)(_Arg)) 
# 1379
{ return ((mem_fun1_ref_t< _Ret, _Tp, _Arg> )(__f)); } 
# 1381
template< class _Ret, class _Tp, class _Arg> inline const_mem_fun1_ref_t< _Ret, _Tp, _Arg>  
# 1383
mem_fun_ref(_Ret (_Tp::*__f)(_Arg) const) 
# 1384
{ return ((const_mem_fun1_ref_t< _Ret, _Tp, _Arg> )(__f)); } 
# 1389
}
# 60 "/usr/include/c++/9/backward/binders.h" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 63
namespace std __attribute((__visibility__("default"))) { 
# 107 "/usr/include/c++/9/backward/binders.h" 3
template< class _Operation> 
# 108
class binder1st : public unary_function< typename _Operation::second_argument_type, typename _Operation::result_type>  { 
# 113
protected: _Operation op; 
# 114
typename _Operation::first_argument_type value; 
# 117
public: binder1st(const _Operation &__x, const typename _Operation::first_argument_type &
# 118
__y) : op(__x), value(__y) 
# 119
{ } 
# 122
typename _Operation::result_type operator()(const typename _Operation::second_argument_type &__x) const 
# 123
{ return (op)(value, __x); } 
# 128
typename _Operation::result_type operator()(typename _Operation::second_argument_type &__x) const 
# 129
{ return (op)(value, __x); } 
# 130
} __attribute((__deprecated__)); 
# 133
template< class _Operation, class _Tp> inline binder1st< _Operation>  
# 135
bind1st(const _Operation &__fn, const _Tp &__x) 
# 136
{ 
# 137
typedef typename _Operation::first_argument_type _Arg1_type; 
# 138
return binder1st< _Operation> (__fn, (_Arg1_type)__x); 
# 139
} 
# 142
template< class _Operation> 
# 143
class binder2nd : public unary_function< typename _Operation::first_argument_type, typename _Operation::result_type>  { 
# 148
protected: _Operation op; 
# 149
typename _Operation::second_argument_type value; 
# 152
public: binder2nd(const _Operation &__x, const typename _Operation::second_argument_type &
# 153
__y) : op(__x), value(__y) 
# 154
{ } 
# 157
typename _Operation::result_type operator()(const typename _Operation::first_argument_type &__x) const 
# 158
{ return (op)(__x, value); } 
# 163
typename _Operation::result_type operator()(typename _Operation::first_argument_type &__x) const 
# 164
{ return (op)(__x, value); } 
# 165
} __attribute((__deprecated__)); 
# 168
template< class _Operation, class _Tp> inline binder2nd< _Operation>  
# 170
bind2nd(const _Operation &__fn, const _Tp &__x) 
# 171
{ 
# 172
typedef typename _Operation::second_argument_type _Arg2_type; 
# 173
return binder2nd< _Operation> (__fn, (_Arg2_type)__x); 
# 174
} 
# 178
}
# 180
#pragma GCC diagnostic pop
# 39 "/usr/include/c++/9/initializer_list" 3
#pragma GCC visibility push ( default )
# 43
namespace std { 
# 46
template< class _E> 
# 47
class initializer_list { 
# 50
public: typedef _E value_type; 
# 51
typedef const _E &reference; 
# 52
typedef const _E &const_reference; 
# 53
typedef size_t size_type; 
# 54
typedef const _E *iterator; 
# 55
typedef const _E *const_iterator; 
# 58
private: iterator _M_array; 
# 59
size_type _M_len; 
# 62
constexpr initializer_list(const_iterator __a, size_type __l) : _M_array(__a), _M_len(__l) 
# 63
{ } 
# 66
public: constexpr initializer_list() noexcept : _M_array((0)), _M_len((0)) 
# 67
{ } 
# 71
constexpr size_type size() const noexcept { return _M_len; } 
# 75
constexpr const_iterator begin() const noexcept { return _M_array; } 
# 79
constexpr const_iterator end() const noexcept { return begin() + size(); } 
# 80
}; 
# 87
template< class _Tp> constexpr const _Tp *
# 89
begin(initializer_list< _Tp>  __ils) noexcept 
# 90
{ return __ils.begin(); } 
# 97
template< class _Tp> constexpr const _Tp *
# 99
end(initializer_list< _Tp>  __ils) noexcept 
# 100
{ return __ils.end(); } 
# 101
}
# 103
#pragma GCC visibility pop
# 37 "/usr/include/c++/9/bits/range_access.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 46
template< class _Container> inline auto 
# 48
begin(_Container &__cont)->__decltype((__cont.begin())) 
# 49
{ return __cont.begin(); } 
# 56
template< class _Container> inline auto 
# 58
begin(const _Container &__cont)->__decltype((__cont.begin())) 
# 59
{ return __cont.begin(); } 
# 66
template< class _Container> inline auto 
# 68
end(_Container &__cont)->__decltype((__cont.end())) 
# 69
{ return __cont.end(); } 
# 76
template< class _Container> inline auto 
# 78
end(const _Container &__cont)->__decltype((__cont.end())) 
# 79
{ return __cont.end(); } 
# 85
template< class _Tp, size_t _Nm> constexpr _Tp *
# 87
begin(_Tp (&__arr)[_Nm]) noexcept 
# 88
{ return __arr; } 
# 95
template< class _Tp, size_t _Nm> constexpr _Tp *
# 97
end(_Tp (&__arr)[_Nm]) noexcept 
# 98
{ return __arr + _Nm; } 
# 102
template< class _Tp> class valarray; 
# 104
template< class _Tp> _Tp *begin(valarray< _Tp>  &); 
# 105
template< class _Tp> const _Tp *begin(const valarray< _Tp>  &); 
# 106
template< class _Tp> _Tp *end(valarray< _Tp>  &); 
# 107
template< class _Tp> const _Tp *end(const valarray< _Tp>  &); 
# 114
template< class _Container> constexpr auto 
# 116
cbegin(const _Container &__cont) noexcept(noexcept(std::begin(__cont)))->__decltype((std::begin(__cont))) 
# 118
{ return std::begin(__cont); } 
# 125
template< class _Container> constexpr auto 
# 127
cend(const _Container &__cont) noexcept(noexcept(std::end(__cont)))->__decltype((std::end(__cont))) 
# 129
{ return std::end(__cont); } 
# 136
template< class _Container> inline auto 
# 138
rbegin(_Container &__cont)->__decltype((__cont.rbegin())) 
# 139
{ return __cont.rbegin(); } 
# 146
template< class _Container> inline auto 
# 148
rbegin(const _Container &__cont)->__decltype((__cont.rbegin())) 
# 149
{ return __cont.rbegin(); } 
# 156
template< class _Container> inline auto 
# 158
rend(_Container &__cont)->__decltype((__cont.rend())) 
# 159
{ return __cont.rend(); } 
# 166
template< class _Container> inline auto 
# 168
rend(const _Container &__cont)->__decltype((__cont.rend())) 
# 169
{ return __cont.rend(); } 
# 176
template< class _Tp, size_t _Nm> inline reverse_iterator< _Tp *>  
# 178
rbegin(_Tp (&__arr)[_Nm]) noexcept 
# 179
{ return ((reverse_iterator< _Tp *> )(__arr + _Nm)); } 
# 186
template< class _Tp, size_t _Nm> inline reverse_iterator< _Tp *>  
# 188
rend(_Tp (&__arr)[_Nm]) noexcept 
# 189
{ return ((reverse_iterator< _Tp *> )(__arr)); } 
# 196
template< class _Tp> inline reverse_iterator< const _Tp *>  
# 198
rbegin(initializer_list< _Tp>  __il) noexcept 
# 199
{ return ((reverse_iterator< const _Tp *> )(__il.end())); } 
# 206
template< class _Tp> inline reverse_iterator< const _Tp *>  
# 208
rend(initializer_list< _Tp>  __il) noexcept 
# 209
{ return ((reverse_iterator< const _Tp *> )(__il.begin())); } 
# 216
template< class _Container> inline auto 
# 218
crbegin(const _Container &__cont)->__decltype((std::rbegin(__cont))) 
# 219
{ return std::rbegin(__cont); } 
# 226
template< class _Container> inline auto 
# 228
crend(const _Container &__cont)->__decltype((std::rend(__cont))) 
# 229
{ return std::rend(__cont); } 
# 324 "/usr/include/c++/9/bits/range_access.h" 3
}
# 30 "/usr/include/aarch64-linux-gnu/c++/9/bits/gthr.h" 3
#pragma GCC visibility push ( default )
# 23 "/usr/include/aarch64-linux-gnu/bits/types/struct_sched_param.h" 3
struct sched_param { 
# 25
int sched_priority; 
# 26
}; 
# 78 "/usr/include/aarch64-linux-gnu/bits/sched.h" 3
extern "C" {
# 82
extern int clone(int (* __fn)(void * __arg), void * __child_stack, int __flags, void * __arg, ...) throw(); 
# 86
extern int unshare(int __flags) throw(); 
# 89
extern int sched_getcpu() throw(); 
# 92
extern int getcpu(unsigned *, unsigned *) throw(); 
# 95
extern int setns(int __fd, int __nstype) throw(); 
# 98
}
# 32 "/usr/include/aarch64-linux-gnu/bits/cpu-set.h" 3
typedef unsigned long __cpu_mask; 
# 42
typedef 
# 40
struct { 
# 41
__cpu_mask __bits[(1024) / ((8) * sizeof(__cpu_mask))]; 
# 42
} cpu_set_t; 
# 115 "/usr/include/aarch64-linux-gnu/bits/cpu-set.h" 3
extern "C" {
# 117
extern int __sched_cpucount(size_t __setsize, const cpu_set_t * __setp) throw(); 
# 119
extern cpu_set_t *__sched_cpualloc(size_t __count) throw() __attribute((__warn_unused_result__)); 
# 120
extern void __sched_cpufree(cpu_set_t * __set) throw(); 
# 122
}
# 51 "/usr/include/sched.h" 3
extern "C" {
# 54
extern int sched_setparam(__pid_t __pid, const sched_param * __param) throw(); 
# 58
extern int sched_getparam(__pid_t __pid, sched_param * __param) throw(); 
# 61
extern int sched_setscheduler(__pid_t __pid, int __policy, const sched_param * __param) throw(); 
# 65
extern int sched_getscheduler(__pid_t __pid) throw(); 
# 68
extern int sched_yield() throw(); 
# 71
extern int sched_get_priority_max(int __algorithm) throw(); 
# 74
extern int sched_get_priority_min(int __algorithm) throw(); 
# 77
extern int sched_rr_get_interval(__pid_t __pid, timespec * __t) throw(); 
# 121 "/usr/include/sched.h" 3
extern int sched_setaffinity(__pid_t __pid, size_t __cpusetsize, const cpu_set_t * __cpuset) throw(); 
# 125
extern int sched_getaffinity(__pid_t __pid, size_t __cpusetsize, cpu_set_t * __cpuset) throw(); 
# 129
}
# 30 "/usr/include/aarch64-linux-gnu/bits/setjmp.h" 3
__extension__ typedef unsigned long long __jmp_buf[22]; 
# 34 "/usr/include/pthread.h" 3
enum { 
# 35
PTHREAD_CREATE_JOINABLE, 
# 37
PTHREAD_CREATE_DETACHED
# 39
}; 
# 44
enum { 
# 45
PTHREAD_MUTEX_TIMED_NP, 
# 46
PTHREAD_MUTEX_RECURSIVE_NP, 
# 47
PTHREAD_MUTEX_ERRORCHECK_NP, 
# 48
PTHREAD_MUTEX_ADAPTIVE_NP, 
# 51
PTHREAD_MUTEX_NORMAL = PTHREAD_MUTEX_TIMED_NP, 
# 52
PTHREAD_MUTEX_RECURSIVE, 
# 53
PTHREAD_MUTEX_ERRORCHECK, 
# 54
PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_NORMAL, 
# 58
PTHREAD_MUTEX_FAST_NP = PTHREAD_MUTEX_TIMED_NP
# 60
}; 
# 66
enum { 
# 67
PTHREAD_MUTEX_STALLED, 
# 68
PTHREAD_MUTEX_STALLED_NP = PTHREAD_MUTEX_STALLED, 
# 69
PTHREAD_MUTEX_ROBUST, 
# 70
PTHREAD_MUTEX_ROBUST_NP = PTHREAD_MUTEX_ROBUST
# 71
}; 
# 78
enum { 
# 79
PTHREAD_PRIO_NONE, 
# 80
PTHREAD_PRIO_INHERIT, 
# 81
PTHREAD_PRIO_PROTECT
# 82
}; 
# 101 "/usr/include/pthread.h" 3
enum { 
# 102
PTHREAD_RWLOCK_PREFER_READER_NP, 
# 103
PTHREAD_RWLOCK_PREFER_WRITER_NP, 
# 104
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP, 
# 105
PTHREAD_RWLOCK_DEFAULT_NP = PTHREAD_RWLOCK_PREFER_READER_NP
# 106
}; 
# 121 "/usr/include/pthread.h" 3
enum { 
# 122
PTHREAD_INHERIT_SCHED, 
# 124
PTHREAD_EXPLICIT_SCHED
# 126
}; 
# 131
enum { 
# 132
PTHREAD_SCOPE_SYSTEM, 
# 134
PTHREAD_SCOPE_PROCESS
# 136
}; 
# 141
enum { 
# 142
PTHREAD_PROCESS_PRIVATE, 
# 144
PTHREAD_PROCESS_SHARED
# 146
}; 
# 155 "/usr/include/pthread.h" 3
struct _pthread_cleanup_buffer { 
# 157
void (*__routine)(void *); 
# 158
void *__arg; 
# 159
int __canceltype; 
# 160
_pthread_cleanup_buffer *__prev; 
# 161
}; 
# 165
enum { 
# 166
PTHREAD_CANCEL_ENABLE, 
# 168
PTHREAD_CANCEL_DISABLE
# 170
}; 
# 172
enum { 
# 173
PTHREAD_CANCEL_DEFERRED, 
# 175
PTHREAD_CANCEL_ASYNCHRONOUS
# 177
}; 
# 193 "/usr/include/pthread.h" 3
extern "C" {
# 198
extern int pthread_create(pthread_t *__restrict__ __newthread, const pthread_attr_t *__restrict__ __attr, void *(* __start_routine)(void *), void *__restrict__ __arg) throw()
# 201
 __attribute((__nonnull__(1, 3))); 
# 207
extern void pthread_exit(void * __retval) __attribute((__noreturn__)); 
# 215
extern int pthread_join(pthread_t __th, void ** __thread_return); 
# 220
extern int pthread_tryjoin_np(pthread_t __th, void ** __thread_return) throw(); 
# 228
extern int pthread_timedjoin_np(pthread_t __th, void ** __thread_return, const timespec * __abstime); 
# 238 "/usr/include/pthread.h" 3
extern int pthread_clockjoin_np(pthread_t __th, void ** __thread_return, clockid_t __clockid, const timespec * __abstime); 
# 247
extern int pthread_detach(pthread_t __th) throw(); 
# 251
extern pthread_t pthread_self() throw() __attribute((const)); 
# 254
extern __attribute((gnu_inline)) inline int pthread_equal(pthread_t __thread1, pthread_t __thread2) throw()
# 255
 __attribute((const)); 
# 263
extern int pthread_attr_init(pthread_attr_t * __attr) throw() __attribute((__nonnull__(1))); 
# 266
extern int pthread_attr_destroy(pthread_attr_t * __attr) throw()
# 267
 __attribute((__nonnull__(1))); 
# 270
extern int pthread_attr_getdetachstate(const pthread_attr_t * __attr, int * __detachstate) throw()
# 272
 __attribute((__nonnull__(1, 2))); 
# 275
extern int pthread_attr_setdetachstate(pthread_attr_t * __attr, int __detachstate) throw()
# 277
 __attribute((__nonnull__(1))); 
# 281
extern int pthread_attr_getguardsize(const pthread_attr_t * __attr, size_t * __guardsize) throw()
# 283
 __attribute((__nonnull__(1, 2))); 
# 286
extern int pthread_attr_setguardsize(pthread_attr_t * __attr, size_t __guardsize) throw()
# 288
 __attribute((__nonnull__(1))); 
# 292
extern int pthread_attr_getschedparam(const pthread_attr_t *__restrict__ __attr, sched_param *__restrict__ __param) throw()
# 294
 __attribute((__nonnull__(1, 2))); 
# 297
extern int pthread_attr_setschedparam(pthread_attr_t *__restrict__ __attr, const sched_param *__restrict__ __param) throw()
# 299
 __attribute((__nonnull__(1, 2))); 
# 302
extern int pthread_attr_getschedpolicy(const pthread_attr_t *__restrict__ __attr, int *__restrict__ __policy) throw()
# 304
 __attribute((__nonnull__(1, 2))); 
# 307
extern int pthread_attr_setschedpolicy(pthread_attr_t * __attr, int __policy) throw()
# 308
 __attribute((__nonnull__(1))); 
# 311
extern int pthread_attr_getinheritsched(const pthread_attr_t *__restrict__ __attr, int *__restrict__ __inherit) throw()
# 313
 __attribute((__nonnull__(1, 2))); 
# 316
extern int pthread_attr_setinheritsched(pthread_attr_t * __attr, int __inherit) throw()
# 318
 __attribute((__nonnull__(1))); 
# 322
extern int pthread_attr_getscope(const pthread_attr_t *__restrict__ __attr, int *__restrict__ __scope) throw()
# 324
 __attribute((__nonnull__(1, 2))); 
# 327
extern int pthread_attr_setscope(pthread_attr_t * __attr, int __scope) throw()
# 328
 __attribute((__nonnull__(1))); 
# 331
extern int pthread_attr_getstackaddr(const pthread_attr_t *__restrict__ __attr, void **__restrict__ __stackaddr) throw()
# 333
 __attribute((__nonnull__(1, 2))) __attribute((__deprecated__)); 
# 339
extern int pthread_attr_setstackaddr(pthread_attr_t * __attr, void * __stackaddr) throw()
# 341
 __attribute((__nonnull__(1))) __attribute((__deprecated__)); 
# 344
extern int pthread_attr_getstacksize(const pthread_attr_t *__restrict__ __attr, size_t *__restrict__ __stacksize) throw()
# 346
 __attribute((__nonnull__(1, 2))); 
# 351
extern int pthread_attr_setstacksize(pthread_attr_t * __attr, size_t __stacksize) throw()
# 353
 __attribute((__nonnull__(1))); 
# 357
extern int pthread_attr_getstack(const pthread_attr_t *__restrict__ __attr, void **__restrict__ __stackaddr, size_t *__restrict__ __stacksize) throw()
# 360
 __attribute((__nonnull__(1, 2, 3))); 
# 365
extern int pthread_attr_setstack(pthread_attr_t * __attr, void * __stackaddr, size_t __stacksize) throw()
# 366
 __attribute((__nonnull__(1))); 
# 372
extern int pthread_attr_setaffinity_np(pthread_attr_t * __attr, size_t __cpusetsize, const cpu_set_t * __cpuset) throw()
# 375
 __attribute((__nonnull__(1, 3))); 
# 379
extern int pthread_attr_getaffinity_np(const pthread_attr_t * __attr, size_t __cpusetsize, cpu_set_t * __cpuset) throw()
# 382
 __attribute((__nonnull__(1, 3))); 
# 385
extern int pthread_getattr_default_np(pthread_attr_t * __attr) throw()
# 386
 __attribute((__nonnull__(1))); 
# 390
extern int pthread_setattr_default_np(const pthread_attr_t * __attr) throw()
# 391
 __attribute((__nonnull__(1))); 
# 396
extern int pthread_getattr_np(pthread_t __th, pthread_attr_t * __attr) throw()
# 397
 __attribute((__nonnull__(2))); 
# 405
extern int pthread_setschedparam(pthread_t __target_thread, int __policy, const sched_param * __param) throw()
# 407
 __attribute((__nonnull__(3))); 
# 410
extern int pthread_getschedparam(pthread_t __target_thread, int *__restrict__ __policy, sched_param *__restrict__ __param) throw()
# 413
 __attribute((__nonnull__(2, 3))); 
# 416
extern int pthread_setschedprio(pthread_t __target_thread, int __prio) throw(); 
# 422
extern int pthread_getname_np(pthread_t __target_thread, char * __buf, size_t __buflen) throw()
# 424
 __attribute((__nonnull__(2))); 
# 427
extern int pthread_setname_np(pthread_t __target_thread, const char * __name) throw()
# 428
 __attribute((__nonnull__(2))); 
# 434
extern int pthread_getconcurrency() throw(); 
# 437
extern int pthread_setconcurrency(int __level) throw(); 
# 445
extern int pthread_yield() throw(); 
# 450
extern int pthread_setaffinity_np(pthread_t __th, size_t __cpusetsize, const cpu_set_t * __cpuset) throw()
# 452
 __attribute((__nonnull__(3))); 
# 455
extern int pthread_getaffinity_np(pthread_t __th, size_t __cpusetsize, cpu_set_t * __cpuset) throw()
# 457
 __attribute((__nonnull__(3))); 
# 470 "/usr/include/pthread.h" 3
extern int pthread_once(pthread_once_t * __once_control, void (* __init_routine)(void))
# 471
 __attribute((__nonnull__(1, 2))); 
# 482 "/usr/include/pthread.h" 3
extern int pthread_setcancelstate(int __state, int * __oldstate); 
# 486
extern int pthread_setcanceltype(int __type, int * __oldtype); 
# 489
extern int pthread_cancel(pthread_t __th); 
# 494
extern void pthread_testcancel(); 
# 507
typedef 
# 500
struct { 
# 502
struct { 
# 503
__jmp_buf __cancel_jmp_buf; 
# 504
int __mask_was_saved; 
# 505
} __cancel_jmp_buf[1]; 
# 506
void *__pad[4]; 
# 507
} __pthread_unwind_buf_t __attribute((__aligned__)); 
# 516 "/usr/include/pthread.h" 3
struct __pthread_cleanup_frame { 
# 518
void (*__cancel_routine)(void *); 
# 519
void *__cancel_arg; 
# 520
int __do_it; 
# 521
int __cancel_type; 
# 522
}; 
# 527
class __pthread_cleanup_class { 
# 529
void (*__cancel_routine)(void *); 
# 530
void *__cancel_arg; 
# 531
int __do_it; 
# 532
int __cancel_type; 
# 535
public: __pthread_cleanup_class(void (*__fct)(void *), void *__arg) : __cancel_routine(__fct), __cancel_arg(__arg), __do_it(1) 
# 536
{ } 
# 537
~__pthread_cleanup_class() { if (__do_it) { (__cancel_routine)(__cancel_arg); }  } 
# 538
void __setdoit(int __newval) { (__do_it) = __newval; } 
# 539
void __defer() { pthread_setcanceltype(PTHREAD_CANCEL_DEFERRED, &(__cancel_type)); 
# 540
} 
# 541
void __restore() const { pthread_setcanceltype(__cancel_type, 0); } 
# 542
}; 
# 718 "/usr/include/pthread.h" 3
struct __jmp_buf_tag; 
# 719
extern int __sigsetjmp(__jmp_buf_tag * __env, int __savemask) throw(); 
# 725
extern int pthread_mutex_init(pthread_mutex_t * __mutex, const pthread_mutexattr_t * __mutexattr) throw()
# 727
 __attribute((__nonnull__(1))); 
# 730
extern int pthread_mutex_destroy(pthread_mutex_t * __mutex) throw()
# 731
 __attribute((__nonnull__(1))); 
# 734
extern int pthread_mutex_trylock(pthread_mutex_t * __mutex) throw()
# 735
 __attribute((__nonnull__(1))); 
# 738
extern int pthread_mutex_lock(pthread_mutex_t * __mutex) throw()
# 739
 __attribute((__nonnull__(1))); 
# 743
extern int pthread_mutex_timedlock(pthread_mutex_t *__restrict__ __mutex, const timespec *__restrict__ __abstime) throw()
# 745
 __attribute((__nonnull__(1, 2))); 
# 749
extern int pthread_mutex_clocklock(pthread_mutex_t *__restrict__ __mutex, clockid_t __clockid, const timespec *__restrict__ __abstime) throw()
# 752
 __attribute((__nonnull__(1, 3))); 
# 756
extern int pthread_mutex_unlock(pthread_mutex_t * __mutex) throw()
# 757
 __attribute((__nonnull__(1))); 
# 761
extern int pthread_mutex_getprioceiling(const pthread_mutex_t *__restrict__ __mutex, int *__restrict__ __prioceiling) throw()
# 764
 __attribute((__nonnull__(1, 2))); 
# 768
extern int pthread_mutex_setprioceiling(pthread_mutex_t *__restrict__ __mutex, int __prioceiling, int *__restrict__ __old_ceiling) throw()
# 771
 __attribute((__nonnull__(1, 3))); 
# 776
extern int pthread_mutex_consistent(pthread_mutex_t * __mutex) throw()
# 777
 __attribute((__nonnull__(1))); 
# 779
extern int pthread_mutex_consistent_np(pthread_mutex_t * __mutex) throw()
# 780
 __attribute((__nonnull__(1))); 
# 789 "/usr/include/pthread.h" 3
extern int pthread_mutexattr_init(pthread_mutexattr_t * __attr) throw()
# 790
 __attribute((__nonnull__(1))); 
# 793
extern int pthread_mutexattr_destroy(pthread_mutexattr_t * __attr) throw()
# 794
 __attribute((__nonnull__(1))); 
# 797
extern int pthread_mutexattr_getpshared(const pthread_mutexattr_t *__restrict__ __attr, int *__restrict__ __pshared) throw()
# 800
 __attribute((__nonnull__(1, 2))); 
# 803
extern int pthread_mutexattr_setpshared(pthread_mutexattr_t * __attr, int __pshared) throw()
# 805
 __attribute((__nonnull__(1))); 
# 809
extern int pthread_mutexattr_gettype(const pthread_mutexattr_t *__restrict__ __attr, int *__restrict__ __kind) throw()
# 811
 __attribute((__nonnull__(1, 2))); 
# 816
extern int pthread_mutexattr_settype(pthread_mutexattr_t * __attr, int __kind) throw()
# 817
 __attribute((__nonnull__(1))); 
# 821
extern int pthread_mutexattr_getprotocol(const pthread_mutexattr_t *__restrict__ __attr, int *__restrict__ __protocol) throw()
# 824
 __attribute((__nonnull__(1, 2))); 
# 828
extern int pthread_mutexattr_setprotocol(pthread_mutexattr_t * __attr, int __protocol) throw()
# 830
 __attribute((__nonnull__(1))); 
# 833
extern int pthread_mutexattr_getprioceiling(const pthread_mutexattr_t *__restrict__ __attr, int *__restrict__ __prioceiling) throw()
# 836
 __attribute((__nonnull__(1, 2))); 
# 839
extern int pthread_mutexattr_setprioceiling(pthread_mutexattr_t * __attr, int __prioceiling) throw()
# 841
 __attribute((__nonnull__(1))); 
# 845
extern int pthread_mutexattr_getrobust(const pthread_mutexattr_t * __attr, int * __robustness) throw()
# 847
 __attribute((__nonnull__(1, 2))); 
# 849
extern int pthread_mutexattr_getrobust_np(const pthread_mutexattr_t * __attr, int * __robustness) throw()
# 851
 __attribute((__nonnull__(1, 2))); 
# 855
extern int pthread_mutexattr_setrobust(pthread_mutexattr_t * __attr, int __robustness) throw()
# 857
 __attribute((__nonnull__(1))); 
# 859
extern int pthread_mutexattr_setrobust_np(pthread_mutexattr_t * __attr, int __robustness) throw()
# 861
 __attribute((__nonnull__(1))); 
# 871 "/usr/include/pthread.h" 3
extern int pthread_rwlock_init(pthread_rwlock_t *__restrict__ __rwlock, const pthread_rwlockattr_t *__restrict__ __attr) throw()
# 873
 __attribute((__nonnull__(1))); 
# 876
extern int pthread_rwlock_destroy(pthread_rwlock_t * __rwlock) throw()
# 877
 __attribute((__nonnull__(1))); 
# 880
extern int pthread_rwlock_rdlock(pthread_rwlock_t * __rwlock) throw()
# 881
 __attribute((__nonnull__(1))); 
# 884
extern int pthread_rwlock_tryrdlock(pthread_rwlock_t * __rwlock) throw()
# 885
 __attribute((__nonnull__(1))); 
# 889
extern int pthread_rwlock_timedrdlock(pthread_rwlock_t *__restrict__ __rwlock, const timespec *__restrict__ __abstime) throw()
# 891
 __attribute((__nonnull__(1, 2))); 
# 895
extern int pthread_rwlock_clockrdlock(pthread_rwlock_t *__restrict__ __rwlock, clockid_t __clockid, const timespec *__restrict__ __abstime) throw()
# 898
 __attribute((__nonnull__(1, 3))); 
# 902
extern int pthread_rwlock_wrlock(pthread_rwlock_t * __rwlock) throw()
# 903
 __attribute((__nonnull__(1))); 
# 906
extern int pthread_rwlock_trywrlock(pthread_rwlock_t * __rwlock) throw()
# 907
 __attribute((__nonnull__(1))); 
# 911
extern int pthread_rwlock_timedwrlock(pthread_rwlock_t *__restrict__ __rwlock, const timespec *__restrict__ __abstime) throw()
# 913
 __attribute((__nonnull__(1, 2))); 
# 917
extern int pthread_rwlock_clockwrlock(pthread_rwlock_t *__restrict__ __rwlock, clockid_t __clockid, const timespec *__restrict__ __abstime) throw()
# 920
 __attribute((__nonnull__(1, 3))); 
# 924
extern int pthread_rwlock_unlock(pthread_rwlock_t * __rwlock) throw()
# 925
 __attribute((__nonnull__(1))); 
# 931
extern int pthread_rwlockattr_init(pthread_rwlockattr_t * __attr) throw()
# 932
 __attribute((__nonnull__(1))); 
# 935
extern int pthread_rwlockattr_destroy(pthread_rwlockattr_t * __attr) throw()
# 936
 __attribute((__nonnull__(1))); 
# 939
extern int pthread_rwlockattr_getpshared(const pthread_rwlockattr_t *__restrict__ __attr, int *__restrict__ __pshared) throw()
# 942
 __attribute((__nonnull__(1, 2))); 
# 945
extern int pthread_rwlockattr_setpshared(pthread_rwlockattr_t * __attr, int __pshared) throw()
# 947
 __attribute((__nonnull__(1))); 
# 950
extern int pthread_rwlockattr_getkind_np(const pthread_rwlockattr_t *__restrict__ __attr, int *__restrict__ __pref) throw()
# 953
 __attribute((__nonnull__(1, 2))); 
# 956
extern int pthread_rwlockattr_setkind_np(pthread_rwlockattr_t * __attr, int __pref) throw()
# 957
 __attribute((__nonnull__(1))); 
# 965
extern int pthread_cond_init(pthread_cond_t *__restrict__ __cond, const pthread_condattr_t *__restrict__ __cond_attr) throw()
# 967
 __attribute((__nonnull__(1))); 
# 970
extern int pthread_cond_destroy(pthread_cond_t * __cond) throw()
# 971
 __attribute((__nonnull__(1))); 
# 974
extern int pthread_cond_signal(pthread_cond_t * __cond) throw()
# 975
 __attribute((__nonnull__(1))); 
# 978
extern int pthread_cond_broadcast(pthread_cond_t * __cond) throw()
# 979
 __attribute((__nonnull__(1))); 
# 986
extern int pthread_cond_wait(pthread_cond_t *__restrict__ __cond, pthread_mutex_t *__restrict__ __mutex)
# 988
 __attribute((__nonnull__(1, 2))); 
# 997 "/usr/include/pthread.h" 3
extern int pthread_cond_timedwait(pthread_cond_t *__restrict__ __cond, pthread_mutex_t *__restrict__ __mutex, const timespec *__restrict__ __abstime)
# 1000
 __attribute((__nonnull__(1, 2, 3))); 
# 1010 "/usr/include/pthread.h" 3
extern int pthread_cond_clockwait(pthread_cond_t *__restrict__ __cond, pthread_mutex_t *__restrict__ __mutex, __clockid_t __clock_id, const timespec *__restrict__ __abstime)
# 1014
 __attribute((__nonnull__(1, 2, 4))); 
# 1020
extern int pthread_condattr_init(pthread_condattr_t * __attr) throw()
# 1021
 __attribute((__nonnull__(1))); 
# 1024
extern int pthread_condattr_destroy(pthread_condattr_t * __attr) throw()
# 1025
 __attribute((__nonnull__(1))); 
# 1028
extern int pthread_condattr_getpshared(const pthread_condattr_t *__restrict__ __attr, int *__restrict__ __pshared) throw()
# 1031
 __attribute((__nonnull__(1, 2))); 
# 1034
extern int pthread_condattr_setpshared(pthread_condattr_t * __attr, int __pshared) throw()
# 1035
 __attribute((__nonnull__(1))); 
# 1039
extern int pthread_condattr_getclock(const pthread_condattr_t *__restrict__ __attr, __clockid_t *__restrict__ __clock_id) throw()
# 1042
 __attribute((__nonnull__(1, 2))); 
# 1045
extern int pthread_condattr_setclock(pthread_condattr_t * __attr, __clockid_t __clock_id) throw()
# 1047
 __attribute((__nonnull__(1))); 
# 1056 "/usr/include/pthread.h" 3
extern int pthread_spin_init(pthread_spinlock_t * __lock, int __pshared) throw()
# 1057
 __attribute((__nonnull__(1))); 
# 1060
extern int pthread_spin_destroy(pthread_spinlock_t * __lock) throw()
# 1061
 __attribute((__nonnull__(1))); 
# 1064
extern int pthread_spin_lock(pthread_spinlock_t * __lock) throw()
# 1065
 __attribute((__nonnull__(1))); 
# 1068
extern int pthread_spin_trylock(pthread_spinlock_t * __lock) throw()
# 1069
 __attribute((__nonnull__(1))); 
# 1072
extern int pthread_spin_unlock(pthread_spinlock_t * __lock) throw()
# 1073
 __attribute((__nonnull__(1))); 
# 1080
extern int pthread_barrier_init(pthread_barrier_t *__restrict__ __barrier, const pthread_barrierattr_t *__restrict__ __attr, unsigned __count) throw()
# 1083
 __attribute((__nonnull__(1))); 
# 1086
extern int pthread_barrier_destroy(pthread_barrier_t * __barrier) throw()
# 1087
 __attribute((__nonnull__(1))); 
# 1090
extern int pthread_barrier_wait(pthread_barrier_t * __barrier) throw()
# 1091
 __attribute((__nonnull__(1))); 
# 1095
extern int pthread_barrierattr_init(pthread_barrierattr_t * __attr) throw()
# 1096
 __attribute((__nonnull__(1))); 
# 1099
extern int pthread_barrierattr_destroy(pthread_barrierattr_t * __attr) throw()
# 1100
 __attribute((__nonnull__(1))); 
# 1103
extern int pthread_barrierattr_getpshared(const pthread_barrierattr_t *__restrict__ __attr, int *__restrict__ __pshared) throw()
# 1106
 __attribute((__nonnull__(1, 2))); 
# 1109
extern int pthread_barrierattr_setpshared(pthread_barrierattr_t * __attr, int __pshared) throw()
# 1111
 __attribute((__nonnull__(1))); 
# 1123 "/usr/include/pthread.h" 3
extern int pthread_key_create(pthread_key_t * __key, void (* __destr_function)(void *)) throw()
# 1125
 __attribute((__nonnull__(1))); 
# 1128
extern int pthread_key_delete(pthread_key_t __key) throw(); 
# 1131
extern void *pthread_getspecific(pthread_key_t __key) throw(); 
# 1134
extern int pthread_setspecific(pthread_key_t __key, const void * __pointer) throw(); 
# 1140
extern int pthread_getcpuclockid(pthread_t __thread_id, __clockid_t * __clock_id) throw()
# 1142
 __attribute((__nonnull__(2))); 
# 1157 "/usr/include/pthread.h" 3
extern int pthread_atfork(void (* __prepare)(void), void (* __parent)(void), void (* __child)(void)) throw(); 
# 1164
__attribute((__gnu_inline__)) extern inline int 
# 1165
 __attribute((__leaf__)) pthread_equal(pthread_t __thread1, pthread_t __thread2) throw() 
# 1166
{ 
# 1167
return __thread1 == __thread2; 
# 1168
} 
# 1171
}
# 47 "/usr/include/aarch64-linux-gnu/c++/9/bits/gthr-default.h" 3
typedef pthread_t __gthread_t; 
# 48
typedef pthread_key_t __gthread_key_t; 
# 49
typedef pthread_once_t __gthread_once_t; 
# 50
typedef pthread_mutex_t __gthread_mutex_t; 
# 51
typedef pthread_mutex_t __gthread_recursive_mutex_t; 
# 52
typedef pthread_cond_t __gthread_cond_t; 
# 53
typedef timespec __gthread_time_t; 
# 102 "/usr/include/aarch64-linux-gnu/c++/9/bits/gthr-default.h" 3
static __typeof__(pthread_once) __gthrw_pthread_once __attribute((__weakref__("pthread_once"), __copy__(pthread_once ))); 
# 103
static __typeof__(pthread_getspecific) __gthrw_pthread_getspecific __attribute((__weakref__("pthread_getspecific"), __copy__(pthread_getspecific ))); 
# 104
static __typeof__(pthread_setspecific) __gthrw_pthread_setspecific __attribute((__weakref__("pthread_setspecific"), __copy__(pthread_setspecific ))); 
# 106
static __typeof__(pthread_create) __gthrw_pthread_create __attribute((__weakref__("pthread_create"), __copy__(pthread_create ))); 
# 107
static __typeof__(pthread_join) __gthrw_pthread_join __attribute((__weakref__("pthread_join"), __copy__(pthread_join ))); 
# 108
static __typeof__(pthread_equal) __gthrw_pthread_equal __attribute((__weakref__("pthread_equal"), __copy__(pthread_equal ))); 
# 109
static __typeof__(pthread_self) __gthrw_pthread_self __attribute((__weakref__("pthread_self"), __copy__(pthread_self ))); 
# 110
static __typeof__(pthread_detach) __gthrw_pthread_detach __attribute((__weakref__("pthread_detach"), __copy__(pthread_detach ))); 
# 112
static __typeof__(pthread_cancel) __gthrw_pthread_cancel __attribute((__weakref__("pthread_cancel"), __copy__(pthread_cancel ))); 
# 114
static __typeof__(sched_yield) __gthrw_sched_yield __attribute((__weakref__("sched_yield"), __copy__(sched_yield ))); 
# 116
static __typeof__(pthread_mutex_lock) __gthrw_pthread_mutex_lock __attribute((__weakref__("pthread_mutex_lock"), __copy__(pthread_mutex_lock ))); 
# 117
static __typeof__(pthread_mutex_trylock) __gthrw_pthread_mutex_trylock __attribute((__weakref__("pthread_mutex_trylock"), __copy__(pthread_mutex_trylock ))); 
# 119
static __typeof__(pthread_mutex_timedlock) __gthrw_pthread_mutex_timedlock __attribute((__weakref__("pthread_mutex_timedlock"), __copy__(pthread_mutex_timedlock ))); 
# 121
static __typeof__(pthread_mutex_unlock) __gthrw_pthread_mutex_unlock __attribute((__weakref__("pthread_mutex_unlock"), __copy__(pthread_mutex_unlock ))); 
# 122
static __typeof__(pthread_mutex_init) __gthrw_pthread_mutex_init __attribute((__weakref__("pthread_mutex_init"), __copy__(pthread_mutex_init ))); 
# 123
static __typeof__(pthread_mutex_destroy) __gthrw_pthread_mutex_destroy __attribute((__weakref__("pthread_mutex_destroy"), __copy__(pthread_mutex_destroy ))); 
# 125
static __typeof__(pthread_cond_init) __gthrw_pthread_cond_init __attribute((__weakref__("pthread_cond_init"), __copy__(pthread_cond_init ))); 
# 126
static __typeof__(pthread_cond_broadcast) __gthrw_pthread_cond_broadcast __attribute((__weakref__("pthread_cond_broadcast"), __copy__(pthread_cond_broadcast ))); 
# 127
static __typeof__(pthread_cond_signal) __gthrw_pthread_cond_signal __attribute((__weakref__("pthread_cond_signal"), __copy__(pthread_cond_signal ))); 
# 128
static __typeof__(pthread_cond_wait) __gthrw_pthread_cond_wait __attribute((__weakref__("pthread_cond_wait"), __copy__(pthread_cond_wait ))); 
# 129
static __typeof__(pthread_cond_timedwait) __gthrw_pthread_cond_timedwait __attribute((__weakref__("pthread_cond_timedwait"), __copy__(pthread_cond_timedwait ))); 
# 130
static __typeof__(pthread_cond_destroy) __gthrw_pthread_cond_destroy __attribute((__weakref__("pthread_cond_destroy"), __copy__(pthread_cond_destroy ))); 
# 132
static __typeof__(pthread_key_create) __gthrw_pthread_key_create __attribute((__weakref__("pthread_key_create"), __copy__(pthread_key_create ))); 
# 133
static __typeof__(pthread_key_delete) __gthrw_pthread_key_delete __attribute((__weakref__("pthread_key_delete"), __copy__(pthread_key_delete ))); 
# 134
static __typeof__(pthread_mutexattr_init) __gthrw_pthread_mutexattr_init __attribute((__weakref__("pthread_mutexattr_init"), __copy__(pthread_mutexattr_init ))); 
# 135
static __typeof__(pthread_mutexattr_settype) __gthrw_pthread_mutexattr_settype __attribute((__weakref__("pthread_mutexattr_settype"), __copy__(pthread_mutexattr_settype ))); 
# 136
static __typeof__(pthread_mutexattr_destroy) __gthrw_pthread_mutexattr_destroy __attribute((__weakref__("pthread_mutexattr_destroy"), __copy__(pthread_mutexattr_destroy ))); 
# 237 "/usr/include/aarch64-linux-gnu/c++/9/bits/gthr-default.h" 3
static __typeof__(pthread_key_create) __gthrw___pthread_key_create __attribute((__weakref__("__pthread_key_create"), __copy__(pthread_key_create ))); 
# 248 "/usr/include/aarch64-linux-gnu/c++/9/bits/gthr-default.h" 3
static inline int __gthread_active_p() 
# 249
{ 
# 250
static void *const __gthread_active_ptr = __extension__ ((void *)(&__gthrw___pthread_key_create)); 
# 252
return __gthread_active_ptr != (0); 
# 253
} 
# 660 "/usr/include/aarch64-linux-gnu/c++/9/bits/gthr-default.h" 3
static inline int __gthread_create(__gthread_t *__threadid, void *(*__func)(void *), void *
# 661
__args) 
# 662
{ 
# 663
return __gthrw_pthread_create(__threadid, __null, __func, __args); 
# 664
} 
# 667
static inline int __gthread_join(__gthread_t __threadid, void **__value_ptr) 
# 668
{ 
# 669
return __gthrw_pthread_join(__threadid, __value_ptr); 
# 670
} 
# 673
static inline int __gthread_detach(__gthread_t __threadid) 
# 674
{ 
# 675
return __gthrw_pthread_detach(__threadid); 
# 676
} 
# 679
static inline int __gthread_equal(__gthread_t __t1, __gthread_t __t2) 
# 680
{ 
# 681
return __gthrw_pthread_equal(__t1, __t2); 
# 682
} 
# 685
static inline __gthread_t __gthread_self() 
# 686
{ 
# 687
return __gthrw_pthread_self(); 
# 688
} 
# 691
static inline int __gthread_yield() 
# 692
{ 
# 693
return __gthrw_sched_yield(); 
# 694
} 
# 697
static inline int __gthread_once(__gthread_once_t *__once, void (*__func)(void)) 
# 698
{ 
# 699
if (__gthread_active_p()) { 
# 700
return __gthrw_pthread_once(__once, __func); } else { 
# 702
return -1; }  
# 703
} 
# 706
static inline int __gthread_key_create(__gthread_key_t *__key, void (*__dtor)(void *)) 
# 707
{ 
# 708
return __gthrw_pthread_key_create(__key, __dtor); 
# 709
} 
# 712
static inline int __gthread_key_delete(__gthread_key_t __key) 
# 713
{ 
# 714
return __gthrw_pthread_key_delete(__key); 
# 715
} 
# 718
static inline void *__gthread_getspecific(__gthread_key_t __key) 
# 719
{ 
# 720
return __gthrw_pthread_getspecific(__key); 
# 721
} 
# 724
static inline int __gthread_setspecific(__gthread_key_t __key, const void *__ptr) 
# 725
{ 
# 726
return __gthrw_pthread_setspecific(__key, __ptr); 
# 727
} 
# 730
static inline void __gthread_mutex_init_function(__gthread_mutex_t *__mutex) 
# 731
{ 
# 732
if (__gthread_active_p()) { 
# 733
__gthrw_pthread_mutex_init(__mutex, __null); }  
# 734
} 
# 737
static inline int __gthread_mutex_destroy(__gthread_mutex_t *__mutex) 
# 738
{ 
# 739
if (__gthread_active_p()) { 
# 740
return __gthrw_pthread_mutex_destroy(__mutex); } else { 
# 742
return 0; }  
# 743
} 
# 746
static inline int __gthread_mutex_lock(__gthread_mutex_t *__mutex) 
# 747
{ 
# 748
if (__gthread_active_p()) { 
# 749
return __gthrw_pthread_mutex_lock(__mutex); } else { 
# 751
return 0; }  
# 752
} 
# 755
static inline int __gthread_mutex_trylock(__gthread_mutex_t *__mutex) 
# 756
{ 
# 757
if (__gthread_active_p()) { 
# 758
return __gthrw_pthread_mutex_trylock(__mutex); } else { 
# 760
return 0; }  
# 761
} 
# 765
static inline int __gthread_mutex_timedlock(__gthread_mutex_t *__mutex, const __gthread_time_t *
# 766
__abs_timeout) 
# 767
{ 
# 768
if (__gthread_active_p()) { 
# 769
return __gthrw_pthread_mutex_timedlock(__mutex, __abs_timeout); } else { 
# 771
return 0; }  
# 772
} 
# 776
static inline int __gthread_mutex_unlock(__gthread_mutex_t *__mutex) 
# 777
{ 
# 778
if (__gthread_active_p()) { 
# 779
return __gthrw_pthread_mutex_unlock(__mutex); } else { 
# 781
return 0; }  
# 782
} 
# 809 "/usr/include/aarch64-linux-gnu/c++/9/bits/gthr-default.h" 3
static inline int __gthread_recursive_mutex_lock(__gthread_recursive_mutex_t *__mutex) 
# 810
{ 
# 811
return __gthread_mutex_lock(__mutex); 
# 812
} 
# 815
static inline int __gthread_recursive_mutex_trylock(__gthread_recursive_mutex_t *__mutex) 
# 816
{ 
# 817
return __gthread_mutex_trylock(__mutex); 
# 818
} 
# 822
static inline int __gthread_recursive_mutex_timedlock(__gthread_recursive_mutex_t *__mutex, const __gthread_time_t *
# 823
__abs_timeout) 
# 824
{ 
# 825
return __gthread_mutex_timedlock(__mutex, __abs_timeout); 
# 826
} 
# 830
static inline int __gthread_recursive_mutex_unlock(__gthread_recursive_mutex_t *__mutex) 
# 831
{ 
# 832
return __gthread_mutex_unlock(__mutex); 
# 833
} 
# 836
static inline int __gthread_recursive_mutex_destroy(__gthread_recursive_mutex_t *__mutex) 
# 837
{ 
# 838
return __gthread_mutex_destroy(__mutex); 
# 839
} 
# 851 "/usr/include/aarch64-linux-gnu/c++/9/bits/gthr-default.h" 3
static inline int __gthread_cond_broadcast(__gthread_cond_t *__cond) 
# 852
{ 
# 853
return __gthrw_pthread_cond_broadcast(__cond); 
# 854
} 
# 857
static inline int __gthread_cond_signal(__gthread_cond_t *__cond) 
# 858
{ 
# 859
return __gthrw_pthread_cond_signal(__cond); 
# 860
} 
# 863
static inline int __gthread_cond_wait(__gthread_cond_t *__cond, __gthread_mutex_t *__mutex) 
# 864
{ 
# 865
return __gthrw_pthread_cond_wait(__cond, __mutex); 
# 866
} 
# 869
static inline int __gthread_cond_timedwait(__gthread_cond_t *__cond, __gthread_mutex_t *__mutex, const __gthread_time_t *
# 870
__abs_timeout) 
# 871
{ 
# 872
return __gthrw_pthread_cond_timedwait(__cond, __mutex, __abs_timeout); 
# 873
} 
# 876
static inline int __gthread_cond_wait_recursive(__gthread_cond_t *__cond, __gthread_recursive_mutex_t *
# 877
__mutex) 
# 878
{ 
# 879
return __gthread_cond_wait(__cond, __mutex); 
# 880
} 
# 883
static inline int __gthread_cond_destroy(__gthread_cond_t *__cond) 
# 884
{ 
# 885
return __gthrw_pthread_cond_destroy(__cond); 
# 886
} 
# 151 "/usr/include/aarch64-linux-gnu/c++/9/bits/gthr.h" 3
#pragma GCC visibility pop
# 32 "/usr/include/aarch64-linux-gnu/c++/9/bits/atomic_word.h" 3
typedef int _Atomic_word; 
# 38 "/usr/include/c++/9/ext/atomicity.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 48
static inline _Atomic_word __exchange_and_add(volatile _Atomic_word *__mem, int __val) 
# 49
{ return __atomic_fetch_add(__mem, __val, 4); } 
# 52
static inline void __atomic_add(volatile _Atomic_word *__mem, int __val) 
# 53
{ __atomic_fetch_add(__mem, __val, 4); } 
# 65 "/usr/include/c++/9/ext/atomicity.h" 3
static inline _Atomic_word __exchange_and_add_single(_Atomic_word *__mem, int __val) 
# 66
{ 
# 67
_Atomic_word __result = *__mem; 
# 68
(*__mem) += __val; 
# 69
return __result; 
# 70
} 
# 73
static inline void __atomic_add_single(_Atomic_word *__mem, int __val) 
# 74
{ (*__mem) += __val; } 
# 77
__attribute((__unused__)) static inline _Atomic_word 
# 78
__exchange_and_add_dispatch(_Atomic_word *__mem, int __val) 
# 79
{ 
# 81
if (__gthread_active_p()) { 
# 82
return __exchange_and_add(__mem, __val); } else { 
# 84
return __exchange_and_add_single(__mem, __val); }  
# 88
} 
# 91
__attribute((__unused__)) static inline void 
# 92
__atomic_add_dispatch(_Atomic_word *__mem, int __val) 
# 93
{ 
# 95
if (__gthread_active_p()) { 
# 96
__atomic_add(__mem, __val); } else { 
# 98
__atomic_add_single(__mem, __val); }  
# 102
} 
# 105
}
# 41 "/usr/include/c++/9/bits/alloc_traits.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 45
struct __allocator_traits_base { 
# 47
template< class _Tp, class _Up, class  = void> 
# 48
struct __rebind : public __replace_first_arg< _Tp, _Up>  { }; 
# 50
template< class _Tp, class _Up> 
# 51
struct __rebind< _Tp, _Up, __void_t< typename _Tp::template rebind< _Up> ::other> >  { 
# 53
using type = typename _Tp::template rebind< _Up> ::other; }; 
# 57
protected: 
# 56
template< class _Tp> using __pointer = typename _Tp::pointer; 
# 58
template< class _Tp> using __c_pointer = typename _Tp::const_pointer; 
# 60
template< class _Tp> using __v_pointer = typename _Tp::void_pointer; 
# 62
template< class _Tp> using __cv_pointer = typename _Tp::const_void_pointer; 
# 64
template< class _Tp> using __pocca = typename _Tp::propagate_on_container_copy_assignment; 
# 66
template< class _Tp> using __pocma = typename _Tp::propagate_on_container_move_assignment; 
# 68
template< class _Tp> using __pocs = typename _Tp::propagate_on_container_swap; 
# 70
template< class _Tp> using __equal = typename _Tp::is_always_equal; 
# 72
}; 
# 74
template< class _Alloc, class _Up> using __alloc_rebind = typename __allocator_traits_base::__rebind< _Alloc, _Up> ::type; 
# 82
template< class _Alloc> 
# 83
struct allocator_traits : public __allocator_traits_base { 
# 86
typedef _Alloc allocator_type; 
# 88
typedef typename _Alloc::value_type value_type; 
# 95
using pointer = __detected_or_t< value_type *, __pointer, _Alloc> ; 
# 100
private: 
# 99
template< template< class >  class _Func, class _Tp, class  = void> 
# 100
struct _Ptr { 
# 102
using type = typename pointer_traits< pointer> ::template rebind< _Tp> ; 
# 103
}; 
# 105
template< template< class >  class _Func, class _Tp> 
# 106
struct _Ptr< _Func, _Tp, __void_t< _Func< _Alloc> > >  { 
# 108
using type = _Func< _Alloc> ; 
# 109
}; 
# 112
template< class _A2, class _PtrT, class  = void> 
# 113
struct _Diff { 
# 114
using type = typename pointer_traits< _PtrT> ::difference_type; }; 
# 116
template< class _A2, class _PtrT> 
# 117
struct _Diff< _A2, _PtrT, __void_t< typename _A2::difference_type> >  { 
# 118
using type = typename _A2::difference_type; }; 
# 121
template< class _A2, class _DiffT, class  = void> 
# 122
struct _Size : public make_unsigned< _DiffT>  { }; 
# 124
template< class _A2, class _DiffT> 
# 125
struct _Size< _A2, _DiffT, __void_t< typename _A2::size_type> >  { 
# 126
using type = typename _A2::size_type; }; 
# 135
public: using const_pointer = typename _Ptr< __c_pointer, const value_type> ::type; 
# 143
using void_pointer = typename _Ptr< __v_pointer, void> ::type; 
# 151
using const_void_pointer = typename _Ptr< __cv_pointer, const void> ::type; 
# 159
using difference_type = typename _Diff< _Alloc, pointer> ::type; 
# 167
using size_type = typename _Size< _Alloc, difference_type> ::type; 
# 175
using propagate_on_container_copy_assignment = __detected_or_t< false_type, __pocca, _Alloc> ; 
# 184
using propagate_on_container_move_assignment = __detected_or_t< false_type, __pocma, _Alloc> ; 
# 193
using propagate_on_container_swap = __detected_or_t< false_type, __pocs, _Alloc> ; 
# 202
using is_always_equal = __detected_or_t< typename is_empty< _Alloc> ::type, __equal, _Alloc> ; 
# 205
template< class _Tp> using rebind_alloc = __alloc_rebind< _Alloc, _Tp> ; 
# 207
template< class _Tp> using rebind_traits = allocator_traits< rebind_alloc< _Tp> > ; 
# 213
private: 
# 211
template< class _Alloc2> static auto 
# 213
_S_allocate(_Alloc2 &__a, size_type __n, const_void_pointer __hint, int)->__decltype((__a.allocate(__n, __hint))) 
# 215
{ return __a.allocate(__n, __hint); } 
# 217
template< class _Alloc2> static pointer 
# 219
_S_allocate(_Alloc2 &__a, size_type __n, const_void_pointer, ...) 
# 220
{ return __a.allocate(__n); } 
# 222
template< class _Tp, class ..._Args> 
# 223
struct __construct_helper { 
# 225
template< class _Alloc2, class 
# 226
 = __decltype((std::declval< _Alloc2 *> ()->construct(std::declval< _Tp *> (), std::declval< _Args> ()...)))> static true_type 
# 225
__test(int); 
# 230
template< class > static false_type __test(...); 
# 233
using type = __decltype((__test< _Alloc> (0))); 
# 234
}; 
# 236
template< class _Tp, class ..._Args> using __has_construct = typename __construct_helper< _Tp, _Args...> ::type; 
# 240
template< class _Tp, class ..._Args> static _Require< __has_construct< _Tp, _Args...> >  
# 242
_S_construct(_Alloc &__a, _Tp *__p, _Args &&...__args) noexcept(noexcept(__a.construct(__p, std::forward< _Args> (__args)...))) 
# 244
{ __a.construct(__p, std::forward< _Args> (__args)...); } 
# 246
template< class _Tp, class ..._Args> static _Require< __and_< __not_< __has_construct< _Tp, _Args...> > , is_constructible< _Tp, _Args...> > >  
# 250
_S_construct(_Alloc &, _Tp *__p, _Args &&...__args) noexcept(std::is_nothrow_constructible< _Tp, _Args...> ::value) 
# 252
{ ::new ((void *)__p) _Tp(std::forward< _Args> (__args)...); } 
# 254
template< class _Alloc2, class _Tp> static auto 
# 256
_S_destroy(_Alloc2 &__a, _Tp *__p, int) noexcept(noexcept(__a.destroy(__p)))->__decltype((__a.destroy(__p))) 
# 259
{ __a.destroy(__p); } 
# 261
template< class _Alloc2, class _Tp> static void 
# 263
_S_destroy(_Alloc2 &, _Tp *__p, ...) noexcept(std::is_nothrow_destructible< _Tp> ::value) 
# 265
{ __p->~_Tp(); } 
# 267
template< class _Alloc2> static auto 
# 269
_S_max_size(_Alloc2 &__a, int)->__decltype((__a.max_size())) 
# 271
{ return __a.max_size(); } 
# 273
template< class _Alloc2> static size_type 
# 275
_S_max_size(_Alloc2 &, ...) 
# 276
{ 
# 279
return __gnu_cxx::__numeric_traits< size_type> ::__max / sizeof(value_type); 
# 281
} 
# 283
template< class _Alloc2> static auto 
# 285
_S_select(_Alloc2 &__a, int)->__decltype((__a.select_on_container_copy_construction())) 
# 287
{ return __a.select_on_container_copy_construction(); } 
# 289
template< class _Alloc2> static _Alloc2 
# 291
_S_select(_Alloc2 &__a, ...) 
# 292
{ return __a; } 
# 304 "/usr/include/c++/9/bits/alloc_traits.h" 3
public: static pointer allocate(_Alloc &__a, size_type __n) 
# 305
{ return __a.allocate(__n); } 
# 319 "/usr/include/c++/9/bits/alloc_traits.h" 3
static pointer allocate(_Alloc &__a, size_type __n, const_void_pointer __hint) 
# 320
{ return _S_allocate(__a, __n, __hint, 0); } 
# 331 "/usr/include/c++/9/bits/alloc_traits.h" 3
static void deallocate(_Alloc &__a, pointer __p, size_type __n) 
# 332
{ __a.deallocate(__p, __n); } 
# 345 "/usr/include/c++/9/bits/alloc_traits.h" 3
template< class _Tp, class ..._Args> static auto 
# 346
construct(_Alloc &__a, _Tp *__p, _Args &&...__args) noexcept(noexcept(_S_construct(__a, __p, std::forward< _Args> (__args)...)))->__decltype((_S_construct(__a, __p, std::forward< _Args> (__args)...))) 
# 350
{ _S_construct(__a, __p, std::forward< _Args> (__args)...); } 
# 360 "/usr/include/c++/9/bits/alloc_traits.h" 3
template< class _Tp> static void 
# 361
destroy(_Alloc &__a, _Tp *__p) noexcept(noexcept(_S_destroy(__a, __p, 0))) 
# 363
{ _S_destroy(__a, __p, 0); } 
# 373 "/usr/include/c++/9/bits/alloc_traits.h" 3
static size_type max_size(const _Alloc &__a) noexcept 
# 374
{ return _S_max_size(__a, 0); } 
# 385 "/usr/include/c++/9/bits/alloc_traits.h" 3
static _Alloc select_on_container_copy_construction(const _Alloc &__rhs) 
# 386
{ return _S_select(__rhs, 0); } 
# 387
}; 
# 390
template< class _Tp> 
# 391
struct allocator_traits< allocator< _Tp> >  { 
# 394
using allocator_type = allocator< _Tp> ; 
# 396
using value_type = _Tp; 
# 399
using pointer = _Tp *; 
# 402
using const_pointer = const _Tp *; 
# 405
using void_pointer = void *; 
# 408
using const_void_pointer = const void *; 
# 411
using difference_type = ptrdiff_t; 
# 414
using size_type = size_t; 
# 417
using propagate_on_container_copy_assignment = false_type; 
# 420
using propagate_on_container_move_assignment = true_type; 
# 423
using propagate_on_container_swap = false_type; 
# 426
using is_always_equal = true_type; 
# 428
template< class _Up> using rebind_alloc = allocator< _Up> ; 
# 431
template< class _Up> using rebind_traits = std::allocator_traits< allocator< _Up> > ; 
# 442 "/usr/include/c++/9/bits/alloc_traits.h" 3
static pointer allocate(allocator_type &__a, size_type __n) 
# 443
{ return __a.allocate(__n); } 
# 456 "/usr/include/c++/9/bits/alloc_traits.h" 3
static pointer allocate(allocator_type &__a, size_type __n, const_void_pointer __hint) 
# 457
{ return __a.allocate(__n, __hint); } 
# 468 "/usr/include/c++/9/bits/alloc_traits.h" 3
static void deallocate(allocator_type &__a, pointer __p, size_type __n) 
# 469
{ __a.deallocate(__p, __n); } 
# 479 "/usr/include/c++/9/bits/alloc_traits.h" 3
template< class _Up, class ..._Args> static void 
# 481
construct(allocator_type &__a, _Up *__p, _Args &&...__args) noexcept(std::is_nothrow_constructible< _Up, _Args...> ::value) 
# 483
{ __a.construct(__p, std::forward< _Args> (__args)...); } 
# 492 "/usr/include/c++/9/bits/alloc_traits.h" 3
template< class _Up> static void 
# 494
destroy(allocator_type &__a, _Up *__p) noexcept(noexcept(__a.destroy(__p))) 
# 496
{ __a.destroy(__p); } 
# 504
static size_type max_size(const allocator_type &__a) noexcept 
# 505
{ return __a.max_size(); } 
# 513
static allocator_type select_on_container_copy_construction(const allocator_type &__rhs) 
# 514
{ return __rhs; } 
# 515
}; 
# 518
template< class _Alloc> inline void 
# 520
__do_alloc_on_copy(_Alloc &__one, const _Alloc &__two, true_type) 
# 521
{ __one = __two; } 
# 523
template< class _Alloc> inline void 
# 525
__do_alloc_on_copy(_Alloc &, const _Alloc &, false_type) 
# 526
{ } 
# 528
template< class _Alloc> inline void 
# 529
__alloc_on_copy(_Alloc &__one, const _Alloc &__two) 
# 530
{ 
# 531
typedef allocator_traits< _Alloc>  __traits; 
# 532
typedef typename allocator_traits< _Alloc> ::propagate_on_container_copy_assignment __pocca; 
# 533
__do_alloc_on_copy(__one, __two, __pocca()); 
# 534
} 
# 536
template< class _Alloc> inline _Alloc 
# 537
__alloc_on_copy(const _Alloc &__a) 
# 538
{ 
# 539
typedef allocator_traits< _Alloc>  __traits; 
# 540
return __traits::select_on_container_copy_construction(__a); 
# 541
} 
# 543
template< class _Alloc> inline void 
# 544
__do_alloc_on_move(_Alloc &__one, _Alloc &__two, true_type) 
# 545
{ __one = std::move(__two); } 
# 547
template< class _Alloc> inline void 
# 548
__do_alloc_on_move(_Alloc &, _Alloc &, false_type) 
# 549
{ } 
# 551
template< class _Alloc> inline void 
# 552
__alloc_on_move(_Alloc &__one, _Alloc &__two) 
# 553
{ 
# 554
typedef allocator_traits< _Alloc>  __traits; 
# 555
typedef typename allocator_traits< _Alloc> ::propagate_on_container_move_assignment __pocma; 
# 556
__do_alloc_on_move(__one, __two, __pocma()); 
# 557
} 
# 559
template< class _Alloc> inline void 
# 560
__do_alloc_on_swap(_Alloc &__one, _Alloc &__two, true_type) 
# 561
{ 
# 562
using std::swap;
# 563
swap(__one, __two); 
# 564
} 
# 566
template< class _Alloc> inline void 
# 567
__do_alloc_on_swap(_Alloc &, _Alloc &, false_type) 
# 568
{ } 
# 570
template< class _Alloc> inline void 
# 571
__alloc_on_swap(_Alloc &__one, _Alloc &__two) 
# 572
{ 
# 573
typedef allocator_traits< _Alloc>  __traits; 
# 574
typedef typename allocator_traits< _Alloc> ::propagate_on_container_swap __pocs; 
# 575
__do_alloc_on_swap(__one, __two, __pocs()); 
# 576
} 
# 578
template< class _Alloc, class _Tp, class 
# 579
_ValueT = __remove_cvref_t< typename _Alloc::value_type> , class 
# 580
 = void> 
# 581
struct __is_alloc_insertable_impl : public false_type { 
# 583
}; 
# 585
template< class _Alloc, class _Tp, class _ValueT> 
# 586
struct __is_alloc_insertable_impl< _Alloc, _Tp, _ValueT, __void_t< __decltype((allocator_traits< _Alloc> ::construct(std::declval< _Alloc &> (), std::declval< _ValueT *> (), std::declval< _Tp> ())))> >  : public true_type { 
# 591
}; 
# 596
template< class _Alloc> 
# 597
struct __is_copy_insertable : public __is_alloc_insertable_impl< _Alloc, const typename _Alloc::value_type &> ::type { 
# 600
}; 
# 603
template< class _Tp> 
# 604
struct __is_copy_insertable< allocator< _Tp> >  : public is_copy_constructible< _Tp>  { 
# 606
}; 
# 611
template< class _Alloc> 
# 612
struct __is_move_insertable : public __is_alloc_insertable_impl< _Alloc, typename _Alloc::value_type> ::type { 
# 614
}; 
# 617
template< class _Tp> 
# 618
struct __is_move_insertable< allocator< _Tp> >  : public is_move_constructible< _Tp>  { 
# 620
}; 
# 623
template< class _Alloc, class  = void> 
# 624
struct __is_allocator : public false_type { }; 
# 626
template< class _Alloc> 
# 627
struct __is_allocator< _Alloc, __void_t< typename _Alloc::value_type, __decltype((std::declval< _Alloc &> ().allocate((unsigned long)0UL)))> >  : public true_type { 
# 630
}; 
# 632
template< class _Alloc> using _RequireAllocator = typename enable_if< __is_allocator< _Alloc> ::value, _Alloc> ::type; 
# 636
template< class _Alloc> using _RequireNotAllocator = typename enable_if< !__is_allocator< _Alloc> ::value, _Alloc> ::type; 
# 641
}
# 41 "/usr/include/c++/9/ext/alloc_traits.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 49
template< class _Alloc, class  = typename _Alloc::value_type> 
# 50
struct __alloc_traits : public std::allocator_traits< _Alloc>  { 
# 55
typedef _Alloc allocator_type; 
# 57
typedef std::allocator_traits< _Alloc>  _Base_type; 
# 58
typedef typename std::allocator_traits< _Alloc> ::value_type value_type; 
# 59
typedef typename std::allocator_traits< _Alloc> ::pointer pointer; 
# 60
typedef typename std::allocator_traits< _Alloc> ::const_pointer const_pointer; 
# 61
typedef typename std::allocator_traits< _Alloc> ::size_type size_type; 
# 62
typedef typename std::allocator_traits< _Alloc> ::difference_type difference_type; 
# 64
typedef value_type &reference; 
# 65
typedef const value_type &const_reference; 
# 66
using std::allocator_traits< _Alloc> ::allocate;
# 67
using std::allocator_traits< _Alloc> ::deallocate;
# 68
using std::allocator_traits< _Alloc> ::construct;
# 69
using std::allocator_traits< _Alloc> ::destroy;
# 70
using std::allocator_traits< _Alloc> ::max_size;
# 74
private: 
# 73
template< class _Ptr> using __is_custom_pointer = std::__and_< std::is_same< pointer, _Ptr> , std::__not_< std::is_pointer< _Ptr> > > ; 
# 82
public: 
# 80
template< class _Ptr, class ..._Args> static typename std::enable_if< __is_custom_pointer< _Ptr> ::value> ::type 
# 82
construct(_Alloc &__a, _Ptr __p, _Args &&...__args) noexcept(noexcept(_Base_type::construct(__a, std::__to_address(__p), std::forward< _Args> (__args)...))) 
# 85
{ 
# 86
_Base_type::construct(__a, std::__to_address(__p), std::forward< _Args> (__args)...); 
# 88
} 
# 91
template< class _Ptr> static typename std::enable_if< __is_custom_pointer< _Ptr> ::value> ::type 
# 93
destroy(_Alloc &__a, _Ptr __p) noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p)))) 
# 95
{ _Base_type::destroy(__a, std::__to_address(__p)); } 
# 97
static _Alloc _S_select_on_copy(const _Alloc &__a) 
# 98
{ return _Base_type::select_on_container_copy_construction(__a); } 
# 100
static void _S_on_swap(_Alloc &__a, _Alloc &__b) 
# 101
{ std::__alloc_on_swap(__a, __b); } 
# 103
static constexpr bool _S_propagate_on_copy_assign() 
# 104
{ return _Base_type::propagate_on_container_copy_assignment::value; } 
# 106
static constexpr bool _S_propagate_on_move_assign() 
# 107
{ return _Base_type::propagate_on_container_move_assignment::value; } 
# 109
static constexpr bool _S_propagate_on_swap() 
# 110
{ return _Base_type::propagate_on_container_swap::value; } 
# 112
static constexpr bool _S_always_equal() 
# 113
{ return _Base_type::is_always_equal::value; } 
# 115
static constexpr bool _S_nothrow_move() 
# 116
{ return (_S_propagate_on_move_assign)() || (_S_always_equal)(); } 
# 118
template< class _Tp> 
# 119
struct rebind { 
# 120
typedef typename std::allocator_traits< _Alloc> ::template rebind_alloc< _Tp>  other; }; 
# 161 "/usr/include/c++/9/ext/alloc_traits.h" 3
}; 
# 164
}
# 51 "/usr/include/c++/9/bits/basic_string.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 61
inline namespace __cxx11 { 
# 80 "/usr/include/c++/9/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> 
# 81
class basic_string { 
# 84
typedef typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _CharT> ::other _Char_alloc_type; 
# 85
typedef __gnu_cxx::__alloc_traits< _Char_alloc_type>  _Alloc_traits; 
# 89
public: typedef _Traits traits_type; 
# 90
typedef typename _Traits::char_type value_type; 
# 91
typedef _Char_alloc_type allocator_type; 
# 92
typedef typename __gnu_cxx::__alloc_traits< _Char_alloc_type> ::size_type size_type; 
# 93
typedef typename __gnu_cxx::__alloc_traits< _Char_alloc_type> ::difference_type difference_type; 
# 94
typedef typename __gnu_cxx::__alloc_traits< _Char_alloc_type> ::reference reference; 
# 95
typedef typename __gnu_cxx::__alloc_traits< _Char_alloc_type> ::const_reference const_reference; 
# 96
typedef typename __gnu_cxx::__alloc_traits< _Char_alloc_type> ::pointer pointer; 
# 97
typedef typename __gnu_cxx::__alloc_traits< _Char_alloc_type> ::const_pointer const_pointer; 
# 98
typedef __gnu_cxx::__normal_iterator< pointer, basic_string>  iterator; 
# 100
typedef __gnu_cxx::__normal_iterator< const_pointer, basic_string>  const_iterator; 
# 101
typedef std::reverse_iterator< const_iterator>  const_reverse_iterator; 
# 102
typedef std::reverse_iterator< iterator>  reverse_iterator; 
# 105
static const size_type npos = (static_cast< size_type>(-1)); 
# 112
protected: typedef const_iterator __const_iterator; 
# 154 "/usr/include/c++/9/bits/basic_string.h" 3
private: struct _Alloc_hider : public allocator_type { 
# 160
_Alloc_hider(typename basic_string< _CharT, _Traits, _Alloc> ::pointer __dat, const _Alloc &__a) : basic_string< _CharT, _Traits, _Alloc> ::allocator_type(__a), _M_p(__dat) 
# 161
{ } 
# 163
_Alloc_hider(typename basic_string< _CharT, _Traits, _Alloc> ::pointer __dat, _Alloc &&__a = _Alloc()) : basic_string< _CharT, _Traits, _Alloc> ::allocator_type(std::move(__a)), _M_p(__dat) 
# 164
{ } 
# 167
typename basic_string< _CharT, _Traits, _Alloc> ::pointer _M_p; 
# 168
}; 
# 170
_Alloc_hider _M_dataplus; 
# 171
size_type _M_string_length; 
# 173
enum { _S_local_capacity = (15) / sizeof(_CharT)}; 
# 176
union { 
# 177
_CharT _M_local_buf[_S_local_capacity + 1]; 
# 178
size_type _M_allocated_capacity; 
# 179
}; 
# 182
void _M_data(pointer __p) 
# 183
{ ((_M_dataplus)._M_p) = __p; } 
# 186
void _M_length(size_type __length) 
# 187
{ (_M_string_length) = __length; } 
# 190
pointer _M_data() const 
# 191
{ return (_M_dataplus)._M_p; } 
# 194
pointer _M_local_data() 
# 195
{ 
# 197
return std::pointer_traits< pointer> ::pointer_to(*(_M_local_buf)); 
# 201
} 
# 204
const_pointer _M_local_data() const 
# 205
{ 
# 207
return std::pointer_traits< const_pointer> ::pointer_to(*(_M_local_buf)); 
# 211
} 
# 214
void _M_capacity(size_type __capacity) 
# 215
{ (_M_allocated_capacity) = __capacity; } 
# 218
void _M_set_length(size_type __n) 
# 219
{ 
# 220
_M_length(__n); 
# 221
traits_type::assign(_M_data()[__n], _CharT()); 
# 222
} 
# 225
bool _M_is_local() const 
# 226
{ return _M_data() == _M_local_data(); } 
# 230
pointer _M_create(size_type &, size_type); 
# 233
void _M_dispose() 
# 234
{ 
# 235
if (!_M_is_local()) { 
# 236
_M_destroy(_M_allocated_capacity); }  
# 237
} 
# 240
void _M_destroy(size_type __size) throw() 
# 241
{ _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); } 
# 245
template< class _InIterator> void 
# 247
_M_construct_aux(_InIterator __beg, _InIterator __end, __false_type) 
# 249
{ 
# 250
typedef typename iterator_traits< _InIterator> ::iterator_category _Tag; 
# 251
_M_construct(__beg, __end, _Tag()); 
# 252
} 
# 256
template< class _Integer> void 
# 258
_M_construct_aux(_Integer __beg, _Integer __end, __true_type) 
# 259
{ _M_construct_aux_2(static_cast< size_type>(__beg), __end); } 
# 262
void _M_construct_aux_2(size_type __req, _CharT __c) 
# 263
{ _M_construct(__req, __c); } 
# 265
template< class _InIterator> void 
# 267
_M_construct(_InIterator __beg, _InIterator __end) 
# 268
{ 
# 269
typedef typename __is_integer< _InIterator> ::__type _Integral; 
# 270
_M_construct_aux(__beg, __end, _Integral()); 
# 271
} 
# 274
template< class _InIterator> void _M_construct(_InIterator __beg, _InIterator __end, input_iterator_tag); 
# 281
template< class _FwdIterator> void _M_construct(_FwdIterator __beg, _FwdIterator __end, forward_iterator_tag); 
# 287
void _M_construct(size_type __req, _CharT __c); 
# 290
allocator_type &_M_get_allocator() 
# 291
{ return _M_dataplus; } 
# 294
const allocator_type &_M_get_allocator() const 
# 295
{ return _M_dataplus; } 
# 314 "/usr/include/c++/9/bits/basic_string.h" 3
size_type _M_check(size_type __pos, const char *__s) const 
# 315
{ 
# 316
if (__pos > size()) { 
# 317
__throw_out_of_range_fmt("%s: __pos (which is %zu) > this->size() (which is %zu)", __s, __pos, size()); }  
# 320
return __pos; 
# 321
} 
# 324
void _M_check_length(size_type __n1, size_type __n2, const char *__s) const 
# 325
{ 
# 326
if ((max_size() - (size() - __n1)) < __n2) { 
# 327
__throw_length_error(__s); }  
# 328
} 
# 333
size_type _M_limit(size_type __pos, size_type __off) const noexcept 
# 334
{ 
# 335
const bool __testoff = __off < (size() - __pos); 
# 336
return __testoff ? __off : (size() - __pos); 
# 337
} 
# 341
bool _M_disjunct(const _CharT *__s) const noexcept 
# 342
{ 
# 343
return (less< const _CharT *> ()(__s, _M_data()) || less< const _CharT *> ()(_M_data() + size(), __s)); 
# 345
} 
# 350
static void _S_copy(_CharT *__d, const _CharT *__s, size_type __n) 
# 351
{ 
# 352
if (__n == 1) { 
# 353
traits_type::assign(*__d, *__s); } else { 
# 355
traits_type::copy(__d, __s, __n); }  
# 356
} 
# 359
static void _S_move(_CharT *__d, const _CharT *__s, size_type __n) 
# 360
{ 
# 361
if (__n == 1) { 
# 362
traits_type::assign(*__d, *__s); } else { 
# 364
traits_type::move(__d, __s, __n); }  
# 365
} 
# 368
static void _S_assign(_CharT *__d, size_type __n, _CharT __c) 
# 369
{ 
# 370
if (__n == 1) { 
# 371
traits_type::assign(*__d, __c); } else { 
# 373
traits_type::assign(__d, __n, __c); }  
# 374
} 
# 378
template< class _Iterator> static void 
# 380
_S_copy_chars(_CharT *__p, _Iterator __k1, _Iterator __k2) 
# 381
{ 
# 382
for (; __k1 != __k2; (++__k1), ((void)(++__p))) { 
# 383
traits_type::assign(*__p, *__k1); }  
# 384
} 
# 387
static void _S_copy_chars(_CharT *__p, iterator __k1, iterator __k2) noexcept 
# 388
{ _S_copy_chars(__p, __k1.base(), __k2.base()); } 
# 391
static void _S_copy_chars(_CharT *__p, const_iterator __k1, const_iterator __k2) noexcept 
# 393
{ _S_copy_chars(__p, __k1.base(), __k2.base()); } 
# 396
static void _S_copy_chars(_CharT *__p, _CharT *__k1, _CharT *__k2) noexcept 
# 397
{ (_S_copy)(__p, __k1, __k2 - __k1); } 
# 400
static void _S_copy_chars(_CharT *__p, const _CharT *__k1, const _CharT *__k2) noexcept 
# 402
{ (_S_copy)(__p, __k1, __k2 - __k1); } 
# 405
static int _S_compare(size_type __n1, size_type __n2) noexcept 
# 406
{ 
# 407
const difference_type __d = (difference_type)(__n1 - __n2); 
# 409
if (__d > __gnu_cxx::__numeric_traits< int> ::__max) { 
# 410
return __gnu_cxx::__numeric_traits< int> ::__max; } else { 
# 411
if (__d < __gnu_cxx::__numeric_traits< int> ::__min) { 
# 412
return __gnu_cxx::__numeric_traits< int> ::__min; } else { 
# 414
return (int)__d; }  }  
# 415
} 
# 418
void _M_assign(const basic_string &); 
# 421
void _M_mutate(size_type __pos, size_type __len1, const _CharT * __s, size_type __len2); 
# 425
void _M_erase(size_type __pos, size_type __n); 
# 435
public: basic_string() noexcept(is_nothrow_default_constructible< _Alloc> ::value) : _M_dataplus(_M_local_data()) 
# 438
{ _M_set_length(0); } 
# 444
explicit basic_string(const _Alloc &__a) noexcept : _M_dataplus(_M_local_data(), __a) 
# 446
{ _M_set_length(0); } 
# 452
basic_string(const basic_string &__str) : _M_dataplus(_M_local_data(), _Alloc_traits::_S_select_on_copy(__str._M_get_allocator())) 
# 455
{ _M_construct(__str._M_data(), __str._M_data() + __str.length()); } 
# 465 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string(const basic_string &__str, size_type __pos, const _Alloc &
# 466
__a = _Alloc()) : _M_dataplus(_M_local_data(), __a) 
# 468
{ 
# 469
const _CharT *__start = __str._M_data() + __str._M_check(__pos, "basic_string::basic_string"); 
# 471
_M_construct(__start, __start + __str._M_limit(__pos, npos)); 
# 472
} 
# 480
basic_string(const basic_string &__str, size_type __pos, size_type 
# 481
__n) : _M_dataplus(_M_local_data()) 
# 483
{ 
# 484
const _CharT *__start = __str._M_data() + __str._M_check(__pos, "basic_string::basic_string"); 
# 486
_M_construct(__start, __start + __str._M_limit(__pos, __n)); 
# 487
} 
# 496 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string(const basic_string &__str, size_type __pos, size_type 
# 497
__n, const _Alloc &__a) : _M_dataplus(_M_local_data(), __a) 
# 499
{ 
# 500
const _CharT *__start = __str._M_data() + __str._M_check(__pos, "string::string"); 
# 502
_M_construct(__start, __start + __str._M_limit(__pos, __n)); 
# 503
} 
# 514 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string(const _CharT *__s, size_type __n, const _Alloc &
# 515
__a = _Alloc()) : _M_dataplus(_M_local_data(), __a) 
# 517
{ _M_construct(__s, __s + __n); } 
# 529 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string(const _CharT *__s, const _Alloc &__a = _Alloc()) : _M_dataplus(_M_local_data(), __a) 
# 531
{ _M_construct(__s, (__s) ? __s + traits_type::length(__s) : (__s + npos)); } 
# 544 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string(size_type __n, _CharT __c, const _Alloc &__a = _Alloc()) : _M_dataplus(_M_local_data(), __a) 
# 546
{ _M_construct(__n, __c); } 
# 556 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string(basic_string &&__str) noexcept : _M_dataplus(_M_local_data(), std::move(__str._M_get_allocator())) 
# 558
{ 
# 559
if (__str._M_is_local()) 
# 560
{ 
# 561
traits_type::copy(_M_local_buf, __str._M_local_buf, _S_local_capacity + 1); 
# 563
} else 
# 565
{ 
# 566
_M_data(__str._M_data()); 
# 567
_M_capacity(__str._M_allocated_capacity); 
# 568
}  
# 573
_M_length(__str.length()); 
# 574
__str._M_data(__str._M_local_data()); 
# 575
__str._M_set_length(0); 
# 576
} 
# 583
basic_string(initializer_list< _CharT>  __l, const _Alloc &__a = _Alloc()) : _M_dataplus(_M_local_data(), __a) 
# 585
{ _M_construct(__l.begin(), __l.end()); } 
# 587
basic_string(const basic_string &__str, const _Alloc &__a) : _M_dataplus(_M_local_data(), __a) 
# 589
{ _M_construct(__str.begin(), __str.end()); } 
# 591
basic_string(basic_string &&__str, const _Alloc &__a) noexcept(_Alloc_traits::_S_always_equal()) : _M_dataplus(_M_local_data(), __a) 
# 594
{ 
# 595
if (__str._M_is_local()) 
# 596
{ 
# 597
traits_type::copy(_M_local_buf, __str._M_local_buf, _S_local_capacity + 1); 
# 599
_M_length(__str.length()); 
# 600
__str._M_set_length(0); 
# 601
} else { 
# 602
if (_Alloc_traits::_S_always_equal() || (__str.get_allocator() == __a)) 
# 604
{ 
# 605
_M_data(__str._M_data()); 
# 606
_M_length(__str.length()); 
# 607
_M_capacity(__str._M_allocated_capacity); 
# 608
__str._M_data(__str._M_local_buf); 
# 609
__str._M_set_length(0); 
# 610
} else { 
# 612
_M_construct(__str.begin(), __str.end()); }  }  
# 613
} 
# 624 "/usr/include/c++/9/bits/basic_string.h" 3
template< class _InputIterator, class 
# 625
 = _RequireInputIter< _InputIterator> > 
# 629
basic_string(_InputIterator __beg, _InputIterator __end, const _Alloc &
# 630
__a = _Alloc()) : _M_dataplus(_M_local_data(), __a) 
# 632
{ _M_construct(__beg, __end); } 
# 661 "/usr/include/c++/9/bits/basic_string.h" 3
~basic_string() 
# 662
{ _M_dispose(); } 
# 669
basic_string &operator=(const basic_string &__str) 
# 670
{ 
# 672
if (_Alloc_traits::_S_propagate_on_copy_assign()) 
# 673
{ 
# 674
if ((!_Alloc_traits::_S_always_equal()) && (!_M_is_local()) && (_M_get_allocator() != __str._M_get_allocator())) 
# 676
{ 
# 679
if (__str.size() <= _S_local_capacity) 
# 680
{ 
# 681
_M_destroy(_M_allocated_capacity); 
# 682
_M_data(_M_local_data()); 
# 683
_M_set_length(0); 
# 684
} else 
# 686
{ 
# 687
const auto __len = __str.size(); 
# 688
auto __alloc = __str._M_get_allocator(); 
# 690
auto __ptr = _Alloc_traits::allocate(__alloc, __len + 1); 
# 691
_M_destroy(_M_allocated_capacity); 
# 692
_M_data(__ptr); 
# 693
_M_capacity(__len); 
# 694
_M_set_length(__len); 
# 695
}  
# 696
}  
# 697
std::__alloc_on_copy(_M_get_allocator(), __str._M_get_allocator()); 
# 698
}  
# 700
return this->assign(__str); 
# 701
} 
# 708
basic_string &operator=(const _CharT *__s) 
# 709
{ return this->assign(__s); } 
# 719 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string &operator=(_CharT __c) 
# 720
{ 
# 721
this->assign(1, __c); 
# 722
return *this; 
# 723
} 
# 736 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string &operator=(basic_string &&__str) noexcept(_Alloc_traits::_S_nothrow_move()) 
# 738
{ 
# 739
if ((!_M_is_local()) && _Alloc_traits::_S_propagate_on_move_assign() && (!_Alloc_traits::_S_always_equal()) && (_M_get_allocator() != __str._M_get_allocator())) 
# 742
{ 
# 744
_M_destroy(_M_allocated_capacity); 
# 745
_M_data(_M_local_data()); 
# 746
_M_set_length(0); 
# 747
}  
# 749
std::__alloc_on_move(_M_get_allocator(), __str._M_get_allocator()); 
# 751
if (__str._M_is_local()) 
# 752
{ 
# 754
if (__str.size()) { 
# 755
this->_S_copy(_M_data(), __str._M_data(), __str.size()); }  
# 756
_M_set_length(__str.size()); 
# 757
} else { 
# 758
if ((_Alloc_traits::_S_propagate_on_move_assign() || _Alloc_traits::_S_always_equal()) || (_M_get_allocator() == __str._M_get_allocator())) 
# 761
{ 
# 763
pointer __data = (nullptr); 
# 764
size_type __capacity; 
# 765
if (!_M_is_local()) 
# 766
{ 
# 767
if (_Alloc_traits::_S_always_equal()) 
# 768
{ 
# 770
__data = _M_data(); 
# 771
__capacity = (_M_allocated_capacity); 
# 772
} else { 
# 774
_M_destroy(_M_allocated_capacity); }  
# 775
}  
# 777
_M_data(__str._M_data()); 
# 778
_M_length(__str.length()); 
# 779
_M_capacity(__str._M_allocated_capacity); 
# 780
if (__data) 
# 781
{ 
# 782
__str._M_data(__data); 
# 783
__str._M_capacity(__capacity); 
# 784
} else { 
# 786
__str._M_data(__str._M_local_buf); }  
# 787
} else { 
# 789
assign(__str); }  }  
# 790
__str.clear(); 
# 791
return *this; 
# 792
} 
# 799
basic_string &operator=(initializer_list< _CharT>  __l) 
# 800
{ 
# 801
this->assign(__l.begin(), __l.size()); 
# 802
return *this; 
# 803
} 
# 830 "/usr/include/c++/9/bits/basic_string.h" 3
iterator begin() noexcept 
# 831
{ return ((__gnu_cxx::__normal_iterator< pointer, basic_string> )(_M_data())); } 
# 838
const_iterator begin() const noexcept 
# 839
{ return ((__gnu_cxx::__normal_iterator< const_pointer, basic_string> )(_M_data())); } 
# 846
iterator end() noexcept 
# 847
{ return ((__gnu_cxx::__normal_iterator< pointer, basic_string> )(_M_data() + size())); } 
# 854
const_iterator end() const noexcept 
# 855
{ return ((__gnu_cxx::__normal_iterator< const_pointer, basic_string> )(_M_data() + size())); } 
# 863
reverse_iterator rbegin() noexcept 
# 864
{ return ((std::reverse_iterator< iterator> )(end())); } 
# 872
const_reverse_iterator rbegin() const noexcept 
# 873
{ return ((std::reverse_iterator< const_iterator> )(end())); } 
# 881
reverse_iterator rend() noexcept 
# 882
{ return ((std::reverse_iterator< iterator> )(begin())); } 
# 890
const_reverse_iterator rend() const noexcept 
# 891
{ return ((std::reverse_iterator< const_iterator> )(begin())); } 
# 899
const_iterator cbegin() const noexcept 
# 900
{ return ((__gnu_cxx::__normal_iterator< const_pointer, basic_string> )(this->_M_data())); } 
# 907
const_iterator cend() const noexcept 
# 908
{ return ((__gnu_cxx::__normal_iterator< const_pointer, basic_string> )(this->_M_data() + size())); } 
# 916
const_reverse_iterator crbegin() const noexcept 
# 917
{ return ((std::reverse_iterator< const_iterator> )(end())); } 
# 925
const_reverse_iterator crend() const noexcept 
# 926
{ return ((std::reverse_iterator< const_iterator> )(begin())); } 
# 934
size_type size() const noexcept 
# 935
{ return _M_string_length; } 
# 940
size_type length() const noexcept 
# 941
{ return _M_string_length; } 
# 945
size_type max_size() const noexcept 
# 946
{ return (_Alloc_traits::max_size(_M_get_allocator()) - 1) / 2; } 
# 959 "/usr/include/c++/9/bits/basic_string.h" 3
void resize(size_type __n, _CharT __c); 
# 972 "/usr/include/c++/9/bits/basic_string.h" 3
void resize(size_type __n) 
# 973
{ this->resize(__n, _CharT()); } 
# 978
void shrink_to_fit() noexcept 
# 979
{ 
# 981
if (capacity() > size()) 
# 982
{ 
# 983
try 
# 984
{ reserve(0); } 
# 985
catch (...) 
# 986
{ }  
# 987
}  
# 989
} 
# 997
size_type capacity() const noexcept 
# 998
{ 
# 999
return (_M_is_local()) ? (size_type)_S_local_capacity : (_M_allocated_capacity); 
# 1001
} 
# 1021 "/usr/include/c++/9/bits/basic_string.h" 3
void reserve(size_type __res_arg = 0); 
# 1027
void clear() noexcept 
# 1028
{ _M_set_length(0); } 
# 1035
bool empty() const noexcept 
# 1036
{ return size() == 0; } 
# 1050 "/usr/include/c++/9/bits/basic_string.h" 3
const_reference operator[](size_type __pos) const noexcept 
# 1051
{ 
# 1052
; 
# 1053
return _M_data()[__pos]; 
# 1054
} 
# 1067 "/usr/include/c++/9/bits/basic_string.h" 3
reference operator[](size_type __pos) 
# 1068
{ 
# 1071
; 
# 1073
; 
# 1074
return _M_data()[__pos]; 
# 1075
} 
# 1088 "/usr/include/c++/9/bits/basic_string.h" 3
const_reference at(size_type __n) const 
# 1089
{ 
# 1090
if (__n >= size()) { 
# 1091
__throw_out_of_range_fmt("basic_string::at: __n (which is %zu) >= this->size() (which is %zu)", __n, size()); }  
# 1095
return _M_data()[__n]; 
# 1096
} 
# 1109 "/usr/include/c++/9/bits/basic_string.h" 3
reference at(size_type __n) 
# 1110
{ 
# 1111
if (__n >= size()) { 
# 1112
__throw_out_of_range_fmt("basic_string::at: __n (which is %zu) >= this->size() (which is %zu)", __n, size()); }  
# 1116
return _M_data()[__n]; 
# 1117
} 
# 1125
reference front() noexcept 
# 1126
{ 
# 1127
; 
# 1128
return operator[](0); 
# 1129
} 
# 1136
const_reference front() const noexcept 
# 1137
{ 
# 1138
; 
# 1139
return operator[](0); 
# 1140
} 
# 1147
reference back() noexcept 
# 1148
{ 
# 1149
; 
# 1150
return operator[](size() - 1); 
# 1151
} 
# 1158
const_reference back() const noexcept 
# 1159
{ 
# 1160
; 
# 1161
return operator[](size() - 1); 
# 1162
} 
# 1172 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string &operator+=(const basic_string &__str) 
# 1173
{ return this->append(__str); } 
# 1181
basic_string &operator+=(const _CharT *__s) 
# 1182
{ return this->append(__s); } 
# 1190
basic_string &operator+=(_CharT __c) 
# 1191
{ 
# 1192
push_back(__c); 
# 1193
return *this; 
# 1194
} 
# 1203
basic_string &operator+=(initializer_list< _CharT>  __l) 
# 1204
{ return this->append(__l.begin(), __l.size()); } 
# 1225 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string &append(const basic_string &__str) 
# 1226
{ return _M_append(__str._M_data(), __str.size()); } 
# 1242 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string &append(const basic_string &__str, size_type __pos, size_type __n = npos) 
# 1243
{ return _M_append(__str._M_data() + __str._M_check(__pos, "basic_string::append"), __str._M_limit(__pos, __n)); 
# 1245
} 
# 1254
basic_string &append(const _CharT *__s, size_type __n) 
# 1255
{ 
# 1256
; 
# 1257
_M_check_length((size_type)0, __n, "basic_string::append"); 
# 1258
return _M_append(__s, __n); 
# 1259
} 
# 1267
basic_string &append(const _CharT *__s) 
# 1268
{ 
# 1269
; 
# 1270
const size_type __n = traits_type::length(__s); 
# 1271
_M_check_length((size_type)0, __n, "basic_string::append"); 
# 1272
return _M_append(__s, __n); 
# 1273
} 
# 1284 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string &append(size_type __n, _CharT __c) 
# 1285
{ return _M_replace_aux(size(), (size_type)0, __n, __c); } 
# 1294
basic_string &append(initializer_list< _CharT>  __l) 
# 1295
{ return this->append(__l.begin(), __l.size()); } 
# 1307 "/usr/include/c++/9/bits/basic_string.h" 3
template< class _InputIterator, class 
# 1308
 = _RequireInputIter< _InputIterator> > basic_string &
# 1313
append(_InputIterator __first, _InputIterator __last) 
# 1314
{ return this->replace(end(), end(), __first, __last); } 
# 1353 "/usr/include/c++/9/bits/basic_string.h" 3
void push_back(_CharT __c) 
# 1354
{ 
# 1355
const size_type __size = size(); 
# 1356
if ((__size + 1) > capacity()) { 
# 1357
_M_mutate(__size, (size_type)0, 0, (size_type)1); }  
# 1358
traits_type::assign(this->_M_data()[__size], __c); 
# 1359
_M_set_length(__size + 1); 
# 1360
} 
# 1368
basic_string &assign(const basic_string &__str) 
# 1369
{ 
# 1370
_M_assign(__str); 
# 1371
return *this; 
# 1372
} 
# 1384 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string &assign(basic_string &&__str) noexcept(_Alloc_traits::_S_nothrow_move()) 
# 1386
{ 
# 1389
return (*this) = std::move(__str); 
# 1390
} 
# 1407 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string &assign(const basic_string &__str, size_type __pos, size_type __n = npos) 
# 1408
{ return _M_replace((size_type)0, size(), __str._M_data() + __str._M_check(__pos, "basic_string::assign"), __str._M_limit(__pos, __n)); 
# 1410
} 
# 1423 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string &assign(const _CharT *__s, size_type __n) 
# 1424
{ 
# 1425
; 
# 1426
return _M_replace((size_type)0, size(), __s, __n); 
# 1427
} 
# 1439 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string &assign(const _CharT *__s) 
# 1440
{ 
# 1441
; 
# 1442
return _M_replace((size_type)0, size(), __s, traits_type::length(__s)); 
# 1444
} 
# 1456 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string &assign(size_type __n, _CharT __c) 
# 1457
{ return _M_replace_aux((size_type)0, size(), __n, __c); } 
# 1468 "/usr/include/c++/9/bits/basic_string.h" 3
template< class _InputIterator, class 
# 1469
 = _RequireInputIter< _InputIterator> > basic_string &
# 1474
assign(_InputIterator __first, _InputIterator __last) 
# 1475
{ return this->replace(begin(), end(), __first, __last); } 
# 1484
basic_string &assign(initializer_list< _CharT>  __l) 
# 1485
{ return this->assign(__l.begin(), __l.size()); } 
# 1538 "/usr/include/c++/9/bits/basic_string.h" 3
iterator insert(const_iterator __p, size_type __n, _CharT __c) 
# 1539
{ 
# 1540
; 
# 1541
const size_type __pos = __p - begin(); 
# 1542
this->replace(__p, __p, __n, __c); 
# 1543
return ((__gnu_cxx::__normal_iterator< pointer, basic_string> )(this->_M_data() + __pos)); 
# 1544
} 
# 1579 "/usr/include/c++/9/bits/basic_string.h" 3
template< class _InputIterator, class 
# 1580
 = _RequireInputIter< _InputIterator> > iterator 
# 1582
insert(const_iterator __p, _InputIterator __beg, _InputIterator __end) 
# 1583
{ 
# 1584
; 
# 1585
const size_type __pos = __p - begin(); 
# 1586
this->replace(__p, __p, __beg, __end); 
# 1587
return ((__gnu_cxx::__normal_iterator< pointer, basic_string> )(this->_M_data() + __pos)); 
# 1588
} 
# 1616 "/usr/include/c++/9/bits/basic_string.h" 3
iterator insert(const_iterator __p, initializer_list< _CharT>  __l) 
# 1617
{ return this->insert(__p, __l.begin(), __l.end()); } 
# 1643 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string &insert(size_type __pos1, const basic_string &__str) 
# 1644
{ return this->replace(__pos1, (size_type)0, __str._M_data(), __str.size()); 
# 1645
} 
# 1666 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string &insert(size_type __pos1, const basic_string &__str, size_type 
# 1667
__pos2, size_type __n = npos) 
# 1668
{ return this->replace(__pos1, (size_type)0, __str._M_data() + __str._M_check(__pos2, "basic_string::insert"), __str._M_limit(__pos2, __n)); 
# 1670
} 
# 1689 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string &insert(size_type __pos, const _CharT *__s, size_type __n) 
# 1690
{ return this->replace(__pos, (size_type)0, __s, __n); } 
# 1708 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string &insert(size_type __pos, const _CharT *__s) 
# 1709
{ 
# 1710
; 
# 1711
return this->replace(__pos, (size_type)0, __s, traits_type::length(__s)); 
# 1713
} 
# 1732 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string &insert(size_type __pos, size_type __n, _CharT __c) 
# 1733
{ return _M_replace_aux(_M_check(__pos, "basic_string::insert"), (size_type)0, __n, __c); 
# 1734
} 
# 1750 "/usr/include/c++/9/bits/basic_string.h" 3
iterator insert(__const_iterator __p, _CharT __c) 
# 1751
{ 
# 1752
; 
# 1753
const size_type __pos = __p - begin(); 
# 1754
_M_replace_aux(__pos, (size_type)0, (size_type)1, __c); 
# 1755
return ((__gnu_cxx::__normal_iterator< pointer, basic_string> )(_M_data() + __pos)); 
# 1756
} 
# 1811 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string &erase(size_type __pos = 0, size_type __n = npos) 
# 1812
{ 
# 1813
_M_check(__pos, "basic_string::erase"); 
# 1814
if (__n == npos) { 
# 1815
_M_set_length(__pos); } else { 
# 1816
if (__n != 0) { 
# 1817
_M_erase(__pos, _M_limit(__pos, __n)); }  }  
# 1818
return *this; 
# 1819
} 
# 1830 "/usr/include/c++/9/bits/basic_string.h" 3
iterator erase(__const_iterator __position) 
# 1831
{ 
# 1833
; 
# 1834
const size_type __pos = __position - begin(); 
# 1835
_M_erase(__pos, (size_type)1); 
# 1836
return ((__gnu_cxx::__normal_iterator< pointer, basic_string> )(_M_data() + __pos)); 
# 1837
} 
# 1849 "/usr/include/c++/9/bits/basic_string.h" 3
iterator erase(__const_iterator __first, __const_iterator __last) 
# 1850
{ 
# 1852
; 
# 1853
const size_type __pos = __first - begin(); 
# 1854
if (__last == end()) { 
# 1855
_M_set_length(__pos); } else { 
# 1857
_M_erase(__pos, __last - __first); }  
# 1858
return ((__gnu_cxx::__normal_iterator< pointer, basic_string> )(this->_M_data() + __pos)); 
# 1859
} 
# 1868
void pop_back() noexcept 
# 1869
{ 
# 1870
; 
# 1871
_M_erase(size() - 1, 1); 
# 1872
} 
# 1893 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string &replace(size_type __pos, size_type __n, const basic_string &__str) 
# 1894
{ return this->replace(__pos, __n, __str._M_data(), __str.size()); } 
# 1915 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string &replace(size_type __pos1, size_type __n1, const basic_string &__str, size_type 
# 1916
__pos2, size_type __n2 = npos) 
# 1917
{ return this->replace(__pos1, __n1, __str._M_data() + __str._M_check(__pos2, "basic_string::replace"), __str._M_limit(__pos2, __n2)); 
# 1919
} 
# 1940 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string &replace(size_type __pos, size_type __n1, const _CharT *__s, size_type 
# 1941
__n2) 
# 1942
{ 
# 1943
; 
# 1944
return _M_replace(_M_check(__pos, "basic_string::replace"), _M_limit(__pos, __n1), __s, __n2); 
# 1946
} 
# 1965 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string &replace(size_type __pos, size_type __n1, const _CharT *__s) 
# 1966
{ 
# 1967
; 
# 1968
return this->replace(__pos, __n1, __s, traits_type::length(__s)); 
# 1969
} 
# 1989 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string &replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c) 
# 1990
{ return _M_replace_aux(_M_check(__pos, "basic_string::replace"), _M_limit(__pos, __n1), __n2, __c); 
# 1991
} 
# 2007 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string &replace(__const_iterator __i1, __const_iterator __i2, const basic_string &
# 2008
__str) 
# 2009
{ return this->replace(__i1, __i2, __str._M_data(), __str.size()); } 
# 2027 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string &replace(__const_iterator __i1, __const_iterator __i2, const _CharT *
# 2028
__s, size_type __n) 
# 2029
{ 
# 2031
; 
# 2032
return this->replace(__i1 - begin(), __i2 - __i1, __s, __n); 
# 2033
} 
# 2049 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string &replace(__const_iterator __i1, __const_iterator __i2, const _CharT *__s) 
# 2050
{ 
# 2051
; 
# 2052
return this->replace(__i1, __i2, __s, traits_type::length(__s)); 
# 2053
} 
# 2070 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string &replace(__const_iterator __i1, __const_iterator __i2, size_type __n, _CharT 
# 2071
__c) 
# 2072
{ 
# 2074
; 
# 2075
return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __c); 
# 2076
} 
# 2094 "/usr/include/c++/9/bits/basic_string.h" 3
template< class _InputIterator, class 
# 2095
 = _RequireInputIter< _InputIterator> > basic_string &
# 2097
replace(const_iterator __i1, const_iterator __i2, _InputIterator 
# 2098
__k1, _InputIterator __k2) 
# 2099
{ 
# 2101
; 
# 2102
; 
# 2103
return this->_M_replace_dispatch(__i1, __i2, __k1, __k2, __false_type()); 
# 2105
} 
# 2127 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string &replace(__const_iterator __i1, __const_iterator __i2, _CharT *
# 2128
__k1, _CharT *__k2) 
# 2129
{ 
# 2131
; 
# 2132
; 
# 2133
return this->replace(__i1 - begin(), __i2 - __i1, __k1, __k2 - __k1); 
# 2135
} 
# 2138
basic_string &replace(__const_iterator __i1, __const_iterator __i2, const _CharT *
# 2139
__k1, const _CharT *__k2) 
# 2140
{ 
# 2142
; 
# 2143
; 
# 2144
return this->replace(__i1 - begin(), __i2 - __i1, __k1, __k2 - __k1); 
# 2146
} 
# 2149
basic_string &replace(__const_iterator __i1, __const_iterator __i2, iterator 
# 2150
__k1, iterator __k2) 
# 2151
{ 
# 2153
; 
# 2154
; 
# 2155
return this->replace(__i1 - begin(), __i2 - __i1, __k1.base(), __k2 - __k1); 
# 2157
} 
# 2160
basic_string &replace(__const_iterator __i1, __const_iterator __i2, const_iterator 
# 2161
__k1, const_iterator __k2) 
# 2162
{ 
# 2164
; 
# 2165
; 
# 2166
return this->replace(__i1 - begin(), __i2 - __i1, __k1.base(), __k2 - __k1); 
# 2168
} 
# 2185 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string &replace(const_iterator __i1, const_iterator __i2, initializer_list< _CharT>  
# 2186
__l) 
# 2187
{ return this->replace(__i1, __i2, __l.begin(), __l.size()); } 
# 2248 "/usr/include/c++/9/bits/basic_string.h" 3
private: 
# 2246
template< class _Integer> basic_string &
# 2248
_M_replace_dispatch(const_iterator __i1, const_iterator __i2, _Integer 
# 2249
__n, _Integer __val, __true_type) 
# 2250
{ return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __val); } 
# 2252
template< class _InputIterator> basic_string &_M_replace_dispatch(const_iterator __i1, const_iterator __i2, _InputIterator __k1, _InputIterator __k2, __false_type); 
# 2259
basic_string &_M_replace_aux(size_type __pos1, size_type __n1, size_type __n2, _CharT __c); 
# 2263
basic_string &_M_replace(size_type __pos, size_type __len1, const _CharT * __s, const size_type __len2); 
# 2267
basic_string &_M_append(const _CharT * __s, size_type __n); 
# 2284 "/usr/include/c++/9/bits/basic_string.h" 3
public: size_type copy(_CharT * __s, size_type __n, size_type __pos = 0) const; 
# 2294 "/usr/include/c++/9/bits/basic_string.h" 3
void swap(basic_string & __s) noexcept; 
# 2304 "/usr/include/c++/9/bits/basic_string.h" 3
const _CharT *c_str() const noexcept 
# 2305
{ return _M_data(); } 
# 2316 "/usr/include/c++/9/bits/basic_string.h" 3
const _CharT *data() const noexcept 
# 2317
{ return _M_data(); } 
# 2335 "/usr/include/c++/9/bits/basic_string.h" 3
allocator_type get_allocator() const noexcept 
# 2336
{ return _M_get_allocator(); } 
# 2351 "/usr/include/c++/9/bits/basic_string.h" 3
size_type find(const _CharT * __s, size_type __pos, size_type __n) const noexcept; 
# 2365 "/usr/include/c++/9/bits/basic_string.h" 3
size_type find(const basic_string &__str, size_type __pos = 0) const noexcept 
# 2367
{ return this->find(__str.data(), __pos, __str.size()); } 
# 2397 "/usr/include/c++/9/bits/basic_string.h" 3
size_type find(const _CharT *__s, size_type __pos = 0) const noexcept 
# 2398
{ 
# 2399
; 
# 2400
return this->find(__s, __pos, traits_type::length(__s)); 
# 2401
} 
# 2414 "/usr/include/c++/9/bits/basic_string.h" 3
size_type find(_CharT __c, size_type __pos = 0) const noexcept; 
# 2427 "/usr/include/c++/9/bits/basic_string.h" 3
size_type rfind(const basic_string &__str, size_type __pos = npos) const noexcept 
# 2429
{ return this->rfind(__str.data(), __pos, __str.size()); } 
# 2461 "/usr/include/c++/9/bits/basic_string.h" 3
size_type rfind(const _CharT * __s, size_type __pos, size_type __n) const noexcept; 
# 2475 "/usr/include/c++/9/bits/basic_string.h" 3
size_type rfind(const _CharT *__s, size_type __pos = npos) const 
# 2476
{ 
# 2477
; 
# 2478
return this->rfind(__s, __pos, traits_type::length(__s)); 
# 2479
} 
# 2492 "/usr/include/c++/9/bits/basic_string.h" 3
size_type rfind(_CharT __c, size_type __pos = npos) const noexcept; 
# 2506 "/usr/include/c++/9/bits/basic_string.h" 3
size_type find_first_of(const basic_string &__str, size_type __pos = 0) const noexcept 
# 2508
{ return this->find_first_of(__str.data(), __pos, __str.size()); } 
# 2541 "/usr/include/c++/9/bits/basic_string.h" 3
size_type find_first_of(const _CharT * __s, size_type __pos, size_type __n) const noexcept; 
# 2555 "/usr/include/c++/9/bits/basic_string.h" 3
size_type find_first_of(const _CharT *__s, size_type __pos = 0) const noexcept 
# 2557
{ 
# 2558
; 
# 2559
return this->find_first_of(__s, __pos, traits_type::length(__s)); 
# 2560
} 
# 2575 "/usr/include/c++/9/bits/basic_string.h" 3
size_type find_first_of(_CharT __c, size_type __pos = 0) const noexcept 
# 2576
{ return this->find(__c, __pos); } 
# 2590 "/usr/include/c++/9/bits/basic_string.h" 3
size_type find_last_of(const basic_string &__str, size_type __pos = npos) const noexcept 
# 2592
{ return this->find_last_of(__str.data(), __pos, __str.size()); } 
# 2625 "/usr/include/c++/9/bits/basic_string.h" 3
size_type find_last_of(const _CharT * __s, size_type __pos, size_type __n) const noexcept; 
# 2639 "/usr/include/c++/9/bits/basic_string.h" 3
size_type find_last_of(const _CharT *__s, size_type __pos = npos) const noexcept 
# 2641
{ 
# 2642
; 
# 2643
return this->find_last_of(__s, __pos, traits_type::length(__s)); 
# 2644
} 
# 2659 "/usr/include/c++/9/bits/basic_string.h" 3
size_type find_last_of(_CharT __c, size_type __pos = npos) const noexcept 
# 2660
{ return this->rfind(__c, __pos); } 
# 2673 "/usr/include/c++/9/bits/basic_string.h" 3
size_type find_first_not_of(const basic_string &__str, size_type __pos = 0) const noexcept 
# 2675
{ return this->find_first_not_of(__str.data(), __pos, __str.size()); } 
# 2708 "/usr/include/c++/9/bits/basic_string.h" 3
size_type find_first_not_of(const _CharT * __s, size_type __pos, size_type __n) const noexcept; 
# 2722 "/usr/include/c++/9/bits/basic_string.h" 3
size_type find_first_not_of(const _CharT *__s, size_type __pos = 0) const noexcept 
# 2724
{ 
# 2725
; 
# 2726
return this->find_first_not_of(__s, __pos, traits_type::length(__s)); 
# 2727
} 
# 2740 "/usr/include/c++/9/bits/basic_string.h" 3
size_type find_first_not_of(_CharT __c, size_type __pos = 0) const noexcept; 
# 2755 "/usr/include/c++/9/bits/basic_string.h" 3
size_type find_last_not_of(const basic_string &__str, size_type __pos = npos) const noexcept 
# 2757
{ return this->find_last_not_of(__str.data(), __pos, __str.size()); } 
# 2790 "/usr/include/c++/9/bits/basic_string.h" 3
size_type find_last_not_of(const _CharT * __s, size_type __pos, size_type __n) const noexcept; 
# 2804 "/usr/include/c++/9/bits/basic_string.h" 3
size_type find_last_not_of(const _CharT *__s, size_type __pos = npos) const noexcept 
# 2806
{ 
# 2807
; 
# 2808
return this->find_last_not_of(__s, __pos, traits_type::length(__s)); 
# 2809
} 
# 2822 "/usr/include/c++/9/bits/basic_string.h" 3
size_type find_last_not_of(_CharT __c, size_type __pos = npos) const noexcept; 
# 2838 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string substr(size_type __pos = 0, size_type __n = npos) const 
# 2839
{ return basic_string(*this, _M_check(__pos, "basic_string::substr"), __n); 
# 2840
} 
# 2857 "/usr/include/c++/9/bits/basic_string.h" 3
int compare(const basic_string &__str) const 
# 2858
{ 
# 2859
const size_type __size = size(); 
# 2860
const size_type __osize = __str.size(); 
# 2861
const size_type __len = std::min(__size, __osize); 
# 2863
int __r = traits_type::compare(_M_data(), __str.data(), __len); 
# 2864
if (!__r) { 
# 2865
__r = (_S_compare)(__size, __osize); }  
# 2866
return __r; 
# 2867
} 
# 2950 "/usr/include/c++/9/bits/basic_string.h" 3
int compare(size_type __pos, size_type __n, const basic_string & __str) const; 
# 2976 "/usr/include/c++/9/bits/basic_string.h" 3
int compare(size_type __pos1, size_type __n1, const basic_string & __str, size_type __pos2, size_type __n2 = npos) const; 
# 2994 "/usr/include/c++/9/bits/basic_string.h" 3
int compare(const _CharT * __s) const noexcept; 
# 3018 "/usr/include/c++/9/bits/basic_string.h" 3
int compare(size_type __pos, size_type __n1, const _CharT * __s) const; 
# 3045 "/usr/include/c++/9/bits/basic_string.h" 3
int compare(size_type __pos, size_type __n1, const _CharT * __s, size_type __n2) const; 
# 3075 "/usr/include/c++/9/bits/basic_string.h" 3
template< class , class , class > friend class basic_stringbuf; 
# 3076
}; 
# 3077
}
# 6021 "/usr/include/c++/9/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 6023
operator+(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6024
__rhs) 
# 6025
{ 
# 6026
__cxx11::basic_string< _CharT, _Traits, _Alloc>  __str(__lhs); 
# 6027
__str.append(__rhs); 
# 6028
return __str; 
# 6029
} 
# 6037
template< class _CharT, class _Traits, class _Alloc> __cxx11::basic_string< _CharT, _Traits, _Alloc>  operator+(const _CharT * __lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  & __rhs); 
# 6048
template< class _CharT, class _Traits, class _Alloc> __cxx11::basic_string< _CharT, _Traits, _Alloc>  operator+(_CharT __lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  & __rhs); 
# 6058
template< class _CharT, class _Traits, class _Alloc> inline __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 6060
operator+(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const _CharT *
# 6061
__rhs) 
# 6062
{ 
# 6063
__cxx11::basic_string< _CharT, _Traits, _Alloc>  __str(__lhs); 
# 6064
__str.append(__rhs); 
# 6065
return __str; 
# 6066
} 
# 6074
template< class _CharT, class _Traits, class _Alloc> inline __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 6076
operator+(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, _CharT __rhs) 
# 6077
{ 
# 6078
typedef __cxx11::basic_string< _CharT, _Traits, _Alloc>  __string_type; 
# 6079
typedef typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type __size_type; 
# 6080
__string_type __str(__lhs); 
# 6081
__str.append((__size_type)1, __rhs); 
# 6082
return __str; 
# 6083
} 
# 6086
template< class _CharT, class _Traits, class _Alloc> inline __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 6088
operator+(__cxx11::basic_string< _CharT, _Traits, _Alloc>  &&__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6089
__rhs) 
# 6090
{ return std::move(__lhs.append(__rhs)); } 
# 6092
template< class _CharT, class _Traits, class _Alloc> inline __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 6094
operator+(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &&
# 6095
__rhs) 
# 6096
{ return std::move(__rhs.insert(0, __lhs)); } 
# 6098
template< class _CharT, class _Traits, class _Alloc> inline __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 6100
operator+(__cxx11::basic_string< _CharT, _Traits, _Alloc>  &&__lhs, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &&
# 6101
__rhs) 
# 6102
{ 
# 6103
const auto __size = __lhs.size() + __rhs.size(); 
# 6104
const bool __cond = (__size > __lhs.capacity()) && (__size <= __rhs.capacity()); 
# 6106
return __cond ? std::move(__rhs.insert(0, __lhs)) : std::move(__lhs.append(__rhs)); 
# 6108
} 
# 6110
template< class _CharT, class _Traits, class _Alloc> inline __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 6112
operator+(const _CharT *__lhs, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &&
# 6113
__rhs) 
# 6114
{ return std::move(__rhs.insert(0, __lhs)); } 
# 6116
template< class _CharT, class _Traits, class _Alloc> inline __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 6118
operator+(_CharT __lhs, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &&
# 6119
__rhs) 
# 6120
{ return std::move(__rhs.insert(0, 1, __lhs)); } 
# 6122
template< class _CharT, class _Traits, class _Alloc> inline __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 6124
operator+(__cxx11::basic_string< _CharT, _Traits, _Alloc>  &&__lhs, const _CharT *
# 6125
__rhs) 
# 6126
{ return std::move(__lhs.append(__rhs)); } 
# 6128
template< class _CharT, class _Traits, class _Alloc> inline __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 6130
operator+(__cxx11::basic_string< _CharT, _Traits, _Alloc>  &&__lhs, _CharT 
# 6131
__rhs) 
# 6132
{ return std::move(__lhs.append(1, __rhs)); } 
# 6142 "/usr/include/c++/9/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6144
operator==(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6145
__rhs) noexcept 
# 6147
{ return __lhs.compare(__rhs) == 0; } 
# 6149
template< class _CharT> inline typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, bool> ::__type 
# 6152
operator==(const __cxx11::basic_string< _CharT>  &__lhs, const __cxx11::basic_string< _CharT>  &
# 6153
__rhs) noexcept 
# 6154
{ return ((__lhs.size() == __rhs.size()) && (!std::char_traits< _CharT> ::compare(__lhs.data(), __rhs.data(), __lhs.size()))); 
# 6156
} 
# 6164
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6166
operator==(const _CharT *__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6167
__rhs) 
# 6168
{ return __rhs.compare(__lhs) == 0; } 
# 6176
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6178
operator==(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const _CharT *
# 6179
__rhs) 
# 6180
{ return __lhs.compare(__rhs) == 0; } 
# 6189 "/usr/include/c++/9/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6191
operator!=(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6192
__rhs) noexcept 
# 6194
{ return !(__lhs == __rhs); } 
# 6202
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6204
operator!=(const _CharT *__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6205
__rhs) 
# 6206
{ return !(__lhs == __rhs); } 
# 6214
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6216
operator!=(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const _CharT *
# 6217
__rhs) 
# 6218
{ return !(__lhs == __rhs); } 
# 6227 "/usr/include/c++/9/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6229
operator<(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6230
__rhs) noexcept 
# 6232
{ return __lhs.compare(__rhs) < 0; } 
# 6240
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6242
operator<(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const _CharT *
# 6243
__rhs) 
# 6244
{ return __lhs.compare(__rhs) < 0; } 
# 6252
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6254
operator<(const _CharT *__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6255
__rhs) 
# 6256
{ return __rhs.compare(__lhs) > 0; } 
# 6265 "/usr/include/c++/9/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6267
operator>(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6268
__rhs) noexcept 
# 6270
{ return __lhs.compare(__rhs) > 0; } 
# 6278
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6280
operator>(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const _CharT *
# 6281
__rhs) 
# 6282
{ return __lhs.compare(__rhs) > 0; } 
# 6290
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6292
operator>(const _CharT *__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6293
__rhs) 
# 6294
{ return __rhs.compare(__lhs) < 0; } 
# 6303 "/usr/include/c++/9/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6305
operator<=(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6306
__rhs) noexcept 
# 6308
{ return __lhs.compare(__rhs) <= 0; } 
# 6316
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6318
operator<=(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const _CharT *
# 6319
__rhs) 
# 6320
{ return __lhs.compare(__rhs) <= 0; } 
# 6328
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6330
operator<=(const _CharT *__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6331
__rhs) 
# 6332
{ return __rhs.compare(__lhs) >= 0; } 
# 6341 "/usr/include/c++/9/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6343
operator>=(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6344
__rhs) noexcept 
# 6346
{ return __lhs.compare(__rhs) >= 0; } 
# 6354
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6356
operator>=(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const _CharT *
# 6357
__rhs) 
# 6358
{ return __lhs.compare(__rhs) >= 0; } 
# 6366
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6368
operator>=(const _CharT *__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6369
__rhs) 
# 6370
{ return __rhs.compare(__lhs) <= 0; } 
# 6379 "/usr/include/c++/9/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> inline void 
# 6381
swap(__cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6382
__rhs) noexcept(noexcept(__lhs.swap(__rhs))) 
# 6384
{ __lhs.swap(__rhs); } 
# 6399 "/usr/include/c++/9/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> basic_istream< _CharT, _Traits>  &operator>>(basic_istream< _CharT, _Traits>  & __is, __cxx11::basic_string< _CharT, _Traits, _Alloc>  & __str); 
# 6406
template<> basic_istream< char>  &operator>>(basic_istream< char>  & __is, __cxx11::basic_string< char>  & __str); 
# 6417 "/usr/include/c++/9/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> inline basic_ostream< _CharT, _Traits>  &
# 6419
operator<<(basic_ostream< _CharT, _Traits>  &__os, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6420
__str) 
# 6421
{ 
# 6424
return __ostream_insert(__os, __str.data(), __str.size()); 
# 6425
} 
# 6440 "/usr/include/c++/9/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> basic_istream< _CharT, _Traits>  &getline(basic_istream< _CharT, _Traits>  & __is, __cxx11::basic_string< _CharT, _Traits, _Alloc>  & __str, _CharT __delim); 
# 6457 "/usr/include/c++/9/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> inline basic_istream< _CharT, _Traits>  &
# 6459
getline(basic_istream< _CharT, _Traits>  &__is, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6460
__str) 
# 6461
{ return std::getline(__is, __str, __is.widen('\n')); } 
# 6465
template< class _CharT, class _Traits, class _Alloc> inline basic_istream< _CharT, _Traits>  &
# 6467
getline(basic_istream< _CharT, _Traits>  &&__is, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6468
__str, _CharT __delim) 
# 6469
{ return std::getline(__is, __str, __delim); } 
# 6472
template< class _CharT, class _Traits, class _Alloc> inline basic_istream< _CharT, _Traits>  &
# 6474
getline(basic_istream< _CharT, _Traits>  &&__is, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6475
__str) 
# 6476
{ return std::getline(__is, __str); } 
# 6481
template<> basic_istream< char>  &getline(basic_istream< char>  & __in, __cxx11::basic_string< char>  & __str, char __delim); 
# 6487
template<> basic_istream< wchar_t>  &getline(basic_istream< wchar_t>  & __in, __cxx11::basic_string< wchar_t>  & __str, wchar_t __delim); 
# 6492
}
# 96 "/usr/include/c++/9/cstdio" 3
namespace std { 
# 98
using ::FILE;
# 99
using ::fpos_t;
# 101
using ::clearerr;
# 102
using ::fclose;
# 103
using ::feof;
# 104
using ::ferror;
# 105
using ::fflush;
# 106
using ::fgetc;
# 107
using ::fgetpos;
# 108
using ::fgets;
# 109
using ::fopen;
# 110
using ::fprintf;
# 111
using ::fputc;
# 112
using ::fputs;
# 113
using ::fread;
# 114
using ::freopen;
# 115
using ::fscanf;
# 116
using ::fseek;
# 117
using ::fsetpos;
# 118
using ::ftell;
# 119
using ::fwrite;
# 120
using ::getc;
# 121
using ::getchar;
# 126
using ::perror;
# 127
using ::printf;
# 128
using ::putc;
# 129
using ::putchar;
# 130
using ::puts;
# 131
using ::remove;
# 132
using ::rename;
# 133
using ::rewind;
# 134
using ::scanf;
# 135
using ::setbuf;
# 136
using ::setvbuf;
# 137
using ::sprintf;
# 138
using ::sscanf;
# 139
using ::tmpfile;
# 141
using ::tmpnam;
# 143
using ::ungetc;
# 144
using ::vfprintf;
# 145
using ::vprintf;
# 146
using ::vsprintf;
# 147
}
# 157 "/usr/include/c++/9/cstdio" 3
namespace __gnu_cxx { 
# 175 "/usr/include/c++/9/cstdio" 3
using ::snprintf;
# 176
using ::vfscanf;
# 177
using ::vscanf;
# 178
using ::vsnprintf;
# 179
using ::vsscanf;
# 181
}
# 183
namespace std { 
# 185
using __gnu_cxx::snprintf;
# 186
using __gnu_cxx::vfscanf;
# 187
using __gnu_cxx::vscanf;
# 188
using __gnu_cxx::vsnprintf;
# 189
using __gnu_cxx::vsscanf;
# 190
}
# 34 "/usr/include/errno.h" 3
extern "C" {
# 37
extern int *__errno_location() throw() __attribute((const)); 
# 45
extern char *program_invocation_name; 
# 46
extern char *program_invocation_short_name; 
# 22 "/usr/include/aarch64-linux-gnu/bits/types/error_t.h" 3
typedef int error_t; 
# 52 "/usr/include/errno.h" 3
}
# 46 "/usr/include/c++/9/ext/string_conversions.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 51
template< class _TRet, class _Ret = _TRet, class _CharT, class ...
# 52
_Base> _Ret 
# 54
__stoa(_TRet (*__convf)(const _CharT *, _CharT **, _Base ...), const char *
# 55
__name, const _CharT *__str, std::size_t *__idx, _Base ...
# 56
__base) 
# 57
{ 
# 58
_Ret __ret; 
# 60
_CharT *__endptr; 
# 66
const 
# 62
struct _Save_errno { 
# 63
_Save_errno() : _M_errno(*__errno_location()) { (*__errno_location()) = 0; } 
# 64
~_Save_errno() { if ((*__errno_location()) == 0) { (*__errno_location()) = (_M_errno); }  } 
# 65
int _M_errno; 
# 66
} __save_errno; 
# 68
struct _Range_chk { 
# 70
static bool _S_chk(_TRet, std::false_type) { return false; } 
# 73
static bool _S_chk(_TRet __val, std::true_type) 
# 74
{ 
# 75
return (__val < ((_TRet)__numeric_traits< int> ::__min)) || (__val > ((_TRet)__numeric_traits< int> ::__max)); 
# 77
} 
# 78
}; 
# 80
const _TRet __tmp = __convf(__str, &__endptr, __base...); 
# 82
if (__endptr == __str) { 
# 83
std::__throw_invalid_argument(__name); } else { 
# 84
if (((*__errno_location()) == 34) || _Range_chk::_S_chk(__tmp, std::is_same< _Ret, int> {})) { 
# 86
std::__throw_out_of_range(__name); } else { 
# 88
__ret = __tmp; }  }  
# 90
if (__idx) { 
# 91
(*__idx) = (__endptr - __str); }  
# 93
return __ret; 
# 94
} 
# 97
template< class _String, class _CharT = typename _String::value_type> _String 
# 99
__to_xstring(int (*__convf)(_CharT *, std::size_t, const _CharT *, __builtin_va_list), std::size_t 
# 100
__n, const _CharT *
# 101
__fmt, ...) 
# 102
{ 
# 105
_CharT *__s = static_cast< _CharT *>(__builtin_alloca(sizeof(_CharT) * __n)); 
# 108
__builtin_va_list __args; 
# 109
__builtin_va_start(__args,__fmt); 
# 111
const int __len = __convf(__s, __n, __fmt, __args); 
# 113
__builtin_va_end(__args); 
# 115
return _String(__s, __s + __len); 
# 116
} 
# 119
}
# 6498 "/usr/include/c++/9/bits/basic_string.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 6501
inline namespace __cxx11 { 
# 6506
inline int stoi(const string &__str, size_t *__idx = 0, int __base = 10) 
# 6507
{ return __gnu_cxx::__stoa< long, int> (&std::strtol, "stoi", __str.c_str(), __idx, __base); 
# 6508
} 
# 6511
inline long stol(const string &__str, size_t *__idx = 0, int __base = 10) 
# 6512
{ return __gnu_cxx::__stoa(&std::strtol, "stol", __str.c_str(), __idx, __base); 
# 6513
} 
# 6516
inline unsigned long stoul(const string &__str, size_t *__idx = 0, int __base = 10) 
# 6517
{ return __gnu_cxx::__stoa(&std::strtoul, "stoul", __str.c_str(), __idx, __base); 
# 6518
} 
# 6521
inline long long stoll(const string &__str, size_t *__idx = 0, int __base = 10) 
# 6522
{ return __gnu_cxx::__stoa(&std::strtoll, "stoll", __str.c_str(), __idx, __base); 
# 6523
} 
# 6526
inline unsigned long long stoull(const string &__str, size_t *__idx = 0, int __base = 10) 
# 6527
{ return __gnu_cxx::__stoa(&std::strtoull, "stoull", __str.c_str(), __idx, __base); 
# 6528
} 
# 6532
inline float stof(const string &__str, size_t *__idx = 0) 
# 6533
{ return __gnu_cxx::__stoa(&std::strtof, "stof", __str.c_str(), __idx); } 
# 6536
inline double stod(const string &__str, size_t *__idx = 0) 
# 6537
{ return __gnu_cxx::__stoa(&std::strtod, "stod", __str.c_str(), __idx); } 
# 6540
inline long double stold(const string &__str, size_t *__idx = 0) 
# 6541
{ return __gnu_cxx::__stoa(&std::strtold, "stold", __str.c_str(), __idx); } 
# 6549
inline string to_string(int __val) 
# 6550
{ return __gnu_cxx::__to_xstring< basic_string< char> > (&std::vsnprintf, (4) * sizeof(int), "%d", __val); 
# 6551
} 
# 6554
inline string to_string(unsigned __val) 
# 6555
{ return __gnu_cxx::__to_xstring< basic_string< char> > (&std::vsnprintf, (4) * sizeof(unsigned), "%u", __val); 
# 6557
} 
# 6560
inline string to_string(long __val) 
# 6561
{ return __gnu_cxx::__to_xstring< basic_string< char> > (&std::vsnprintf, (4) * sizeof(long), "%ld", __val); 
# 6562
} 
# 6565
inline string to_string(unsigned long __val) 
# 6566
{ return __gnu_cxx::__to_xstring< basic_string< char> > (&std::vsnprintf, (4) * sizeof(unsigned long), "%lu", __val); 
# 6568
} 
# 6571
inline string to_string(long long __val) 
# 6572
{ return __gnu_cxx::__to_xstring< basic_string< char> > (&std::vsnprintf, (4) * sizeof(long long), "%lld", __val); 
# 6574
} 
# 6577
inline string to_string(unsigned long long __val) 
# 6578
{ return __gnu_cxx::__to_xstring< basic_string< char> > (&std::vsnprintf, (4) * sizeof(unsigned long long), "%llu", __val); 
# 6580
} 
# 6583
inline string to_string(float __val) 
# 6584
{ 
# 6585
const int __n = (__gnu_cxx::__numeric_traits_floating< float> ::__max_exponent10 + 20); 
# 6587
return __gnu_cxx::__to_xstring< basic_string< char> > (&std::vsnprintf, __n, "%f", __val); 
# 6589
} 
# 6592
inline string to_string(double __val) 
# 6593
{ 
# 6594
const int __n = (__gnu_cxx::__numeric_traits_floating< double> ::__max_exponent10 + 20); 
# 6596
return __gnu_cxx::__to_xstring< basic_string< char> > (&std::vsnprintf, __n, "%f", __val); 
# 6598
} 
# 6601
inline string to_string(long double __val) 
# 6602
{ 
# 6603
const int __n = (__gnu_cxx::__numeric_traits_floating< long double> ::__max_exponent10 + 20); 
# 6605
return __gnu_cxx::__to_xstring< basic_string< char> > (&std::vsnprintf, __n, "%Lf", __val); 
# 6607
} 
# 6612
inline int stoi(const wstring &__str, size_t *__idx = 0, int __base = 10) 
# 6613
{ return __gnu_cxx::__stoa< long, int> (&std::wcstol, "stoi", __str.c_str(), __idx, __base); 
# 6614
} 
# 6617
inline long stol(const wstring &__str, size_t *__idx = 0, int __base = 10) 
# 6618
{ return __gnu_cxx::__stoa(&std::wcstol, "stol", __str.c_str(), __idx, __base); 
# 6619
} 
# 6622
inline unsigned long stoul(const wstring &__str, size_t *__idx = 0, int __base = 10) 
# 6623
{ return __gnu_cxx::__stoa(&std::wcstoul, "stoul", __str.c_str(), __idx, __base); 
# 6624
} 
# 6627
inline long long stoll(const wstring &__str, size_t *__idx = 0, int __base = 10) 
# 6628
{ return __gnu_cxx::__stoa(&std::wcstoll, "stoll", __str.c_str(), __idx, __base); 
# 6629
} 
# 6632
inline unsigned long long stoull(const wstring &__str, size_t *__idx = 0, int __base = 10) 
# 6633
{ return __gnu_cxx::__stoa(&std::wcstoull, "stoull", __str.c_str(), __idx, __base); 
# 6634
} 
# 6638
inline float stof(const wstring &__str, size_t *__idx = 0) 
# 6639
{ return __gnu_cxx::__stoa(&std::wcstof, "stof", __str.c_str(), __idx); } 
# 6642
inline double stod(const wstring &__str, size_t *__idx = 0) 
# 6643
{ return __gnu_cxx::__stoa(&std::wcstod, "stod", __str.c_str(), __idx); } 
# 6646
inline long double stold(const wstring &__str, size_t *__idx = 0) 
# 6647
{ return __gnu_cxx::__stoa(&std::wcstold, "stold", __str.c_str(), __idx); } 
# 6652
inline wstring to_wstring(int __val) 
# 6653
{ return __gnu_cxx::__to_xstring< basic_string< wchar_t> > (&std::vswprintf, (4) * sizeof(int), L"\x25\x64", __val); 
# 6654
} 
# 6657
inline wstring to_wstring(unsigned __val) 
# 6658
{ return __gnu_cxx::__to_xstring< basic_string< wchar_t> > (&std::vswprintf, (4) * sizeof(unsigned), L"\x25\x75", __val); 
# 6660
} 
# 6663
inline wstring to_wstring(long __val) 
# 6664
{ return __gnu_cxx::__to_xstring< basic_string< wchar_t> > (&std::vswprintf, (4) * sizeof(long), L"\x25\x6c\x64", __val); 
# 6665
} 
# 6668
inline wstring to_wstring(unsigned long __val) 
# 6669
{ return __gnu_cxx::__to_xstring< basic_string< wchar_t> > (&std::vswprintf, (4) * sizeof(unsigned long), L"\x25\x6c\x75", __val); 
# 6671
} 
# 6674
inline wstring to_wstring(long long __val) 
# 6675
{ return __gnu_cxx::__to_xstring< basic_string< wchar_t> > (&std::vswprintf, (4) * sizeof(long long), L"\x25\x6c\x6c\x64", __val); 
# 6677
} 
# 6680
inline wstring to_wstring(unsigned long long __val) 
# 6681
{ return __gnu_cxx::__to_xstring< basic_string< wchar_t> > (&std::vswprintf, (4) * sizeof(unsigned long long), L"\x25\x6c\x6c\x75", __val); 
# 6683
} 
# 6686
inline wstring to_wstring(float __val) 
# 6687
{ 
# 6688
const int __n = (__gnu_cxx::__numeric_traits_floating< float> ::__max_exponent10 + 20); 
# 6690
return __gnu_cxx::__to_xstring< basic_string< wchar_t> > (&std::vswprintf, __n, L"\x25\x66", __val); 
# 6692
} 
# 6695
inline wstring to_wstring(double __val) 
# 6696
{ 
# 6697
const int __n = (__gnu_cxx::__numeric_traits_floating< double> ::__max_exponent10 + 20); 
# 6699
return __gnu_cxx::__to_xstring< basic_string< wchar_t> > (&std::vswprintf, __n, L"\x25\x66", __val); 
# 6701
} 
# 6704
inline wstring to_wstring(long double __val) 
# 6705
{ 
# 6706
const int __n = (__gnu_cxx::__numeric_traits_floating< long double> ::__max_exponent10 + 20); 
# 6708
return __gnu_cxx::__to_xstring< basic_string< wchar_t> > (&std::vswprintf, __n, L"\x25\x4c\x66", __val); 
# 6710
} 
# 6714
}
# 6716
}
# 37 "/usr/include/c++/9/bits/functional_hash.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 49 "/usr/include/c++/9/bits/functional_hash.h" 3
template< class _Result, class _Arg> 
# 50
struct __hash_base { 
# 52
typedef _Result result_type; 
# 53
typedef _Arg argument_type; 
# 54
}; 
# 57
template< class _Tp> struct hash; 
# 60
template< class _Tp, class  = void> 
# 61
struct __poison_hash { 
# 63
static constexpr bool __enable_hash_call = false; 
# 66
private: __poison_hash(__poison_hash &&); 
# 67
~__poison_hash(); 
# 68
}; 
# 70
template< class _Tp> 
# 71
struct __poison_hash< _Tp, __void_t< __decltype((hash< _Tp> ()(declval< _Tp> ())))> >  { 
# 73
static constexpr bool __enable_hash_call = true; 
# 74
}; 
# 77
template< class _Tp, bool  = is_enum< _Tp> ::value> 
# 78
struct __hash_enum { 
# 82
private: __hash_enum(__hash_enum &&); 
# 83
~__hash_enum(); 
# 84
}; 
# 87
template< class _Tp> 
# 88
struct __hash_enum< _Tp, true>  : public __hash_base< unsigned long, _Tp>  { 
# 91
std::size_t operator()(_Tp __val) const noexcept 
# 92
{ 
# 93
using __type = typename underlying_type< _Tp> ::type; 
# 94
return hash< typename underlying_type< _Tp> ::type> {}(static_cast< __type>(__val)); 
# 95
} 
# 96
}; 
# 100
template< class _Tp> 
# 101
struct hash : public __hash_enum< _Tp>  { 
# 102
}; 
# 105
template< class _Tp> 
# 106
struct hash< _Tp *>  : public __hash_base< unsigned long, _Tp *>  { 
# 109
std::size_t operator()(_Tp *__p) const noexcept 
# 110
{ return reinterpret_cast< std::size_t>(__p); } 
# 111
}; 
# 124 "/usr/include/c++/9/bits/functional_hash.h" 3
template<> struct hash< bool>  : public __hash_base< unsigned long, bool>  { size_t operator()(bool __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 127
template<> struct hash< char>  : public __hash_base< unsigned long, char>  { size_t operator()(char __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 130
template<> struct hash< signed char>  : public __hash_base< unsigned long, signed char>  { size_t operator()(signed char __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 133
template<> struct hash< unsigned char>  : public __hash_base< unsigned long, unsigned char>  { size_t operator()(unsigned char __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 136
template<> struct hash< wchar_t>  : public __hash_base< unsigned long, wchar_t>  { size_t operator()(wchar_t __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 144
template<> struct hash< char16_t>  : public __hash_base< unsigned long, char16_t>  { size_t operator()(char16_t __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 147
template<> struct hash< char32_t>  : public __hash_base< unsigned long, char32_t>  { size_t operator()(char32_t __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 150
template<> struct hash< short>  : public __hash_base< unsigned long, short>  { size_t operator()(short __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 153
template<> struct hash< int>  : public __hash_base< unsigned long, int>  { size_t operator()(int __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 156
template<> struct hash< long>  : public __hash_base< unsigned long, long>  { size_t operator()(long __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 159
template<> struct hash< long long>  : public __hash_base< unsigned long, long long>  { size_t operator()(long long __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 162
template<> struct hash< unsigned short>  : public __hash_base< unsigned long, unsigned short>  { size_t operator()(unsigned short __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 165
template<> struct hash< unsigned>  : public __hash_base< unsigned long, unsigned>  { size_t operator()(unsigned __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 168
template<> struct hash< unsigned long>  : public __hash_base< unsigned long, unsigned long>  { size_t operator()(unsigned long __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 171
template<> struct hash< unsigned long long>  : public __hash_base< unsigned long, unsigned long long>  { size_t operator()(unsigned long long __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 174
template<> struct hash< __int128>  : public __hash_base< unsigned long, __int128>  { size_t operator()(__int128 __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 175
template<> struct hash< unsigned __int128>  : public __hash_base< unsigned long, unsigned __int128>  { size_t operator()(unsigned __int128 __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 192 "/usr/include/c++/9/bits/functional_hash.h" 3
struct _Hash_impl { 
# 195
static size_t hash(const void *__ptr, size_t __clength, size_t 
# 196
__seed = static_cast< size_t>(3339675911UL)) 
# 197
{ return _Hash_bytes(__ptr, __clength, __seed); } 
# 199
template< class _Tp> static size_t 
# 201
hash(const _Tp &__val) 
# 202
{ return hash(&__val, sizeof(__val)); } 
# 204
template< class _Tp> static size_t 
# 206
__hash_combine(const _Tp &__val, size_t __hash) 
# 207
{ return hash(&__val, sizeof(__val), __hash); } 
# 208
}; 
# 211
struct _Fnv_hash_impl { 
# 214
static size_t hash(const void *__ptr, size_t __clength, size_t 
# 215
__seed = static_cast< size_t>(2166136261UL)) 
# 216
{ return _Fnv_hash_bytes(__ptr, __clength, __seed); } 
# 218
template< class _Tp> static size_t 
# 220
hash(const _Tp &__val) 
# 221
{ return hash(&__val, sizeof(__val)); } 
# 223
template< class _Tp> static size_t 
# 225
__hash_combine(const _Tp &__val, size_t __hash) 
# 226
{ return hash(&__val, sizeof(__val), __hash); } 
# 227
}; 
# 231
template<> struct hash< float>  : public __hash_base< unsigned long, float>  { 
# 234
size_t operator()(float __val) const noexcept 
# 235
{ 
# 237
return (__val != (0.0F)) ? std::_Hash_impl::hash(__val) : (0); 
# 238
} 
# 239
}; 
# 243
template<> struct hash< double>  : public __hash_base< unsigned long, double>  { 
# 246
size_t operator()(double __val) const noexcept 
# 247
{ 
# 249
return (__val != (0.0)) ? std::_Hash_impl::hash(__val) : (0); 
# 250
} 
# 251
}; 
# 255
template<> struct hash< long double>  : public __hash_base< unsigned long, long double>  { 
# 258
__attribute((__pure__)) size_t 
# 259
operator()(long double __val) const noexcept; 
# 260
}; 
# 278 "/usr/include/c++/9/bits/functional_hash.h" 3
template< class _Hash> 
# 279
struct __is_fast_hash : public true_type { 
# 280
}; 
# 283
template<> struct __is_fast_hash< hash< long double> >  : public false_type { 
# 284
}; 
# 287
}
# 6724 "/usr/include/c++/9/bits/basic_string.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 6733
template<> struct hash< __cxx11::basic_string< char> >  : public __hash_base< unsigned long, __cxx11::basic_string< char> >  { 
# 6737
size_t operator()(const string &__s) const noexcept 
# 6738
{ return std::_Hash_impl::hash(__s.data(), __s.length()); } 
# 6739
}; 
# 6742
template<> struct __is_fast_hash< hash< __cxx11::basic_string< char> > >  : public false_type { 
# 6743
}; 
# 6748
template<> struct hash< __cxx11::basic_string< wchar_t> >  : public __hash_base< unsigned long, __cxx11::basic_string< wchar_t> >  { 
# 6752
size_t operator()(const wstring &__s) const noexcept 
# 6753
{ return std::_Hash_impl::hash(__s.data(), __s.length() * sizeof(wchar_t)); 
# 6754
} 
# 6755
}; 
# 6758
template<> struct __is_fast_hash< hash< __cxx11::basic_string< wchar_t> > >  : public false_type { 
# 6759
}; 
# 6782 "/usr/include/c++/9/bits/basic_string.h" 3
template<> struct hash< __cxx11::basic_string< char16_t> >  : public __hash_base< unsigned long, __cxx11::basic_string< char16_t> >  { 
# 6786
size_t operator()(const u16string &__s) const noexcept 
# 6787
{ return std::_Hash_impl::hash(__s.data(), __s.length() * sizeof(char16_t)); 
# 6788
} 
# 6789
}; 
# 6792
template<> struct __is_fast_hash< hash< __cxx11::basic_string< char16_t> > >  : public false_type { 
# 6793
}; 
# 6797
template<> struct hash< __cxx11::basic_string< char32_t> >  : public __hash_base< unsigned long, __cxx11::basic_string< char32_t> >  { 
# 6801
size_t operator()(const u32string &__s) const noexcept 
# 6802
{ return std::_Hash_impl::hash(__s.data(), __s.length() * sizeof(char32_t)); 
# 6803
} 
# 6804
}; 
# 6807
template<> struct __is_fast_hash< hash< __cxx11::basic_string< char32_t> > >  : public false_type { 
# 6808
}; 
# 6814
inline namespace literals { 
# 6816
inline namespace string_literals { 
# 6818
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wliteral-suffix"
__attribute((__abi_tag__("cxx11"))) inline __cxx11::basic_string< char>  
# 6822
operator ""s(const char *__str, size_t __len) 
# 6823
{ return __cxx11::basic_string< char> {__str, __len}; } 
# 6826
__attribute((__abi_tag__("cxx11"))) inline __cxx11::basic_string< wchar_t>  
# 6828
operator ""s(const wchar_t *__str, size_t __len) 
# 6829
{ return __cxx11::basic_string< wchar_t> {__str, __len}; } 
# 6839 "/usr/include/c++/9/bits/basic_string.h" 3
__attribute((__abi_tag__("cxx11"))) inline __cxx11::basic_string< char16_t>  
# 6841
operator ""s(const char16_t *__str, size_t __len) 
# 6842
{ return __cxx11::basic_string< char16_t> {__str, __len}; } 
# 6844
__attribute((__abi_tag__("cxx11"))) inline __cxx11::basic_string< char32_t>  
# 6846
operator ""s(const char32_t *__str, size_t __len) 
# 6847
{ return __cxx11::basic_string< char32_t> {__str, __len}; } 
# 6849
#pragma GCC diagnostic pop
}
# 6851
}
# 6872 "/usr/include/c++/9/bits/basic_string.h" 3
}
# 46 "/usr/include/c++/9/bits/basic_string.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 52
template< class _CharT, class _Traits, class _Alloc> const typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type __cxx11::basic_string< _CharT, _Traits, _Alloc> ::npos; 
# 56
template< class _CharT, class _Traits, class _Alloc> void 
# 59
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::swap(basic_string &__s) noexcept 
# 60
{ 
# 61
if (this == (&__s)) { 
# 62
return; }  
# 64
_Alloc_traits::_S_on_swap(_M_get_allocator(), __s._M_get_allocator()); 
# 66
if (_M_is_local()) { 
# 67
if (__s._M_is_local()) 
# 68
{ 
# 69
if (length() && __s.length()) 
# 70
{ 
# 71
_CharT __tmp_data[_S_local_capacity + 1]; 
# 72
traits_type::copy(__tmp_data, __s._M_local_buf, _S_local_capacity + 1); 
# 74
traits_type::copy(__s._M_local_buf, _M_local_buf, _S_local_capacity + 1); 
# 76
traits_type::copy(_M_local_buf, __tmp_data, _S_local_capacity + 1); 
# 78
} else { 
# 79
if (__s.length()) 
# 80
{ 
# 81
traits_type::copy(_M_local_buf, __s._M_local_buf, _S_local_capacity + 1); 
# 83
_M_length(__s.length()); 
# 84
__s._M_set_length(0); 
# 85
return; 
# 86
} else { 
# 87
if (length()) 
# 88
{ 
# 89
traits_type::copy(__s._M_local_buf, _M_local_buf, _S_local_capacity + 1); 
# 91
__s._M_length(length()); 
# 92
_M_set_length(0); 
# 93
return; 
# 94
}  }  }  
# 95
} else 
# 97
{ 
# 98
const size_type __tmp_capacity = __s._M_allocated_capacity; 
# 99
traits_type::copy(__s._M_local_buf, _M_local_buf, _S_local_capacity + 1); 
# 101
_M_data(__s._M_data()); 
# 102
__s._M_data(__s._M_local_buf); 
# 103
_M_capacity(__tmp_capacity); 
# 104
}  } else 
# 106
{ 
# 107
const size_type __tmp_capacity = _M_allocated_capacity; 
# 108
if (__s._M_is_local()) 
# 109
{ 
# 110
traits_type::copy(_M_local_buf, __s._M_local_buf, _S_local_capacity + 1); 
# 112
__s._M_data(_M_data()); 
# 113
_M_data(_M_local_buf); 
# 114
} else 
# 116
{ 
# 117
pointer __tmp_ptr = _M_data(); 
# 118
_M_data(__s._M_data()); 
# 119
__s._M_data(__tmp_ptr); 
# 120
_M_capacity(__s._M_allocated_capacity); 
# 121
}  
# 122
__s._M_capacity(__tmp_capacity); 
# 123
}  
# 125
const size_type __tmp_length = length(); 
# 126
_M_length(__s.length()); 
# 127
__s._M_length(__tmp_length); 
# 128
} 
# 130
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::pointer 
# 133
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_create(size_type &__capacity, size_type __old_capacity) 
# 134
{ 
# 137
if (__capacity > max_size()) { 
# 138
std::__throw_length_error("basic_string::_M_create"); }  
# 143
if ((__capacity > __old_capacity) && (__capacity < (2 * __old_capacity))) 
# 144
{ 
# 145
__capacity = (2 * __old_capacity); 
# 147
if (__capacity > max_size()) { 
# 148
__capacity = max_size(); }  
# 149
}  
# 153
return _Alloc_traits::allocate(_M_get_allocator(), __capacity + 1); 
# 154
} 
# 160
template< class _CharT, class _Traits, class _Alloc> 
# 161
template< class _InIterator> void 
# 164
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_construct(_InIterator __beg, _InIterator __end, input_iterator_tag) 
# 166
{ 
# 167
size_type __len = (0); 
# 168
size_type __capacity = ((size_type)_S_local_capacity); 
# 170
while ((__beg != __end) && (__len < __capacity)) 
# 171
{ 
# 172
(_M_data()[__len++]) = (*__beg); 
# 173
++__beg; 
# 174
}  
# 176
try 
# 177
{ 
# 178
while (__beg != __end) 
# 179
{ 
# 180
if (__len == __capacity) 
# 181
{ 
# 183
__capacity = (__len + 1); 
# 184
pointer __another = _M_create(__capacity, __len); 
# 185
this->_S_copy(__another, _M_data(), __len); 
# 186
_M_dispose(); 
# 187
_M_data(__another); 
# 188
_M_capacity(__capacity); 
# 189
}  
# 190
(_M_data()[__len++]) = (*__beg); 
# 191
++__beg; 
# 192
}  
# 193
} 
# 194
catch (...) 
# 195
{ 
# 196
_M_dispose(); 
# 197
throw; 
# 198
}  
# 200
_M_set_length(__len); 
# 201
} 
# 203
template< class _CharT, class _Traits, class _Alloc> 
# 204
template< class _InIterator> void 
# 207
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_construct(_InIterator __beg, _InIterator __end, forward_iterator_tag) 
# 209
{ 
# 211
if (__gnu_cxx::__is_null_pointer(__beg) && (__beg != __end)) { 
# 212
std::__throw_logic_error("basic_string::_M_construct null not valid"); }  
# 215
size_type __dnew = static_cast< size_type>(std::distance(__beg, __end)); 
# 217
if (__dnew > ((size_type)_S_local_capacity)) 
# 218
{ 
# 219
_M_data(_M_create(__dnew, (size_type)0)); 
# 220
_M_capacity(__dnew); 
# 221
}  
# 224
try 
# 225
{ this->_S_copy_chars(_M_data(), __beg, __end); } 
# 226
catch (...) 
# 227
{ 
# 228
_M_dispose(); 
# 229
throw; 
# 230
}  
# 232
_M_set_length(__dnew); 
# 233
} 
# 235
template< class _CharT, class _Traits, class _Alloc> void 
# 238
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_construct(size_type __n, _CharT __c) 
# 239
{ 
# 240
if (__n > ((size_type)_S_local_capacity)) 
# 241
{ 
# 242
_M_data(_M_create(__n, (size_type)0)); 
# 243
_M_capacity(__n); 
# 244
}  
# 246
if (__n) { 
# 247
this->_S_assign(_M_data(), __n, __c); }  
# 249
_M_set_length(__n); 
# 250
} 
# 252
template< class _CharT, class _Traits, class _Alloc> void 
# 255
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_assign(const basic_string &__str) 
# 256
{ 
# 257
if (this != (&__str)) 
# 258
{ 
# 259
const size_type __rsize = __str.length(); 
# 260
const size_type __capacity = capacity(); 
# 262
if (__rsize > __capacity) 
# 263
{ 
# 264
size_type __new_capacity = __rsize; 
# 265
pointer __tmp = _M_create(__new_capacity, __capacity); 
# 266
_M_dispose(); 
# 267
_M_data(__tmp); 
# 268
_M_capacity(__new_capacity); 
# 269
}  
# 271
if (__rsize) { 
# 272
this->_S_copy(_M_data(), __str._M_data(), __rsize); }  
# 274
_M_set_length(__rsize); 
# 275
}  
# 276
} 
# 278
template< class _CharT, class _Traits, class _Alloc> void 
# 281
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::reserve(size_type __res) 
# 282
{ 
# 284
if (__res < length()) { 
# 285
__res = length(); }  
# 287
const size_type __capacity = capacity(); 
# 288
if (__res != __capacity) 
# 289
{ 
# 290
if ((__res > __capacity) || (__res > ((size_type)_S_local_capacity))) 
# 292
{ 
# 293
pointer __tmp = _M_create(__res, __capacity); 
# 294
this->_S_copy(__tmp, _M_data(), length() + 1); 
# 295
_M_dispose(); 
# 296
_M_data(__tmp); 
# 297
_M_capacity(__res); 
# 298
} else { 
# 299
if (!_M_is_local()) 
# 300
{ 
# 301
this->_S_copy(_M_local_data(), _M_data(), length() + 1); 
# 302
_M_destroy(__capacity); 
# 303
_M_data(_M_local_data()); 
# 304
}  }  
# 305
}  
# 306
} 
# 308
template< class _CharT, class _Traits, class _Alloc> void 
# 311
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_mutate(size_type __pos, size_type __len1, const _CharT *__s, size_type 
# 312
__len2) 
# 313
{ 
# 314
const size_type __how_much = (length() - __pos) - __len1; 
# 316
size_type __new_capacity = (length() + __len2) - __len1; 
# 317
pointer __r = _M_create(__new_capacity, capacity()); 
# 319
if (__pos) { 
# 320
this->_S_copy(__r, _M_data(), __pos); }  
# 321
if (__s && __len2) { 
# 322
this->_S_copy(__r + __pos, __s, __len2); }  
# 323
if (__how_much) { 
# 324
this->_S_copy((__r + __pos) + __len2, (_M_data() + __pos) + __len1, __how_much); }  
# 327
_M_dispose(); 
# 328
_M_data(__r); 
# 329
_M_capacity(__new_capacity); 
# 330
} 
# 332
template< class _CharT, class _Traits, class _Alloc> void 
# 335
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_erase(size_type __pos, size_type __n) 
# 336
{ 
# 337
const size_type __how_much = (length() - __pos) - __n; 
# 339
if (__how_much && __n) { 
# 340
this->_S_move(_M_data() + __pos, (_M_data() + __pos) + __n, __how_much); }  
# 342
_M_set_length(length() - __n); 
# 343
} 
# 345
template< class _CharT, class _Traits, class _Alloc> void 
# 348
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::resize(size_type __n, _CharT __c) 
# 349
{ 
# 350
const size_type __size = size(); 
# 351
if (__size < __n) { 
# 352
this->append(__n - __size, __c); } else { 
# 353
if (__n < __size) { 
# 354
_M_set_length(__n); }  }  
# 355
} 
# 357
template< class _CharT, class _Traits, class _Alloc> __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 360
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_append(const _CharT *__s, size_type __n) 
# 361
{ 
# 362
const size_type __len = __n + size(); 
# 364
if (__len <= capacity()) 
# 365
{ 
# 366
if (__n) { 
# 367
this->_S_copy(this->_M_data() + size(), __s, __n); }  
# 368
} else { 
# 370
_M_mutate(size(), (size_type)0, __s, __n); }  
# 372
_M_set_length(__len); 
# 373
return *this; 
# 374
} 
# 376
template< class _CharT, class _Traits, class _Alloc> 
# 377
template< class _InputIterator> __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 380
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_replace_dispatch(const_iterator __i1, const_iterator __i2, _InputIterator 
# 381
__k1, _InputIterator __k2, __false_type) 
# 383
{ 
# 384
const basic_string __s(__k1, __k2); 
# 385
const size_type __n1 = __i2 - __i1; 
# 386
return _M_replace(__i1 - begin(), __n1, __s._M_data(), __s.size()); 
# 388
} 
# 390
template< class _CharT, class _Traits, class _Alloc> __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 393
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_replace_aux(size_type __pos1, size_type __n1, size_type __n2, _CharT 
# 394
__c) 
# 395
{ 
# 396
_M_check_length(__n1, __n2, "basic_string::_M_replace_aux"); 
# 398
const size_type __old_size = size(); 
# 399
const size_type __new_size = (__old_size + __n2) - __n1; 
# 401
if (__new_size <= capacity()) 
# 402
{ 
# 403
pointer __p = this->_M_data() + __pos1; 
# 405
const size_type __how_much = (__old_size - __pos1) - __n1; 
# 406
if (__how_much && (__n1 != __n2)) { 
# 407
this->_S_move(__p + __n2, __p + __n1, __how_much); }  
# 408
} else { 
# 410
_M_mutate(__pos1, __n1, 0, __n2); }  
# 412
if (__n2) { 
# 413
this->_S_assign(this->_M_data() + __pos1, __n2, __c); }  
# 415
_M_set_length(__new_size); 
# 416
return *this; 
# 417
} 
# 419
template< class _CharT, class _Traits, class _Alloc> __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 422
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_replace(size_type __pos, size_type __len1, const _CharT *__s, const size_type 
# 423
__len2) 
# 424
{ 
# 425
_M_check_length(__len1, __len2, "basic_string::_M_replace"); 
# 427
const size_type __old_size = size(); 
# 428
const size_type __new_size = (__old_size + __len2) - __len1; 
# 430
if (__new_size <= capacity()) 
# 431
{ 
# 432
pointer __p = this->_M_data() + __pos; 
# 434
const size_type __how_much = (__old_size - __pos) - __len1; 
# 435
if (_M_disjunct(__s)) 
# 436
{ 
# 437
if (__how_much && (__len1 != __len2)) { 
# 438
this->_S_move(__p + __len2, __p + __len1, __how_much); }  
# 439
if (__len2) { 
# 440
this->_S_copy(__p, __s, __len2); }  
# 441
} else 
# 443
{ 
# 445
if (__len2 && (__len2 <= __len1)) { 
# 446
this->_S_move(__p, __s, __len2); }  
# 447
if (__how_much && (__len1 != __len2)) { 
# 448
this->_S_move(__p + __len2, __p + __len1, __how_much); }  
# 449
if (__len2 > __len1) 
# 450
{ 
# 451
if ((__s + __len2) <= (__p + __len1)) { 
# 452
this->_S_move(__p, __s, __len2); } else { 
# 453
if (__s >= (__p + __len1)) { 
# 454
this->_S_copy(__p, (__s + __len2) - __len1, __len2); } else 
# 456
{ 
# 457
const size_type __nleft = (__p + __len1) - __s; 
# 458
this->_S_move(__p, __s, __nleft); 
# 459
this->_S_copy(__p + __nleft, __p + __len2, __len2 - __nleft); 
# 461
}  }  
# 462
}  
# 463
}  
# 464
} else { 
# 466
_M_mutate(__pos, __len1, __s, __len2); }  
# 468
_M_set_length(__new_size); 
# 469
return *this; 
# 470
} 
# 472
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 475
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::copy(_CharT *__s, size_type __n, size_type __pos) const 
# 476
{ 
# 477
_M_check(__pos, "basic_string::copy"); 
# 478
__n = _M_limit(__pos, __n); 
# 479
; 
# 480
if (__n) { 
# 481
(_S_copy)(__s, _M_data() + __pos, __n); }  
# 483
return __n; 
# 484
} 
# 1156 "/usr/include/c++/9/bits/basic_string.tcc" 3
template< class _CharT, class _Traits, class _Alloc> __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 1158
operator+(const _CharT *__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 1159
__rhs) 
# 1160
{ 
# 1161
; 
# 1162
typedef __cxx11::basic_string< _CharT, _Traits, _Alloc>  __string_type; 
# 1163
typedef typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type __size_type; 
# 1164
const __size_type __len = _Traits::length(__lhs); 
# 1165
__string_type __str; 
# 1166
__str.reserve(__len + __rhs.size()); 
# 1167
__str.append(__lhs, __len); 
# 1168
__str.append(__rhs); 
# 1169
return __str; 
# 1170
} 
# 1172
template< class _CharT, class _Traits, class _Alloc> __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 1174
operator+(_CharT __lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__rhs) 
# 1175
{ 
# 1176
typedef __cxx11::basic_string< _CharT, _Traits, _Alloc>  __string_type; 
# 1177
typedef typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type __size_type; 
# 1178
__string_type __str; 
# 1179
const __size_type __len = __rhs.size(); 
# 1180
__str.reserve(__len + 1); 
# 1181
__str.append((__size_type)1, __lhs); 
# 1182
__str.append(__rhs); 
# 1183
return __str; 
# 1184
} 
# 1186
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 1189
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::find(const _CharT *__s, size_type __pos, size_type __n) const noexcept 
# 1191
{ 
# 1192
; 
# 1193
const size_type __size = size(); 
# 1195
if (__n == 0) { 
# 1196
return (__pos <= __size) ? __pos : npos; }  
# 1197
if (__pos >= __size) { 
# 1198
return npos; }  
# 1200
const _CharT __elem0 = __s[0]; 
# 1201
const _CharT *const __data = data(); 
# 1202
const _CharT *__first = __data + __pos; 
# 1203
const _CharT *const __last = __data + __size; 
# 1204
size_type __len = __size - __pos; 
# 1206
while (__len >= __n) 
# 1207
{ 
# 1209
__first = traits_type::find(__first, (__len - __n) + 1, __elem0); 
# 1210
if (!__first) { 
# 1211
return npos; }  
# 1215
if (traits_type::compare(__first, __s, __n) == 0) { 
# 1216
return __first - __data; }  
# 1217
__len = (__last - (++__first)); 
# 1218
}  
# 1219
return npos; 
# 1220
} 
# 1222
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 1225
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::find(_CharT __c, size_type __pos) const noexcept 
# 1226
{ 
# 1227
size_type __ret = npos; 
# 1228
const size_type __size = size(); 
# 1229
if (__pos < __size) 
# 1230
{ 
# 1231
const _CharT *__data = _M_data(); 
# 1232
const size_type __n = __size - __pos; 
# 1233
const _CharT *__p = traits_type::find(__data + __pos, __n, __c); 
# 1234
if (__p) { 
# 1235
__ret = (__p - __data); }  
# 1236
}  
# 1237
return __ret; 
# 1238
} 
# 1240
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 1243
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::rfind(const _CharT *__s, size_type __pos, size_type __n) const noexcept 
# 1245
{ 
# 1246
; 
# 1247
const size_type __size = size(); 
# 1248
if (__n <= __size) 
# 1249
{ 
# 1250
__pos = std::min((size_type)(__size - __n), __pos); 
# 1251
const _CharT *__data = _M_data(); 
# 1252
do 
# 1253
{ 
# 1254
if (traits_type::compare(__data + __pos, __s, __n) == 0) { 
# 1255
return __pos; }  
# 1256
} 
# 1257
while ((__pos--) > 0); 
# 1258
}  
# 1259
return npos; 
# 1260
} 
# 1262
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 1265
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::rfind(_CharT __c, size_type __pos) const noexcept 
# 1266
{ 
# 1267
size_type __size = size(); 
# 1268
if (__size) 
# 1269
{ 
# 1270
if ((--__size) > __pos) { 
# 1271
__size = __pos; }  
# 1272
for (++__size; (__size--) > 0;) { 
# 1273
if (traits_type::eq(_M_data()[__size], __c)) { 
# 1274
return __size; }  }  
# 1275
}  
# 1276
return npos; 
# 1277
} 
# 1279
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 1282
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::find_first_of(const _CharT *__s, size_type __pos, size_type __n) const noexcept 
# 1284
{ 
# 1285
; 
# 1286
for (; __n && (__pos < size()); ++__pos) 
# 1287
{ 
# 1288
const _CharT *__p = traits_type::find(__s, __n, _M_data()[__pos]); 
# 1289
if (__p) { 
# 1290
return __pos; }  
# 1291
}  
# 1292
return npos; 
# 1293
} 
# 1295
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 1298
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::find_last_of(const _CharT *__s, size_type __pos, size_type __n) const noexcept 
# 1300
{ 
# 1301
; 
# 1302
size_type __size = size(); 
# 1303
if (__size && __n) 
# 1304
{ 
# 1305
if ((--__size) > __pos) { 
# 1306
__size = __pos; }  
# 1307
do 
# 1308
{ 
# 1309
if (traits_type::find(__s, __n, _M_data()[__size])) { 
# 1310
return __size; }  
# 1311
} 
# 1312
while ((__size--) != 0); 
# 1313
}  
# 1314
return npos; 
# 1315
} 
# 1317
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 1320
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::find_first_not_of(const _CharT *__s, size_type __pos, size_type __n) const noexcept 
# 1322
{ 
# 1323
; 
# 1324
for (; __pos < size(); ++__pos) { 
# 1325
if (!traits_type::find(__s, __n, _M_data()[__pos])) { 
# 1326
return __pos; }  }  
# 1327
return npos; 
# 1328
} 
# 1330
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 1333
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::find_first_not_of(_CharT __c, size_type __pos) const noexcept 
# 1334
{ 
# 1335
for (; __pos < size(); ++__pos) { 
# 1336
if (!traits_type::eq(_M_data()[__pos], __c)) { 
# 1337
return __pos; }  }  
# 1338
return npos; 
# 1339
} 
# 1341
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 1344
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::find_last_not_of(const _CharT *__s, size_type __pos, size_type __n) const noexcept 
# 1346
{ 
# 1347
; 
# 1348
size_type __size = size(); 
# 1349
if (__size) 
# 1350
{ 
# 1351
if ((--__size) > __pos) { 
# 1352
__size = __pos; }  
# 1353
do 
# 1354
{ 
# 1355
if (!traits_type::find(__s, __n, _M_data()[__size])) { 
# 1356
return __size; }  
# 1357
} 
# 1358
while (__size--); 
# 1359
}  
# 1360
return npos; 
# 1361
} 
# 1363
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 1366
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::find_last_not_of(_CharT __c, size_type __pos) const noexcept 
# 1367
{ 
# 1368
size_type __size = size(); 
# 1369
if (__size) 
# 1370
{ 
# 1371
if ((--__size) > __pos) { 
# 1372
__size = __pos; }  
# 1373
do 
# 1374
{ 
# 1375
if (!traits_type::eq(_M_data()[__size], __c)) { 
# 1376
return __size; }  
# 1377
} 
# 1378
while (__size--); 
# 1379
}  
# 1380
return npos; 
# 1381
} 
# 1383
template< class _CharT, class _Traits, class _Alloc> int 
# 1386
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::compare(size_type __pos, size_type __n, const basic_string &__str) const 
# 1387
{ 
# 1388
_M_check(__pos, "basic_string::compare"); 
# 1389
__n = _M_limit(__pos, __n); 
# 1390
const size_type __osize = __str.size(); 
# 1391
const size_type __len = std::min(__n, __osize); 
# 1392
int __r = traits_type::compare(_M_data() + __pos, __str.data(), __len); 
# 1393
if (!__r) { 
# 1394
__r = (_S_compare)(__n, __osize); }  
# 1395
return __r; 
# 1396
} 
# 1398
template< class _CharT, class _Traits, class _Alloc> int 
# 1401
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::compare(size_type __pos1, size_type __n1, const basic_string &__str, size_type 
# 1402
__pos2, size_type __n2) const 
# 1403
{ 
# 1404
_M_check(__pos1, "basic_string::compare"); 
# 1405
__str._M_check(__pos2, "basic_string::compare"); 
# 1406
__n1 = _M_limit(__pos1, __n1); 
# 1407
__n2 = __str._M_limit(__pos2, __n2); 
# 1408
const size_type __len = std::min(__n1, __n2); 
# 1409
int __r = traits_type::compare(_M_data() + __pos1, __str.data() + __pos2, __len); 
# 1411
if (!__r) { 
# 1412
__r = (_S_compare)(__n1, __n2); }  
# 1413
return __r; 
# 1414
} 
# 1416
template< class _CharT, class _Traits, class _Alloc> int 
# 1419
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::compare(const _CharT *__s) const noexcept 
# 1420
{ 
# 1421
; 
# 1422
const size_type __size = size(); 
# 1423
const size_type __osize = traits_type::length(__s); 
# 1424
const size_type __len = std::min(__size, __osize); 
# 1425
int __r = traits_type::compare(_M_data(), __s, __len); 
# 1426
if (!__r) { 
# 1427
__r = (_S_compare)(__size, __osize); }  
# 1428
return __r; 
# 1429
} 
# 1431
template< class _CharT, class _Traits, class _Alloc> int 
# 1434
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::compare(size_type __pos, size_type __n1, const _CharT *__s) const 
# 1435
{ 
# 1436
; 
# 1437
_M_check(__pos, "basic_string::compare"); 
# 1438
__n1 = _M_limit(__pos, __n1); 
# 1439
const size_type __osize = traits_type::length(__s); 
# 1440
const size_type __len = std::min(__n1, __osize); 
# 1441
int __r = traits_type::compare(_M_data() + __pos, __s, __len); 
# 1442
if (!__r) { 
# 1443
__r = (_S_compare)(__n1, __osize); }  
# 1444
return __r; 
# 1445
} 
# 1447
template< class _CharT, class _Traits, class _Alloc> int 
# 1450
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::compare(size_type __pos, size_type __n1, const _CharT *__s, size_type 
# 1451
__n2) const 
# 1452
{ 
# 1453
; 
# 1454
_M_check(__pos, "basic_string::compare"); 
# 1455
__n1 = _M_limit(__pos, __n1); 
# 1456
const size_type __len = std::min(__n1, __n2); 
# 1457
int __r = traits_type::compare(_M_data() + __pos, __s, __len); 
# 1458
if (!__r) { 
# 1459
__r = (_S_compare)(__n1, __n2); }  
# 1460
return __r; 
# 1461
} 
# 1464
template< class _CharT, class _Traits, class _Alloc> basic_istream< _CharT, _Traits>  &
# 1466
operator>>(basic_istream< _CharT, _Traits>  &__in, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 1467
__str) 
# 1468
{ 
# 1469
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 1470
typedef __cxx11::basic_string< _CharT, _Traits, _Alloc>  __string_type; 
# 1471
typedef typename basic_istream< _CharT, _Traits> ::ios_base __ios_base; 
# 1472
typedef typename basic_istream< _CharT, _Traits> ::int_type __int_type; 
# 1473
typedef typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type __size_type; 
# 1474
typedef ctype< _CharT>  __ctype_type; 
# 1475
typedef typename ctype< _CharT> ::ctype_base __ctype_base; 
# 1477
__size_type __extracted = (0); 
# 1478
typename basic_istream< _CharT, _Traits> ::ios_base::iostate __err = (__ios_base::goodbit); 
# 1479
typename basic_istream< _CharT, _Traits> ::sentry __cerb(__in, false); 
# 1480
if (__cerb) 
# 1481
{ 
# 1482
try 
# 1483
{ 
# 1485
__str.erase(); 
# 1486
_CharT __buf[128]; 
# 1487
__size_type __len = (0); 
# 1488
const streamsize __w = __in.width(); 
# 1489
const __size_type __n = (__w > (0)) ? static_cast< __size_type>(__w) : __str.max_size(); 
# 1491
const __ctype_type &__ct = use_facet< ctype< _CharT> > (__in.getloc()); 
# 1492
const __int_type __eof = _Traits::eof(); 
# 1493
__int_type __c = __in.rdbuf()->sgetc(); 
# 1495
while ((__extracted < __n) && (!_Traits::eq_int_type(__c, __eof)) && (!__ct.is(__ctype_base::space, _Traits::to_char_type(__c)))) 
# 1499
{ 
# 1500
if (__len == (sizeof(__buf) / sizeof(_CharT))) 
# 1501
{ 
# 1502
__str.append(__buf, sizeof(__buf) / sizeof(_CharT)); 
# 1503
__len = 0; 
# 1504
}  
# 1505
(__buf[__len++]) = _Traits::to_char_type(__c); 
# 1506
++__extracted; 
# 1507
__c = __in.rdbuf()->snextc(); 
# 1508
}  
# 1509
__str.append(__buf, __len); 
# 1511
if (_Traits::eq_int_type(__c, __eof)) { 
# 1512
__err |= __ios_base::eofbit; }  
# 1513
__in.width(0); 
# 1514
} 
# 1515
catch (__cxxabiv1::__forced_unwind &) 
# 1516
{ 
# 1517
__in._M_setstate(__ios_base::badbit); 
# 1518
throw; 
# 1519
} 
# 1520
catch (...) 
# 1521
{ 
# 1525
__in._M_setstate(__ios_base::badbit); 
# 1526
}  
# 1527
}  
# 1529
if (!__extracted) { 
# 1530
__err |= __ios_base::failbit; }  
# 1531
if (__err) { 
# 1532
__in.setstate(__err); }  
# 1533
return __in; 
# 1534
} 
# 1536
template< class _CharT, class _Traits, class _Alloc> basic_istream< _CharT, _Traits>  &
# 1538
getline(basic_istream< _CharT, _Traits>  &__in, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 1539
__str, _CharT __delim) 
# 1540
{ 
# 1541
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 1542
typedef __cxx11::basic_string< _CharT, _Traits, _Alloc>  __string_type; 
# 1543
typedef typename basic_istream< _CharT, _Traits> ::ios_base __ios_base; 
# 1544
typedef typename basic_istream< _CharT, _Traits> ::int_type __int_type; 
# 1545
typedef typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type __size_type; 
# 1547
__size_type __extracted = (0); 
# 1548
const __size_type __n = __str.max_size(); 
# 1549
typename basic_istream< _CharT, _Traits> ::ios_base::iostate __err = (__ios_base::goodbit); 
# 1550
typename basic_istream< _CharT, _Traits> ::sentry __cerb(__in, true); 
# 1551
if (__cerb) 
# 1552
{ 
# 1553
try 
# 1554
{ 
# 1555
__str.erase(); 
# 1556
const __int_type __idelim = _Traits::to_int_type(__delim); 
# 1557
const __int_type __eof = _Traits::eof(); 
# 1558
__int_type __c = __in.rdbuf()->sgetc(); 
# 1560
while ((__extracted < __n) && (!_Traits::eq_int_type(__c, __eof)) && (!_Traits::eq_int_type(__c, __idelim))) 
# 1563
{ 
# 1564
__str += _Traits::to_char_type(__c); 
# 1565
++__extracted; 
# 1566
__c = __in.rdbuf()->snextc(); 
# 1567
}  
# 1569
if (_Traits::eq_int_type(__c, __eof)) { 
# 1570
__err |= __ios_base::eofbit; } else { 
# 1571
if (_Traits::eq_int_type(__c, __idelim)) 
# 1572
{ 
# 1573
++__extracted; 
# 1574
__in.rdbuf()->sbumpc(); 
# 1575
} else { 
# 1577
__err |= __ios_base::failbit; }  }  
# 1578
} 
# 1579
catch (__cxxabiv1::__forced_unwind &) 
# 1580
{ 
# 1581
__in._M_setstate(__ios_base::badbit); 
# 1582
throw; 
# 1583
} 
# 1584
catch (...) 
# 1585
{ 
# 1589
__in._M_setstate(__ios_base::badbit); 
# 1590
}  
# 1591
}  
# 1592
if (!__extracted) { 
# 1593
__err |= __ios_base::failbit; }  
# 1594
if (__err) { 
# 1595
__in.setstate(__err); }  
# 1596
return __in; 
# 1597
} 
# 1608 "/usr/include/c++/9/bits/basic_string.tcc" 3
extern template class __cxx11::basic_string< char> ;
# 1616
extern template basic_istream< char>  &operator>>(basic_istream< char>  & __is, __cxx11::basic_string< char>  & __str);
# 1619
extern template basic_ostream< char>  &operator<<(basic_ostream< char>  & __os, const __cxx11::basic_string< char>  & __str);
# 1622
extern template basic_istream< char>  &getline(basic_istream< char>  & __is, __cxx11::basic_string< char>  & __str, char __delim);
# 1625
extern template basic_istream< char>  &getline(basic_istream< char>  & __is, __cxx11::basic_string< char>  & __str);
# 1631
extern template class __cxx11::basic_string< wchar_t> ;
# 1637
extern template basic_istream< wchar_t>  &operator>>(basic_istream< wchar_t>  & __is, __cxx11::basic_string< wchar_t>  & __str);
# 1640
extern template basic_ostream< wchar_t>  &operator<<(basic_ostream< wchar_t>  & __os, const __cxx11::basic_string< wchar_t>  & __str);
# 1643
extern template basic_istream< wchar_t>  &getline(basic_istream< wchar_t>  & __is, __cxx11::basic_string< wchar_t>  & __str, wchar_t __delim);
# 1646
extern template basic_istream< wchar_t>  &getline(basic_istream< wchar_t>  & __is, __cxx11::basic_string< wchar_t>  & __str);
# 1653
}
# 71 "/usr/include/c++/9/cstring" 3
extern "C++" {
# 73
namespace std __attribute((__visibility__("default"))) { 
# 77
using ::memchr;
# 78
using ::memcmp;
# 79
using ::memcpy;
# 80
using ::memmove;
# 81
using ::memset;
# 82
using ::strcat;
# 83
using ::strcmp;
# 84
using ::strcoll;
# 85
using ::strcpy;
# 86
using ::strcspn;
# 87
using ::strerror;
# 88
using ::strlen;
# 89
using ::strncat;
# 90
using ::strncmp;
# 91
using ::strncpy;
# 92
using ::strspn;
# 93
using ::strtok;
# 94
using ::strxfrm;
# 95
using ::strchr;
# 96
using ::strpbrk;
# 97
using ::strrchr;
# 98
using ::strstr;
# 123 "/usr/include/c++/9/cstring" 3
}
# 124
}
# 17 "./include/util_prints.h"
struct print_info_data_t { 
# 19
unsigned d_size; 
# 20
unsigned k_size; 
# 21
unsigned Nb; 
# 22
unsigned Nk; 
# 23
unsigned Nr; 
# 24
bool csv_mode; 
# 25
bool extended_csv_mode; 
# 26
bool print_output; 
# 27
bool database_mode; 
# 28
bool verbose_print; 
# 29
bool random_data; 
# 30
char *input_folder; 
# 31
char *output_file; 
# 32
bool no_output_file; 
# 33
}; 
# 35
void print_device_info(print_info_data_t * print_info_data, char * device_name); 
# 40
void print_benchmark_info(print_info_data_t * print_info_data); 
# 45
void print_execution_info(print_info_data_t * print_info_data, bool include_memory_transfer, long timestamp, float host_to_device_time, float execution_time, float device_to_host_time); 
# 20 "./include/device.h"
typedef 
# 16
enum { 
# 17
AES_KEY128 = 128, 
# 18
AES_KEY192 = 192, 
# 19
AES_KEY256 = 256
# 20
} AES_keysize_t; 
# 34
typedef 
# 28
struct { 
# 29
uint8_t *value; 
# 30
AES_keysize_t size; 
# 31
uint32_t Nb; 
# 32
uint32_t Nk; 
# 33
uint32_t Nr; 
# 34
} AES_key_t; 
# 36
struct AES_values_t { 
# 38
AES_key_t *key; 
# 39
uint8_t *plaintext; 
# 40
size_t data_length; 
# 41
uint8_t *expanded_key; 
# 42
uint8_t *cyphertext; 
# 43
uint8_t *iv; 
# 44
uint8_t *sbox; 
# 45
uint8_t *rcon; 
# 46
}; 
# 48
struct AES_data_t { 
# 49
AES_values_t *host; 
# 50
AES_key_t *host_key; 
# 51
AES_values_t *dev; 
# 52
}; 
# 62
typedef 
# 55
struct { 
# 56
cudaEvent_t *start; 
# 57
cudaEvent_t *stop; 
# 58
cudaEvent_t *start_memory_copy_device; 
# 59
cudaEvent_t *stop_memory_copy_device; 
# 60
cudaEvent_t *start_memory_copy_host; 
# 61
cudaEvent_t *stop_memory_copy_host; 
# 62
} AES_time_t; 
# 201 "./include/device.h"
void init(AES_data_t * AES_data, AES_time_t * t, char * device_name); 
# 210
void init(AES_data_t * AES_data, AES_time_t * t, int platform, int device, char * device_name); 
# 221
bool device_memory_init(AES_data_t * AES_data, unsigned key_size, unsigned data_length); 
# 230
void copy_memory_to_device(AES_data_t * AES_data, AES_time_t * t, uint8_t * input_key, uint8_t * input_text, uint8_t * input_iv, uint8_t * input_sbox, uint8_t * input_rcon); 
# 243
void process_benchmark(AES_data_t * AES_data, AES_time_t * t); 
# 251
void copy_memory_to_host(AES_data_t * AES_data, AES_time_t * t, uint8_t * output); 
# 260
void get_elapsed_time(AES_time_t * t, print_info_data_t * benchmark_info, long timestamp); 
# 270
void clean(AES_data_t * AES_data, AES_time_t * t); 
# 39 "/usr/lib/gcc/aarch64-linux-gnu/9/include/omp.h" 3
typedef 
# 36
struct { 
# 37
unsigned char _x[4]
# 38
 __attribute((__aligned__(4))); 
# 39
} omp_lock_t; 
# 56
typedef 
# 42
struct { 
# 50
unsigned char _x[(8) + sizeof(void *)]
# 51
 __attribute((__aligned__(sizeof(void *)))); 
# 56
} omp_nest_lock_t; 
# 66
typedef 
# 59
enum omp_sched_t { 
# 61
omp_sched_static = 1U, 
# 62
omp_sched_dynamic, 
# 63
omp_sched_guided, 
# 64
omp_sched_auto, 
# 65
omp_sched_monotonic = 2147483648U
# 66
} omp_sched_t; 
# 75
typedef 
# 68
enum omp_proc_bind_t { 
# 70
omp_proc_bind_false, 
# 71
omp_proc_bind_true, 
# 72
omp_proc_bind_master, 
# 73
omp_proc_bind_close, 
# 74
omp_proc_bind_spread
# 75
} omp_proc_bind_t; 
# 89
typedef 
# 77
enum omp_sync_hint_t { 
# 79
omp_sync_hint_none, 
# 80
omp_lock_hint_none = omp_sync_hint_none, 
# 81
omp_sync_hint_uncontended, 
# 82
omp_lock_hint_uncontended = omp_sync_hint_uncontended, 
# 83
omp_sync_hint_contended, 
# 84
omp_lock_hint_contended = omp_sync_hint_contended, 
# 85
omp_sync_hint_nonspeculative = 4, 
# 86
omp_lock_hint_nonspeculative = omp_sync_hint_nonspeculative, 
# 87
omp_sync_hint_speculative = 8, 
# 88
omp_lock_hint_speculative = omp_sync_hint_speculative
# 89
} omp_sync_hint_t; 
# 91
typedef omp_sync_hint_t omp_lock_hint_t; 
# 96
typedef 
# 93
struct __attribute((__aligned__(sizeof(void *)))) omp_depend_t { 
# 95
char __omp_depend_t__[(2) * sizeof(void *)]; 
# 96
} omp_depend_t; 
# 102
typedef 
# 98
enum omp_pause_resource_t { 
# 100
omp_pause_soft = 1, 
# 101
omp_pause_hard
# 102
} omp_pause_resource_t; 
# 105
extern "C" {
# 111
extern void omp_set_num_threads(int) throw(); 
# 112
extern int omp_get_num_threads() throw(); 
# 113
extern int omp_get_max_threads() throw(); 
# 114
extern int omp_get_thread_num() throw(); 
# 115
extern int omp_get_num_procs() throw(); 
# 117
extern int omp_in_parallel() throw(); 
# 119
extern void omp_set_dynamic(int) throw(); 
# 120
extern int omp_get_dynamic() throw(); 
# 122
extern void omp_set_nested(int) throw(); 
# 123
extern int omp_get_nested() throw(); 
# 125
extern void omp_init_lock(omp_lock_t *) throw(); 
# 126
extern void omp_init_lock_with_hint(omp_lock_t *, omp_sync_hint_t) throw(); 
# 128
extern void omp_destroy_lock(omp_lock_t *) throw(); 
# 129
extern void omp_set_lock(omp_lock_t *) throw(); 
# 130
extern void omp_unset_lock(omp_lock_t *) throw(); 
# 131
extern int omp_test_lock(omp_lock_t *) throw(); 
# 133
extern void omp_init_nest_lock(omp_nest_lock_t *) throw(); 
# 134
extern void omp_init_nest_lock_with_hint(omp_nest_lock_t *, omp_sync_hint_t) throw(); 
# 136
extern void omp_destroy_nest_lock(omp_nest_lock_t *) throw(); 
# 137
extern void omp_set_nest_lock(omp_nest_lock_t *) throw(); 
# 138
extern void omp_unset_nest_lock(omp_nest_lock_t *) throw(); 
# 139
extern int omp_test_nest_lock(omp_nest_lock_t *) throw(); 
# 141
extern double omp_get_wtime() throw(); 
# 142
extern double omp_get_wtick() throw(); 
# 144
extern void omp_set_schedule(omp_sched_t, int) throw(); 
# 145
extern void omp_get_schedule(omp_sched_t *, int *) throw(); 
# 146
extern int omp_get_thread_limit() throw(); 
# 147
extern void omp_set_max_active_levels(int) throw(); 
# 148
extern int omp_get_max_active_levels() throw(); 
# 149
extern int omp_get_level() throw(); 
# 150
extern int omp_get_ancestor_thread_num(int) throw(); 
# 151
extern int omp_get_team_size(int) throw(); 
# 152
extern int omp_get_active_level() throw(); 
# 154
extern int omp_in_final() throw(); 
# 156
extern int omp_get_cancellation() throw(); 
# 157
extern omp_proc_bind_t omp_get_proc_bind() throw(); 
# 158
extern int omp_get_num_places() throw(); 
# 159
extern int omp_get_place_num_procs(int) throw(); 
# 160
extern void omp_get_place_proc_ids(int, int *) throw(); 
# 161
extern int omp_get_place_num() throw(); 
# 162
extern int omp_get_partition_num_places() throw(); 
# 163
extern void omp_get_partition_place_nums(int *) throw(); 
# 165
extern void omp_set_default_device(int) throw(); 
# 166
extern int omp_get_default_device() throw(); 
# 167
extern int omp_get_num_devices() throw(); 
# 168
extern int omp_get_num_teams() throw(); 
# 169
extern int omp_get_team_num() throw(); 
# 171
extern int omp_is_initial_device() throw(); 
# 172
extern int omp_get_initial_device() throw(); 
# 173
extern int omp_get_max_task_priority() throw(); 
# 175
extern void *omp_target_alloc(unsigned long, int) throw(); 
# 176
extern void omp_target_free(void *, int) throw(); 
# 177
extern int omp_target_is_present(const void *, int) throw(); 
# 178
extern int omp_target_memcpy(void *, const void *, unsigned long, unsigned long, unsigned long, int, int) throw(); 
# 181
extern int omp_target_memcpy_rect(void *, const void *, unsigned long, int, const unsigned long *, const unsigned long *, const unsigned long *, const unsigned long *, const unsigned long *, int, int) throw(); 
# 188
extern int omp_target_associate_ptr(const void *, const void *, unsigned long, unsigned long, int) throw(); 
# 190
extern int omp_target_disassociate_ptr(const void *, int) throw(); 
# 192
extern void omp_set_affinity_format(const char *) throw(); 
# 193
extern unsigned long omp_get_affinity_format(char *, unsigned long) throw(); 
# 195
extern void omp_display_affinity(const char *) throw(); 
# 196
extern unsigned long omp_capture_affinity(char *, unsigned long, const char *) throw(); 
# 199
extern int omp_pause_resource(omp_pause_resource_t, int) throw(); 
# 200
extern int omp_pause_resource_all(omp_pause_resource_t) throw(); 
# 203
}
# 26 "src/ports/cuda/processing.h"
void AES_KeyExpansion(AES_values_t * AES_data); 
# 27
void AES_KeyExpansion_Redundant(AES_values_t * AES_data); 
# 28
void AES_encrypt(AES_values_t * AES_data); 
# 29
void AES_encrypt_Redundant(); 
# 66 "/usr/local/cuda/include/cuda_profiler_api.h"
extern "C" {
# 134 "/usr/local/cuda/include/cuda_profiler_api.h"
__attribute((deprecated)) extern cudaError_t cudaProfilerInitialize(const char * configFile, const char * outputFile, cudaOutputMode_t outputMode); 
# 174 "/usr/local/cuda/include/cuda_profiler_api.h"
extern cudaError_t cudaProfilerStart(); 
# 196 "/usr/local/cuda/include/cuda_profiler_api.h"
extern cudaError_t cudaProfilerStop(); 
# 203
}
# 16 "src/ports/cuda/processing.cu"
__attribute__((unused)) void AES_AddRoundKey(uint8_t  in_state[4][4], uint8_t  state[4][4], uint8_t * roundkey, unsigned Nb, unsigned round_number); 
# 17
__attribute__((unused)) void AES_SubBytes(uint8_t  state[4][4], uint8_t * sbox); 
# 18
__attribute__((unused)) void AES_ShiftRows(uint8_t  state[4][4]); 
# 19
__attribute__((unused)) void AES_MixColumns(uint8_t  state[4][4]); 
# 20
__attribute__((unused)) void AES_encrypt_state(uint8_t  in_state[4][4], uint8_t  state[4][4], unsigned Nb, uint8_t * sbox, uint8_t * roundkey, unsigned num_rounds); 
# 22
void printState(uint8_t state[4][4], int Nb) 
# 23
{ 
# 24
for (int i = 0; i < Nb; i++) 
# 25
{ 
# 26
for (int j = 0; j < 4; j++) { 
# 27
printf("%#x ", (state[j])[i]); }  
# 28
printf("\n"); 
# 29
}  
# 30
} 
# 31
void printKey(uint8_t *roundkey, int round) 
# 32
{ 
# 33
for (int i = 0; i < 4; i++) 
# 34
{ 
# 35
for (int j = 0; j < 4; j++) { 
# 36
printf("%#x ", roundkey[(((round * 4) * 4) + (j * 4)) + i]); }  
# 37
printf("\n"); 
# 38
}  
# 39
} 
# 43
__attribute__((unused)) void AES_SubWord(uint32_t word, uint8_t *sbox, uint32_t *result) 
# 44
{int volatile ___ = 1;(void)word;(void)sbox;(void)result;
# 46
::exit(___);}
#if 0
# 44
{ 
# 45
(*result) = (((((sbox[word >> 24]) << 24) | ((sbox[(uint8_t)(word >> 16)]) << 16)) | ((sbox[(uint8_t)(word >> 8)]) << 8)) | (sbox[(uint8_t)word])); 
# 46
} 
#endif
# 48 "src/ports/cuda/processing.cu"
void AES_KeyExpansion(AES_values_t *AES_data) ;
#if 0
# 49
{ 
# 50
uint32_t temp; 
# 51
uint32_t *expanded_key = (uint32_t *)(AES_data->expanded_key); 
# 52
int Nk = (AES_data->key)->Nk, Nr = (AES_data->key)->Nr, Nb = (AES_data->key)->Nb; 
# 53
(expanded_key[__device_builtin_variable_threadIdx.x]) = (*((uint32_t *)(&(((AES_data->key)->value)[(4) * (__device_builtin_variable_threadIdx.x)])))); 
# 54
__syncthreads(); 
# 55
if ((__device_builtin_variable_threadIdx.x) == (0)) { 
# 56
for (int i = Nk; i < (Nb * (Nr + 1)); i++) 
# 57
{ 
# 58
temp = (expanded_key[i - 1]); 
# 59
if ((i % Nk) == 0) 
# 60
{ 
# 61
AES_SubWord((temp >> 8) | (temp << 24), AES_data->sbox, &temp); 
# 62
temp ^= ((AES_data->rcon)[i / Nk]); 
# 63
} else { 
# 64
if ((Nk > 6) && ((i % Nk) == 4)) 
# 65
{ 
# 66
AES_SubWord(temp, AES_data->sbox, &temp); 
# 67
}  }  
# 68
(expanded_key[i]) = ((expanded_key[i - Nk]) ^ temp); 
# 69
}  }  
# 70
} 
#endif
# 72 "src/ports/cuda/processing.cu"
void AES_KeyExpansion_Redundant(AES_values_t *AES_data) ;
#if 0
# 73
{ 
# 74
uint32_t temp; 
# 75
uint32_t *expanded_key = (uint32_t *)(AES_data->expanded_key); 
# 76
int Nk = (AES_data->key)->Nk, Nr = (AES_data->key)->Nr, Nb = (AES_data->key)->Nb; 
# 77
(expanded_key[__device_builtin_variable_threadIdx.x]) = (*((uint32_t *)(&(((AES_data->key)->value)[(4) * (__device_builtin_variable_threadIdx.x)])))); 
# 78
__syncthreads(); 
# 79
if ((__device_builtin_variable_threadIdx.x) == (0)) { 
# 80
for (int i = Nk; i < (Nb * (Nr + 1)); i++) 
# 81
{ 
# 82
temp = (expanded_key[i - 1]); 
# 83
if ((i % Nk) == 0) 
# 84
{ 
# 85
AES_SubWord((temp >> 8) | (temp << 24), AES_data->sbox, &temp); 
# 86
temp ^= ((AES_data->rcon)[i / Nk]); 
# 87
} else { 
# 88
if ((Nk > 6) && ((i % Nk) == 4)) 
# 89
{ 
# 90
AES_SubWord(temp, AES_data->sbox, &temp); 
# 91
}  }  
# 92
(expanded_key[i]) = ((expanded_key[i - Nk]) ^ temp); 
# 93
}  }  
# 94
} 
#endif
# 96 "src/ports/cuda/processing.cu"
__attribute__((unused)) void AES_AddRoundKey(uint8_t in_state[4][4], uint8_t state[4][4], uint8_t *roundkey, unsigned Nb, unsigned round_number) 
# 97
{int volatile ___ = 1;(void)in_state;(void)state;(void)roundkey;(void)Nb;(void)round_number;
# 111
::exit(___);}
#if 0
# 97
{ 
# 103
for (int i = 0; i < Nb; i++) 
# 104
{ 
# 105
for (int j = 0; j < 4; j++) 
# 106
{ 
# 107
((state[i])[j]) = (((in_state[i])[j]) ^ (roundkey[(((round_number * Nb) * (4)) + (i * Nb)) + j])); 
# 108
}  
# 109
}  
# 111
} 
#endif
# 113 "src/ports/cuda/processing.cu"
__attribute__((unused)) void AES_SubBytes(uint8_t state[4][4], uint8_t *sbox) 
# 114
{int volatile ___ = 1;(void)state;(void)sbox;
# 128
::exit(___);}
#if 0
# 114
{ 
# 120
for (int i = 0; i < 4; i++) 
# 121
{ 
# 122
for (int j = 0; j < 4; j++) 
# 123
{ 
# 124
((state[i])[j]) = (sbox[(state[i])[j]]); 
# 125
}  
# 126
}  
# 128
} 
#endif
# 130 "src/ports/cuda/processing.cu"
__attribute__((unused)) void AES_ShiftRows(uint8_t state[4][4]) 
# 131
{int volatile ___ = 1;(void)state;
# 164
::exit(___);}
#if 0
# 131
{ 
# 139
uint8_t temp; 
# 143
temp = ((state[0])[1]); 
# 144
((state[0])[1]) = ((state[1])[1]); 
# 145
((state[1])[1]) = ((state[2])[1]); 
# 146
((state[2])[1]) = ((state[3])[1]); 
# 147
((state[3])[1]) = temp; 
# 150
temp = ((state[0])[2]); 
# 151
((state[0])[2]) = ((state[2])[2]); 
# 152
((state[2])[2]) = temp; 
# 153
temp = ((state[1])[2]); 
# 154
((state[1])[2]) = ((state[3])[2]); 
# 155
((state[3])[2]) = temp; 
# 158
temp = ((state[3])[3]); 
# 159
((state[3])[3]) = ((state[2])[3]); 
# 160
((state[2])[3]) = ((state[1])[3]); 
# 161
((state[1])[3]) = ((state[0])[3]); 
# 162
((state[0])[3]) = temp; 
# 164
} 
#endif
# 168 "src/ports/cuda/processing.cu"
__attribute__((unused)) void AES_MixColumns(uint8_t state[4][4]) 
# 169
{int volatile ___ = 1;(void)state;
# 203 "src/ports/cuda/processing.cu"
::exit(___);}
#if 0
# 169 "src/ports/cuda/processing.cu"
{ 
# 180 "src/ports/cuda/processing.cu"
uint8_t Tmp, Tm, t; 
# 181
for (int i = 0; i < 4; ++i) 
# 182
{ 
# 183
t = ((state[i])[0]); 
# 184
Tmp = (((((state[i])[0]) ^ ((state[i])[1])) ^ ((state[i])[2])) ^ ((state[i])[3])); 
# 186
Tm = (((state[i])[0]) ^ ((state[i])[1])); 
# 187
Tm = ((Tm << 1) ^ (((Tm >> 7) & 1) * 27)); 
# 188
((state[i])[0]) ^= (Tm ^ Tmp); 
# 190
Tm = (((state[i])[1]) ^ ((state[i])[2])); 
# 191
Tm = ((Tm << 1) ^ (((Tm >> 7) & 1) * 27)); 
# 192
((state[i])[1]) ^= (Tm ^ Tmp); 
# 194
Tm = (((state[i])[2]) ^ ((state[i])[3])); 
# 195
Tm = ((Tm << 1) ^ (((Tm >> 7) & 1) * 27)); 
# 196
((state[i])[2]) ^= (Tm ^ Tmp); 
# 198
Tm = (((state[i])[3]) ^ t); 
# 199
Tm = ((Tm << 1) ^ (((Tm >> 7) & 1) * 27)); 
# 200
((state[i])[3]) ^= (Tm ^ Tmp); 
# 201
}  
# 203
} 
#endif
# 210 "src/ports/cuda/processing.cu"
__attribute__((unused)) void AES_encrypt_state(uint8_t in_state[4][4], uint8_t state[4][4], unsigned Nb, uint8_t *sbox, uint8_t *roundkey, unsigned num_rounds) 
# 211
{int volatile ___ = 1;(void)in_state;(void)state;(void)Nb;(void)sbox;(void)roundkey;(void)num_rounds;
# 232
::exit(___);}
#if 0
# 211
{ 
# 212
AES_AddRoundKey(in_state, state, roundkey, Nb, 0); 
# 213
; 
# 214
for (unsigned roundi = (1); roundi < num_rounds; roundi++) 
# 215
{ 
# 216
AES_SubBytes(state, sbox); 
# 217
; 
# 218
AES_ShiftRows(state); 
# 219
; 
# 220
AES_MixColumns(state); 
# 221
; 
# 222
AES_AddRoundKey(state, state, roundkey, Nb, roundi); 
# 223
; 
# 224
}  
# 226
AES_SubBytes(state, sbox); 
# 227
; 
# 228
AES_ShiftRows(state); 
# 229
; 
# 230
AES_AddRoundKey(state, state, roundkey, Nb, num_rounds); 
# 231
; 
# 232
} 
#endif
# 234 "src/ports/cuda/processing.cu"
__attribute__((unused)) void counter_add(uint8_t *iv, uint64_t block, int id) 
# 235
{int volatile ___ = 1;(void)iv;(void)block;(void)id;
# 252
::exit(___);}
#if 0
# 235
{ 
# 236
uint64_t carry; 
# 237
uint8_t *counter = iv + ((16) * (((__device_builtin_variable_blockIdx.x) * (__device_builtin_variable_blockDim.x)) + (__device_builtin_variable_threadIdx.x))); 
# 238
carry = ((iv[id]) + block); 
# 239
if ((block <= (255 - (iv[id]))) || (id == 0)) 
# 240
{ 
# 241
(counter[id]) = carry; 
# 242
for (int i = id - 1; i >= 0; i--) { 
# 243
(counter[i]) = (iv[i]); }  
# 244
return; 
# 245
} else 
# 247
{ 
# 248
(counter[id]) = carry; 
# 249
carry >>= 8; 
# 250
counter_add(iv, carry, id - 1); 
# 251
}  
# 252
} 
#endif
# 253 "src/ports/cuda/processing.cu"
__attribute__((unused)) void counter_add(uint8_t *iv, uint64_t block) 
# 254
{int volatile ___ = 1;(void)iv;(void)block;
# 260
::exit(___);}
#if 0
# 254
{ 
# 259
counter_add(iv, block, 15); 
# 260
} 
#endif
# 264 "src/ports/cuda/processing.cu"
void AES_encrypt(AES_values_t *AES_data) ;
#if 0
# 265
{ 
# 266
int block = __device_builtin_variable_blockIdx.x; 
# 267
int thread = __device_builtin_variable_threadIdx.x; 
# 268
int offset = (16) * (thread + (block * (__device_builtin_variable_blockDim.x))); 
# 269
if (offset >= (AES_data->data_length)) { 
# 270
return; }  
# 271
uint8_t *plaintext = (AES_data->plaintext) + offset; 
# 272
uint8_t *counter = (AES_data->iv) + offset; 
# 273
uint8_t *final_state = (AES_data->cyphertext) + offset; 
# 276
counter_add(AES_data->iv, offset >> 4); 
# 277
; 
# 280
AES_encrypt_state((uint8_t (*)[4])counter, (uint8_t (*)[4])final_state, (AES_data->key)->Nb, AES_data->sbox, AES_data->expanded_key, (AES_data->key)->Nr); 
# 286
for (int y = 0; y < ((AES_data->key)->Nb); y++) { 
# 287
(*((uint32_t *)(&(final_state[4 * y])))) ^= (*((uint32_t *)(&(plaintext[4 * y])))); }  
# 289
} 
#endif
# 291 "src/ports/cuda/processing.cu"
void AES_encrypt_Redundant() ;
#if 0
# 292
{ 
# 293
int block = __device_builtin_variable_blockIdx.x; 
# 294
int thread = __device_builtin_variable_threadIdx.x; 
# 295
int offset = (16) * (thread + (block * (__device_builtin_variable_blockDim.x))); 
# 296
printf("%d", offset); 
# 297
} 
#endif

# 1 "processing.cudafe1.stub.c"
#define _NV_ANON_NAMESPACE _GLOBAL__N__18_processing_cpp1_ii_ec8ca181
#ifdef _NV_ANON_NAMESPACE
#endif
# 1 "processing.cudafe1.stub.c"
#include "processing.cudafe1.stub.c"
# 1 "processing.cudafe1.stub.c"
#undef _NV_ANON_NAMESPACE
